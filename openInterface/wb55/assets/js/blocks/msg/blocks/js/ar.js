/**
 * @fileoverview English messages for STM32. (EN)
 */
'use strict';
// Notes
Blockly.Msg['NOTE_C'] = 'C';
Blockly.Msg['NOTE_C_SHARP'] = 'C#';
Blockly.Msg['NOTE_D'] = 'D';
Blockly.Msg['NOTE_D_SHARP'] = 'D#';
Blockly.Msg['NOTE_E'] = 'E';
Blockly.Msg['NOTE_F'] = 'F';
Blockly.Msg['NOTE_F_SHARP'] = 'F#';
Blockly.Msg['NOTE_G'] = 'G';
Blockly.Msg['NOTE_G_SHARP'] = 'G#';
Blockly.Msg['NOTE_A'] = 'A';
Blockly.Msg['NOTE_A_SHARP'] = 'A#';
Blockly.Msg['NOTE_B'] = 'B';
Blockly.Msg['MUSIC_SILENCE'] = 'Silence';
// Display - STM32
Blockly.Msg['DISPLAY_STM32_CONTROL_COLOR_LED_TITLE'] = 'control %1 LED to state %2';
Blockly.Msg['DISPLAY_STM32_CONTROL_COLOR_LED_TOOLTIP'] = 'Control the color LED of STM32 board.';
Blockly.Msg['DISPLAY_STM32_TOGGLE_LED_STATE_TITLE'] = 'toggle state of %1';
Blockly.Msg['DISPLAY_STM32_TOGGLE_LED_STATE_TOOLTIP'] = 'Toggle state of color LED of STM32 board.';
Blockly.Msg['LED_BLUE'] = 'LED1 (blue)';
Blockly.Msg['LED_GREEN'] = 'LED2 (green)';
Blockly.Msg['LED_RED'] = 'LED3 (red)';
// Display - LCD
Blockly.Msg['DISPLAY_LCD_SETTEXT_TITLE'] = '[LCD] show text %1 on line %2 position %3';
Blockly.Msg['DISPLAY_LCD_SETTEXT_TOOLTIP'] = IMG_MODULE_LCD_3V3 + Blockly.Tooltip.SEP + 'Show text on the grove lcd 1602 display. Connect lcd on I2C port.';
Blockly.Msg['DISPLAY_LCD_CLEAR_TITLE'] = '[LCD] clear display';
Blockly.Msg['DISPLAY_LCD_CLEAR_TOOLTIP'] = IMG_MODULE_LCD_3V3 + Blockly.Tooltip.SEP + 'Enable to clear the entire lcd text. Connect lcd on I2C port.';
Blockly.Msg['DISPLAY_LCD_SETRGBCOLOR_TITLE'] = '[LCD RGB] illuminate the LCD display in R %1 G %2 B %3';
Blockly.Msg['DISPLAY_LCD_SETRGBCOLOR_TOOLTIP'] = IMG_MODULE_LCD_RGB + Blockly.Tooltip.SEP + 'Block controlling the backlight of the Grove LCD 16x2 characters module. Give a value between 0 and 255 for illuminate the display in red, green and blue. Connect LCD on an I2C port.';
Blockly.Msg['DISPLAY_LCD_SETPALETTERGBCOLOR_TITLE'] = '[LCD RGB] illuminate the LCD display in %1';
Blockly.Msg['DISPLAY_LCD_SETPALETTERGBCOLOR_TOOLTIP'] = IMG_MODULE_LCD_RGB + Blockly.Tooltip.SEP + 'Block controlling the backlight of the Grove LCD 16x2 characters module. Choice color in palette for illuminate the display. Connect LCD on an I2C port.';
// Display - OLED
Blockly.Msg['DISPLAY_OLED_ADDTEXT_TITLE'] = '[OLED] show text %1 at position x %2 y %3';
Blockly.Msg['DISPLAY_OLED_ADDTEXT_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable write text on OLED display (128x64 px). Connect the OLED display on I2C port.';
Blockly.Msg['DISPLAY_OLED_SETPIXEL_TITLE'] = '[OLED] control pixel x %1 y %2 to state %3';
Blockly.Msg['DISPLAY_OLED_SETPIXEL_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to control each OLED display pixel (128x64 px). Connect the OLED display on I2C port.';
Blockly.Msg['DISPLAY_OLED_DRAWLINE_TITLE'] = '[OLED] draw a line from (%1, %2) to (%3, %4)';
Blockly.Msg['DISPLAY_OLED_DRAWLINE_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to draw a line between two points on the Grove OLED display (128x64 px). Connect the OLED display on I2C port.';
Blockly.Msg['DISPLAY_OLED_SETBACKGROUND_TITLE'] = '[OLED] set background to %1';
Blockly.Msg['DISPLAY_OLED_WHITE'] = 'white';
Blockly.Msg['DISPLAY_OLED_BLACK'] = 'black';
Blockly.Msg['DISPLAY_OLED_SETBACKGROUND_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to invert the Grove OLED display. Connect the OLED display on I2C port.';
Blockly.Msg['DISPLAY_OLED_CLEARSCREEN_TITLE'] = '[OLED] clear screen';
Blockly.Msg['DISPLAY_OLED_CLEARSCREEN_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to clear the entire Grove OLED screen. Connect the OLED display on I2C port.';
Blockly.Msg['DISPLAY_OLED_DRAWICON_TITLE'] = '[OLED] show icon %1 on x %2 y %3 ';
Blockly.Msg['DISPLAY_OLED_DRAWICON_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable show Micro:bit icon from Image library. Connect the OLED display on I2C port.';
//Display - LED MATRIX
Blockly.Msg['DISPLAY_RGB_LED_MATRIX_TITLE'] = '[RGB LED Matrix] display %1 %2';
Blockly.Msg['DISPLAY_RGB_LED_MATRIX_TOOLTIP'] = IMG_MODULE_RGB_LED_MATRIX_8_8 + Blockly.Tooltip.SEP + 'Enables a drawing to be displayed on the 8x8 RGB LED matrix.';
Blockly.Msg['DISPLAY_RGB_LED_MATRIX_STOPDISPLAY_TITLE'] = '[RGB LED Matrix] clear the matrix';
Blockly.Msg['DISPLAY_RGB_LED_MATRIX_STOPDISPLAY_TOOLTIP'] = IMG_MODULE_RGB_LED_MATRIX_8_8 + Blockly.Tooltip.SEP + 'Turns off all LEDs in the matrix';
Blockly.Msg['DISPLAY_LED_MATRIX_DURATION'] = 'during';
Blockly.Msg['DISPLAY_LED_MATRIX_DURATION_UNIT'] = 'ms';
//Display - RGB LED MATRIX
Blockly.Msg['DISPLAY_LED_MATRIX_TITLE'] = '[LED Matrix] display %1 %2';
Blockly.Msg['DISPLAY_LED_MATRIX_TOOLTIP'] = IMG_MODULE_LED_MATRIX_8_8 + Blockly.Tooltip.SEP + 'Enables a drawing to be displayed on the 8x8 monochrome LED matrix.';
Blockly.Msg['DISPLAY_LED_MATRIX_CLEAR_TITLE'] = '[LED Matrix] clear the matrix';
Blockly.Msg['DISPLAY_LED_MATRIX_CLEAR_TOOLTIP'] = IMG_MODULE_LED_MATRIX_8_8 + Blockly.Tooltip.SEP + 'Turns off all LEDs in the matrix';
// Display - LED modules
Blockly.Msg['DISPLAY_SETGROVELED_TITLE'] = '[LED] control LED to state %1 on pin %2';
Blockly.Msg['DISPLAY_SETGROVELED_TOOLTIP'] = IMG_MODULE_LED + Blockly.Tooltip.SEP + 'Enable to switch on or switch off the LED socket kit Grove (0 or 1) on digital pins.';
Blockly.Msg['DISPLAY_SETLEDINTENSITY_TITLE'] = '[LED] set LED intensity to %1 (%) on pin %2';
Blockly.Msg['DISPLAY_SETLEDINTENSITY_TOOLTIP'] = IMG_MODULE_LED_PWM + Blockly.Tooltip.SEP + 'Enable to set the LED intensity from 0 to 100% on PWM pins.';
Blockly.Msg['DISPLAY_SET_VARIABLE_COLOR_LED_TITLE'] = '[Variable Color LED] set intensity to %1 (%) on pin %2';
Blockly.Msg['DISPLAY_SET_VARIABLE_COLOR_LED_TOOLTIP'] = IMG_MODULE_LED_VARIABLE_COLOR + Blockly.Tooltip.SEP + 'Enable to set the LED intensity from 0 to 100 (%) on PWM pins. When using the module for the first time, RGB are set to 0. Use a screwdriver on R, G or B behind module to control LED color.';
Blockly.Msg['DISPLAY_4DIGIT_SETNUMBER_TITLE'] = '[4-Digit module] show %1 %2 on pins CLK %3 DIO %4';
Blockly.Msg['DISPLAY_4DIGIT_SETNUMBER_TOOLTIP'] = IMG_MODULE_4DIGITDISPLAY + Blockly.Tooltip.SEP + 'Enable to show numbers or temperature on grove 4-digit display (TM1637) on digital pins.';
Blockly.Msg['DISPLAY_4DIGIT_SETCLOCK_TITLE'] = '[4-Digit module] show clock on pins CLK %1 DIO %2';
Blockly.Msg['DISPLAY_4DIGIT_SETCLOCK_TOOLTIP'] = IMG_MODULE_4DIGITDISPLAY + Blockly.Tooltip.SEP + 'Enable to show clock on grove 4-digit display (TM1637) on digital pins. Warning, getting real clock is possible only if STM32 stay in power on mode.';
Blockly.Msg['DISPLAY_4DIGIT_NUMBER'] = 'number';
Blockly.Msg['DISPLAY_4DIGIT_TEMPERATURE'] = 'temperature';
Blockly.Msg['DISPLAY_MY9221_SET_LEVEL_TITLE'] = '[LED Bar module] set level of %1 on pins DI %2 DCKI %3';
Blockly.Msg['DISPLAY_MY9221_SET_LEVEL_TOOLTIP'] = IMG_MODULE_LED_BAR + Blockly.Tooltip.SEP + 'Enable to show level of input value on grove LED bar display (MY9221) on digital pins.';
Blockly.Msg['DISPLAY_MY9221_REVERSE_TITLE'] = '[LED Bar Module] invert display %1 DI pins %2 DCKI %3';
Blockly.Msg['DISPLAY_MY9221_REVERSE_TOOLTIP'] = IMG_MODULE_LED_BAR + Blockly.Tooltip.SEP + 'Allows to invert the 10 LEDs of the MY9221 module with the digital pins.';
// Display - Neopixel
Blockly.Msg['DISPLAY_NEOPIXEL_DEFINE_TITLE'] = '[Neopixel] define %1 LED on pin %2';
Blockly.Msg['DISPLAY_NEOPIXEL_DEFINE_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to define LED number of neopixel. This block have to be used in setup.';
Blockly.Msg['DISPLAY_NEOPIXEL_LEDCONTROL_TITLE'] = '[Neopixel] set LED %1 to R %2 G %3 B %4 on pin %5';
Blockly.Msg['DISPLAY_NEOPIXEL_LEDCONTROL_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control each LED color of neopixels as (R,G,B) from 0 to 255. Use P15 to set Alphabot neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_SETPALETTECOLOR_TITLE'] = '[Neopixel] set LED %1 to %2 on pin %3';
Blockly.Msg['DISPLAY_NEOPIXEL_SETPALETTECOLOR_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control each LED color of neopixel. Use P15 to set Alphabot neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDRGB_TITLE'] = '[Neopixel] set all LED to colour R %1 G %2 B %3 on pin %4';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDRGB_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control all LED of neopixel to the choosed colour value as (R,G,B) from 0 to 255. Use P15 to set Alphabot neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDCOLOR_TITLE'] = '[Neopixel] set all LED to colour %1 on pin %2';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDCOLOR_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control all LED of neopixel to the choosed colour value. Use P15 to set Alphabot neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_RAINBOW_TITLE'] = '[Neopixel] set a rainbow on pin %1';
Blockly.Msg['DISPLAY_NEOPIXEL_RAINBOW_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to show a rainbow on neopixel module, set pin and the number of LED.';
// Display - Chainable LED RGB
Blockly.Msg['DISPLAY_CHAINABLERGBLED_DEFINE_TITLE'] = '[Chainable LED] define %1 LED on pins CIN %2 DIN %3';
Blockly.Msg['DISPLAY_CHAINABLERGBLED_DEFINE_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Enable to define chainable RGB LED with number of LED on digital pins D0 up through D13.';
Blockly.Msg['DISPLAY_CHAINABLE_RGBLED_TITLE'] = '[Chainable LED] set LED %1 at R %2 G %3 B %4 on pins CIN %5 DIN %6';
Blockly.Msg['DISPLAY_CHAINABLE_RGBLED_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Block controlling the color of the RGB LED, give a value between 0 and 255 for Red, Green and Blue.';
Blockly.Msg['DISPLAY_CHAINABLE_PALETTERGBLED_TITLE'] = '[Chainable LED] contrôler la LED %1 à %2 sur les broches CIN %3 DIN %4';
Blockly.Msg['DISPLAY_CHAINABLE_PALETTERGBLED_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Bloc contrôlant la couleur de la DEL RGB, choisir une couleur dans la palette.';
Blockly.Msg['DISPLAY_CHAINABLE_ALLRGBLED_TITLE'] = '[Chainable LED] contrôler toutes les LED à R %1 G %2 B %3 sur les broches CIN %4 DIN %5';
Blockly.Msg['DISPLAY_CHAINABLE_ALLRGBLED_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Bloc contrôlant la couleur des DEL RGB, donner une valeur entre 0 et 255 pour Rouge, Vert et Bleu.';
Blockly.Msg['DISPLAY_CHAINABLE_PALETTEALLRGBLED_TITLE'] = '[Chainable LED] contrôler toutes les LED à %1 sur les broches CIN %2 DIN %3';
Blockly.Msg['DISPLAY_CHAINABLE_PALETTEALLRGBLED_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Bloc contrôlant la couleur des DEL RGB, choisir une couleur dans la palette.';
Blockly.Msg['DISPLAY_CHAINABLE_RESETALLRGBLED_TITLE'] = '[Chainable LED] éteindre sur les broches CIN %1 DIN %2';
Blockly.Msg['DISPLAY_CHAINABLE_RESETALLRGBLED_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Bloc éteignant toutes les DEL RGB.';
// Input/Output - STM32
Blockly.Msg['IO_WAIT_TITLE'] = 'wait %1 %2';
Blockly.Msg['IO_WAIT_TOOLTIP'] = 'Stop the code execution (duration in seconds or milliseconds).';
Blockly.Msg['IO_WAIT_SECOND'] = 'second(s)';
Blockly.Msg['IO_WAIT_MILLISECOND'] = 'millisecond(s)';
Blockly.Msg['IO_WAIT_MICROSECOND'] = 'microsecond(s)';
Blockly.Msg['IO_WAIT_UNTIL_TITLE'] = 'wait until %1';
Blockly.Msg['IO_WAIT_UNTIL_TOOLTIP'] = 'Stop the code execution until the satisfied condition.';
Blockly.Msg['IO_INITCHRONOMETER_TITLE'] = 'initialize the chronometer';
Blockly.Msg['IO_INITCHRONOMETER_TOOLTIP'] = 'Allows you to initialize the chronometer (in seconds).';
Blockly.Msg['IO_GETCHRONOMETER_TITLE'] = 'get chronometer in %1';
Blockly.Msg['IO_GETCHRONOMETER_TOOLTIP'] = 'Returns the chronometer value from the initialization in seconds or milliseconds.';
Blockly.Msg['IO_STM32_GETSWITCHSTATE_TITLE'] = 'read state of switch %1';
Blockly.Msg['IO_STM32_GETSWITCHSTATE_TOOLTIP'] = 'Enable to read the digital value integrated switch of STM32 board (SW1, SW2, SW3).';
Blockly.Msg['IO_STM32_ONSWITCHBUTTONPRESSED_TITLE'] = 'on switch button %1 %2 then';
Blockly.Msg['IO_STM32_ONSWITCHBUTTONPRESSED_TOOLTIP'] = 'Execute instructions by reading the digital value integrated switch of STM32 board (SW1, SW2, SW3).';
Blockly.Msg['IO_STM32_PRESSED'] = 'pressed';
Blockly.Msg['IO_STM32_RELEASED'] = 'released';
// Input/Output - External modules
Blockly.Msg['IO_GROVEKEYPAD_GETNUMBER_TITLE'] = '[Numeric Touch Keypad] get number on UART bus %1';
Blockly.Msg['IO_GROVEKEYPAD_GETNUMBER_TOOLTIP'] = IMG_MODULE_KEYPAD + Blockly.Tooltip.SEP + 'Enable to get touched number from keypad grove module on pins RX & TX. When you connect device, make sure you “cross” the wires. STM32 TX pin needs to be connected with device\'s RX pin, and the RX pin with the device\'s TX pin.';
Blockly.Msg['IO_GROVEJOYSTICK_GETAXIS_TITLE'] = '[Joystick Module] joystick axis %1 value on pins A0 %2 A1 %3';
Blockly.Msg['IO_GROVEJOYSTICK_GETAXIS_TOOLTIP'] = IMG_MODULE_JOYSTICK + Blockly.Tooltip.SEP + 'Returns grove joystick axis value (from 0 to 4095) on analog pins p34 through p36, or p39 (as A2 to A4 on shield Grove)..';
Blockly.Msg['IO_GROVECOLOREDBUTTON_GET_TITLE'] = '[Colored Button Module] state on pin SIG2 %1';
Blockly.Msg['IO_GROVECOLOREDBUTTON_GET_TOOLTIP'] = IMG_MODULE_LED_BUTTON + Blockly.Tooltip.SEP + 'Returns grove colored button state (0 or 1) on digital pins.';
Blockly.Msg['IO_GROVECOLOREDBUTTON_SETLED_TITLE'] = '[Colored Button Module] control LED to state %1 on pin SIG1 %2';
Blockly.Msg['IO_GROVECOLOREDBUTTON_SETLED_TOOLTIP'] = IMG_MODULE_LED_BUTTON + Blockly.Tooltip.SEP + 'Enable to switch on or switch off the LED Button Grove (0 or 1) on digital pins.';
Blockly.Msg['IO_GETGROVEROTARYANGLE_TITLE'] = '[Rotary Angle Module] angle on pin %1';
Blockly.Msg['IO_GETGROVEROTARYANGLE_TOOLTIP'] = IMG_MODULE_ROTARY_ANGLE + Blockly.Tooltip.SEP + 'Returns grove rotary angle position (from 0 to 4095) on analog pins p34 through p36, or p39 (as A2 to A4 on shield Grove)..';
Blockly.Msg['IO_GETGROVESLIDEPOTENTIOMETER_TITLE'] = '[Slide Potentiometer] position value on pin %1';
Blockly.Msg['IO_GETGROVESLIDEPOTENTIOMETER_TOOLTIP'] = IMG_MODULE_SLIDE_POT + Blockly.Tooltip.SEP + 'Returns grove slide potentiometer position value (from 0 to 4095) on analog pins p34 through p36, or p39 (as A2 to A4 on shield Grove)..';
Blockly.Msg['IO_GETGROVETACTILE_TITLE'] = '[Touch Sensor] touch state on pin %1 ';
Blockly.Msg['IO_GETGROVETACTILE_TOOLTIP'] = IMG_MODULE_TOUCH + Blockly.Tooltip.SEP + 'Returns grove touch sensor state (0 or 1) on digital pins.';
Blockly.Msg['IO_GETGROVEBUTTON_TITLE'] = '[Button Module] button state on pin %1 ';
Blockly.Msg['IO_GETGROVEBUTTON_TOOLTIP'] = IMG_MODULE_BUTTON + Blockly.Tooltip.SEP + 'Returns grove button state (0 or 1) on digital pins.';
Blockly.Msg['IO_GETGROVESWITCH_TITLE'] = '[Switch Module] switch state on pin %1 ';
Blockly.Msg['IO_GETGROVESWITCH_TOOLTIP'] = IMG_MODULE_SWITCH + Blockly.Tooltip.SEP + 'Returns grove switch state (0 or 1) on digital pins.';
// Input/Output - Pins
Blockly.Msg['IO_DIGITAL_SIGNAL_TITLE'] = '%1';
Blockly.Msg['IO_DIGITAL_SIGNAL_HIGH'] = 'HIGH (1)';
Blockly.Msg['IO_DIGITAL_SIGNAL_LOW'] = 'LOW (0)';
Blockly.Msg['IO_DIGITAL_SIGNAL_TOOLTIP'] = 'Returns boolean value (1 if HIGH or 0 if LOW).';
Blockly.Msg['IO_READDIGITALPIN_TITLE'] = 'read digital pin %1';
Blockly.Msg['IO_READDIGITALPIN_TOOLTIP'] = 'Enable to read the digital value of pins (0 or 1).';
Blockly.Msg['IO_WRITEDIGITALPIN_TITLE'] = 'write state %1 on digital pin %2';
Blockly.Msg['IO_WRITEDIGITALPIN_TOOLTIP'] = 'Enable to write the value (0 or 1) on digital pin.';
Blockly.Msg['IO_READANALOGPIN_TITLE'] = 'read analog pin %1';
Blockly.Msg['IO_READANALOGPIN_TOOLTIP'] = 'Enable to read the analog value of pins (0-4095) as between 0 and 3.6V.';
Blockly.Msg['IO_WRITEPWMPIN_TITLE'] = 'write value %1 on PWM pin %2';
Blockly.Msg['IO_WRITEPWMPIN_TOOLTIP'] = 'Enable to apply PWM signal with fixed 500Hz-frequency. You can change value from 0 to 255. 128 will be 50% of duty cycle.';
Blockly.Msg['IO_SETPWM_TITLE'] = 'apply a square signal of %1 (Hz) frequency on pin %2';
Blockly.Msg['IO_SETPWM_TOOLTIP'] = 'Enable to apply a PWM square signal with 50% of duty cycle. You can change frequency of the signal.';
Blockly.Msg['IO_STOPPWM_TITLE'] = 'stop PWM signal of pin %1';
Blockly.Msg['IO_STOPPWM_TOOLTIP'] = 'Enable to stop applied PWM signal of a pin.';
Blockly.Msg['IO_GETVOLTAGE_TITLE'] = 'convert %1 in voltage with %2 resolution';
Blockly.Msg['IO_GETVOLTAGE_TOOLTIP'] = 'Enable to convert analog value in voltage by resolutions (12-bit: 4096 or 16-bit: 65536) and maximum of 3.3V.';
Blockly.Msg['IO_GETVOLTAGE_12BIT'] = '12-bit';
Blockly.Msg['IO_GETVOLTAGE_16BIT'] = '16-bit';
// Communication - UART Blocks
Blockly.Msg['COMMUNICATION_UART_INIT_TITLE'] = 'إعادة توجيه المسلسل إلى RX %2 TX %3 Baudrate %1';
Blockly.Msg['COMMUNICATION_UART_INIT_TOOLTIP'] = 'Initialize serial connection on the UART port';
Blockly.Msg['COMMUNICATION_UART_INIT_TITLE'] = '[uart] initialize serial connectin on bus %1 Baudrate %2';
Blockly.Msg['COMMUNICATION_UART_INIT_TOOLTIP'] = 'Initialize serial connection on the UART port';
Blockly.Msg['COMMUNICATION_UART_WRITE_TITLE'] = '[uart] write data %1 on bus %2';
Blockly.Msg['COMMUNICATION_UART_WRITE_TOOLTIP'] = 'Send data on the UART port.';
// Communication - Serial connection
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_TITLE'] = 'write on serial port %1';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_TOOLTIP'] = 'Write a string on serial port.';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_WITH'] = 'with';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_NEWLINES'] = 'newline(s)';
Blockly.Msg['COMMUNICATION_SERIAL_ONDATARECEIVED_TITLE then'] = 'on serial data received in %1 then';
Blockly.Msg['COMMUNICATION_SERIAL_ONDATARECEIVED_TOOLTIP'] = 'Allows you to execute instructions if data is received by serial port in the \'serialData\' variable.';
Blockly.Msg['COMMUNICATION_COMPUTER_PLAYNOTE_TITLE'] = 'Play music %1 in the serial port';
Blockly.Msg['COMMUNICATION_COMPUTER_PLAYNOTE_TOOLTIP'] = 'Play selected note until execution of "Stop music" block.';
Blockly.Msg['COMMUNICATION_COMPUTER_SETFREQUENCY_TITLE'] = 'Play frequency %1 (Hz) on the computer';
Blockly.Msg['COMMUNICATION_COMPUTER_SETFREQUENCY_TOOLTIP'] = 'This block allows to play a given frequency on the computer';
Blockly.Msg['COMMUNICATION_COMPUTER_STOPMUSIC_TITLE'] = 'Stop music of serial port';
Blockly.Msg['COMMUNICATION_COMPUTER_STOPMUSIC_TOOLTIP'] = 'Stop the current note of serial port.';
Blockly.Msg['COMMUNICATION_WRITEGRAPH_TITLE'] = 'write graph';
Blockly.Msg['COMMUNICATION_WRITEGRAPH_TOOLTIP'] = 'This block makes it possible to write (digital) data that will be visible in the plotter. It can be used with one or more blocks in "Name" and "Data" format. Click on icon \'Graphic mode\' to display graphics.';
Blockly.Msg['COMMUNICATION_DATA'] = 'Data';
Blockly.Msg['COMMUNICATION_PRINT_DATAS_TITLE'] = 'Name %1 Data %2';
Blockly.Msg['COMMUNICATION_PRINT_DATAS_TOOLTIP'] = 'This block is to be used in the "Write graph" block. It must contain the name of the (text) value to display and the value in question.';
// Communication - STM32
Blockly.Msg['COMMUNICATION_STM32_RTC_SETTIME_TITLE'] = '[Clock RTC] initialize at %1 date %2 hour %3 minute %4 second %5';
Blockly.Msg['COMMUNICATION_STM32_RTC_SETTIME_TOOLTIP'] = 'Allows you to initialize the date with the STM32 integrated RTC clock module so that you can read the exact date and time using the \'Read clock module\' block. Place in the \'on start\' block.';
Blockly.Msg['COMMUNICATION_STM32_RTC_READTIME_TITLE'] = '[Clock RTC] read %1';
Blockly.Msg['COMMUNICATION_STM32_RTC_READTIME_TOOLTIP'] = 'Read the date and time (choose from the drop-down menu) from the integrated RTC clock module. To obtain a correct result, first use the two blocks \'Initialize the clock module\'.';
Blockly.Msg['CLOCK_ALL_DATA'] = 'l\'horloge';
Blockly.Msg['CLOCK_MONTH_DAY'] = 'day of month';
Blockly.Msg['CLOCK_MONTH'] = 'month';
Blockly.Msg['CLOCK_YEAR'] = 'year';
Blockly.Msg['CLOCK_SECOND'] = 'second';
Blockly.Msg['CLOCK_MINUTE'] = 'minute';
Blockly.Msg['CLOCK_HOUR'] = 'hour';
Blockly.Msg['CLOCK_WEEK_DAY'] = 'day of week';
Blockly.Msg['DAY_MONDAY'] = 'monday';
Blockly.Msg['DAY_TUESDAY'] = 'tuesday';
Blockly.Msg['DAY_WEDNESDAY'] = 'wednesday';
Blockly.Msg['DAY_THURSDAY'] = 'thursday';
Blockly.Msg['DAY_FRIDAY'] = 'friday';
Blockly.Msg['DAY_SATURDAY'] = 'saturday';
Blockly.Msg['DAY_SUNDAY'] = 'sunday';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SEND_TITLE'] = '[ST BLE Sensor] send data of';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SEND_TOOLTIP'] = IMG_MODULE_BLE_SENSOR + Blockly.Tooltip.SEP + 'This block makes it possible to write data by integrated bluetooth BLE of STM32. It can be used with one or more blocks in "Service" and "Value" format.<br> Steps for visualizing data: 1. Download ST BLE Sensor application. 2. Upload code on STM32. 3. A the start of execution, click on "Connect one Device" on the app. 4. "Click on WBRR-MPY"';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SERVICE_VALUE'] = 'Value';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SERVICE_TITLE'] = '[ST BLE Sensor] service %1';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SERVICE_TOOLTIP'] = IMG_MODULE_BLE_SENSOR + Blockly.Tooltip.SEP + 'This block is to be used in the "Send data by service" block. Select any service of application, and add your value. Note: You can use any service only once.';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SERVICE_FIRST_TEMPERATURE'] = 'Temperature 1 (°C)';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SERVICE_SECOND_TEMPERATURE'] = 'Temperature 2 (°C)';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SERVICE_HUMIDITY'] = 'Humidity (%)';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SERVICE_PRESSURE'] = 'Pressure (hPa or mBar)';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SERVICE_LUMINOSITY'] = 'Luminosity (lux)';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SERVICE_ACCELEROMETER'] = 'Accelerometer (mg.s-²)';
Blockly.Msg['COMMUNICATION_BLE_STSENSORAPP_SERVICE_CO_SENSOR'] = 'Carbon Monoxide (CO) (ppm)';
Blockly.Msg['COMMUNICATION_BLE_SEND_DATA_TITLE'] = '[Bluetooth] send data %1 ';
Blockly.Msg['COMMUNICATION_BLE_SEND_DATA_TOOLTIP'] = IMG_MODULE_BLE_SENSOR + Blockly.Tooltip.SEP + 'Send data through Bluetooth.';
Blockly.Msg['COMMUNICATION_BLE_READ_DATA_TITLE'] = '[Bluetooth] on data reception in %1 then ';
Blockly.Msg['COMMUNICATION_BLE_READ_DATA_TOOLTIP'] = IMG_MODULE_BLE_SENSOR + Blockly.Tooltip.SEP + 'Execute instruction on data reception via Bluetooth (BLE).';
Blockly.Msg['COMMUNICATION_FIZZIQ_BT_TITLE'] = '[Fizziq App] send %1 %2';
Blockly.Msg['COMMUNICATION_FIZZIQ_BT_TOOLTIP'] = IMG_MODULE_FIZZIQ + Blockly.Tooltip.SEP + 'Send data via the ESP32\'s Bluetooth service to Fizziq App.';
Blockly.Msg['FIZZ_TEMP'] = 'Temperature';
Blockly.Msg['FIZZ_HUM'] = 'Moisture';
Blockly.Msg['FIZZ_VOLTAGE'] = 'Voltage';
Blockly.Msg['FIZZ_WEIGHT'] = 'Weight';
Blockly.Msg['FIZZ_PRESSURE'] = 'Pressure';
Blockly.Msg['FIZZ_CONCENTRATION'] = 'Concentration';
Blockly.Msg['FIZZ_MAGNETIC'] = 'Magnetic field';
Blockly.Msg['FIZZ_BRIGHTNESS'] = 'Brightness';
Blockly.Msg['FIZZ_ACCELERATION'] = 'Acceleration';
Blockly.Msg['FIZZ_COMPASS'] = 'Compass';
// Communication - Data logging
Blockly.Msg['COMMUNICATION_OPENLOG_WRITE_TITLE'] = '[Openlog] write in the SD card %1 on pins RX %2 TX %3 %4 Datas %5';
Blockly.Msg['COMMUNICATION_OPENLOG_WRITE_TOOLTIP'] = IMG_MODULE_OPENLOG + Blockly.Tooltip.SEP + 'Block enables writing data in the SD card of Openlog module.';
// Communication - Wireless
Blockly.Msg['COMMUNICATION_BLUETOOTH_SENDDATA_TITLE'] = '[Bluetooth] send on pins RX %1 TX %2 message %3';
Blockly.Msg['COMMUNICATION_BLUETOOTH_SENDDATA_TOOLTIP'] = IMG_MODULE_HC05 + Blockly.Tooltip.SEP + 'Enable to send any data by bluetooth HC05 module on pins RX/TX.';
Blockly.Msg['COMMUNICATION_BLUETOOTH_ONDATARECEIVED_TITLE'] = '[Bluetooth] on message received RX %1 TX %2 in %3 then';
Blockly.Msg['COMMUNICATION_BLUETOOTH_ONDATARECEIVED_TOOLTIP'] = IMG_MODULE_HC05 + Blockly.Tooltip.SEP + 'Allows you to execute instructions on data received by Bluetooth HC05 module in the \'bluetoothData\' variable on pins TX/RX.';
// Communication - GPS
Blockly.Msg['COMMUNICATION_GPS_INFO_TYPE'] = 'frame type';
Blockly.Msg['COMMUNICATION_GPS_INFO_CLOCK'] = 'clock (h, m, s)';
Blockly.Msg['COMMUNICATION_GPS_INFO_LATITUDE'] = 'latitude (°)';
Blockly.Msg['COMMUNICATION_GPS_INFO_LONGITUDE'] = 'longitude (°)';
Blockly.Msg['COMMUNICATION_GPS_INFO_SATELLITE'] = 'number of satellites used';
Blockly.Msg['COMMUNICATION_GPS_INFO_ALTITUDE'] = 'altitude (m)';
Blockly.Msg['COMMUNICATION_GPS_GET_NMEA_TITLE'] = '[GPS] NMEA frames on the UART port %1';
Blockly.Msg['COMMUNICATION_GPS_GET_NMEA_TOOLTIP'] = IMG_MODULE_GPS + Blockly.Tooltip.SEP + 'Returns the list of NMEA frames read with the Grove SIM28 or Air530 GPS module on UART port 1 (D2/D14) or UART port 2 (D0/D1). On the Grove shield, the UART port (RX/TX) by default corresponds to UART port 2.';
Blockly.Msg['COMMUNICATION_GPS_GGA_GETINFORMATIONS_TITLE'] = '[GPS] get %2 on the UART port %1';
Blockly.Msg['COMMUNICATION_GPS_GGA_GETINFORMATIONS_TOOLTIP'] = IMG_MODULE_GPS + Blockly.Tooltip.SEP + 'Returns the data selected from (frame type, clock, latitude, longitude, altitude) analyzed from the NMEA frame (GNGGA or GPGGA) read with the Grove SIM28 or Air530 GPS module on UART port 1 (D2/D14) or UART port 2 (D0/D1). On the Grove shield, the default UART (RX/TX) port is UART port 2.';
// Communication - NFC
Blockly.Msg['COMMUNICATION_M24SR64_NFC_READ_TITLE'] = '[NFC M24SR64] read data from the tag';
Blockly.Msg['COMMUNICATION_M24SR64_NFC_READ_TOOLTIP'] = IMG_MODULE_NFC + Blockly.Tooltip.SEP + 'Read data from the NFC tag via I2C.';
Blockly.Msg['COMMUNICATION_M24SR64_NFC_ERASE_TITLE'] = '[NFC M24SR64] erase data on the tag';
Blockly.Msg['COMMUNICATION_M24SR64_NFC_ERASE_TOOLTIP'] = IMG_MODULE_NFC + Blockly.Tooltip.SEP + 'Erase all the memory on the NFC tag.';
Blockly.Msg['COMMUNICATION_M24SR64_WRITE_NFC_TITLE'] = '[NFC M24SR64] write %1 on the tag';
Blockly.Msg['COMMUNICATION_M24SR64_WRITE_NFC_TOOLTIP'] = IMG_MODULE_NFC + Blockly.Tooltip.SEP + 'Write data on the NFC tag (maximum capacity 8000 characters).';
// Communication - LoRa
Blockly.Msg['COMMUNICATION_LORA_INIT_TITLE'] = '[LoRa E5]قم بتهيئة الوحدة باستخدام appEui %1 باستخدام appKey %2';
Blockly.Msg['COMMUNICATION_LORA_INIT_TOOLTIP'] = IMG_MODULE_LORA + Blockly.Tooltip.SEP + 'يبدأ ويحصل على معلومات التعريف الخاصة بوحدة LoRa المتصلة بمنفذ UART';
Blockly.Msg['COMMUNICATION_LORA_INIT'] = 'مع devAddr:';
Blockly.Msg['COMMUNICATION_LORA_SEND_TITLE'] = '[LoRa E5] إرسال البيانات';
Blockly.Msg['COMMUNICATION_LORA_SEND_TOOLTIP'] = IMG_MODULE_LORA + Blockly.Tooltip.SEP + 'إرسال البيانات من أجهزة الاستشعار من خلال وحدة LoRa.';
Blockly.Msg['COMMUNICATION_LORA_RECEIVE_TITLE'] = '[LoRa E5] يتلقى رسالة';
Blockly.Msg['COMMUNICATION_LORA_RECEIVE_TOOLTIP'] = IMG_MODULE_LORA + Blockly.Tooltip.SEP + 'تمكن من استلام البيانات عبر وحدة LoRa.';
// Sensors - Expansion board
Blockly.Msg['SENSORS_ACCELEROMETER_INTEGRATED_LIS2DW12_TITLE'] = '[Accelerometer LIS2DW12] acceleration following %1 axis';
Blockly.Msg['SENSORS_ACCELEROMETER_INTEGRATED_LIS2DW12_TOOLTIP'] = IMG_X_NUCLEO_IKS01A3 + Blockly.Tooltip.SEP + 'Returns the acceleration following X, Y or Z axis (in mg).';
Blockly.Msg['X_AXIS'] = 'x';
Blockly.Msg['Y_AXIS'] = 'y';
Blockly.Msg['Z_AXIS'] = 'z';
Blockly.Msg['SENSORS_INCLINOMETER_INTEGRATED_LIS2DW12_TITLE'] = '[Inclinometer LIS2DW12] tilt %1 axis and horizontal plane';
Blockly.Msg['SENSORS_INCLINOMETER_INTEGRATED_LIS2DW12_TOOLTIP'] = IMG_X_NUCLEO_IKS01A3 + Blockly.Tooltip.SEP + 'Returns the tilt between X, Y or Z axis and the horizontal plane.';
Blockly.Msg['SENSORS_ACCELEROMETER_INTEGRATED_LSM6DSO_TITLE'] = '[Accelerometer LSM6DSO] acceleration following %1 axis';
Blockly.Msg['SENSORS_ACCELEROMETER_INTEGRATED_LSM6DSO_TOOLTIP'] = IMG_X_NUCLEO_IKS01A3 + Blockly.Tooltip.SEP + 'Returns the acceleration following X, Y or Z axis (in mg).';
Blockly.Msg['SENSORS_GYROSCOPE_INTEGRATED_LSM6DSO_TITLE'] = '[Gyroscope LSM6DSO] angular speed following %1 axis';
Blockly.Msg['SENSORS_GYROSCOPE_INTEGRATED_LSM6DSO_TOOLTIP'] = IMG_X_NUCLEO_IKS01A3 + Blockly.Tooltip.SEP + 'Returns the angular speed following X, Y or Z (in rad/s).';
Blockly.Msg['SENSORS_MAGNETOSCOPE_INTEGRATED_LIS2MDL_TITLE'] = '[Magnetoscope LIS2MDL] magnetic field following %1 axis';
Blockly.Msg['SENSORS_MAGNETOSCOPE_INTEGRATED_LIS2MDL_TOOLTIP'] = IMG_X_NUCLEO_IKS01A3 + Blockly.Tooltip.SEP + 'تُرجع المجال المغناطيسي بعد X أو Y أو Z (gauss)';
Blockly.Msg['SENSORS_THERMOMETER_INTEGRATED_LPS22HH_TITLE'] = '[Thermometer LPS22HH] temperature';
Blockly.Msg['SENSORS_THERMOMETER_INTEGRATED_LPS22HH_TOOLTIP'] = IMG_X_NUCLEO_IKS01A3 + Blockly.Tooltip.SEP + 'Returns temperature (in °C).';
// Sensors - Gas
Blockly.Msg['SENSORS_SGP30_READDATA_TITLE'] = '[SGP30 Sensor] gas %1';
Blockly.Msg['SENSORS_SGP30_READDATA_TOOLTIP'] = IMG_MODULE_SGP30 + Blockly.Tooltip.SEP + 'Returns the amount of CO2 (in ppm) or TVOC (in ppb) in the air from sgp30 sensor. Connect sensor on I2C port.';
Blockly.Msg['SENSORS_SGP30_CO2'] = 'carbon dioxide (CO2) (ppm)';
Blockly.Msg['SENSORS_SGP30_TVOC'] = 'volatile organic compounds (TVOC) (ppb)';
Blockly.Msg['SENSORS_MULTICHANNEL_GETGAS_TITLE'] = '[Multichannel Gas Sensor] gas %1 (ppm)';
Blockly.Msg['SENSORS_MULTICHANNEL_GETGAS_TOOLTIP'] = IMG_MODULE_MULTICHANNEL + Blockly.Tooltip.SEP + 'Returns the amount of choosen gas in the air (in ppm) from grove multichannel gas sensor. Connect sensor on I2C port.';
Blockly.Msg['SENSORS_MULTICHANNELV2_GETGAS_TITLE'] = '[Multichannel Gas Sensor v2] gas %1 (V)';
Blockly.Msg['SENSORS_MULTICHANNELV2_GETGAS_TOOLTIP'] = IMG_MODULE_MULTICHANNEL_V2 + Blockly.Tooltip.SEP + 'Returns the amount of choosen gas in the air (in V) from grove multichannel gas V2 sensor. Connect sensor on I2C port.';
Blockly.Msg['GAS_CO'] = 'carbon monoxide (CO)';
Blockly.Msg['GAS_NO2'] = 'nitrogen dioxide (NO2)';
Blockly.Msg['GAS_C2H5OH'] = 'ethanol (C2H5OH)';
Blockly.Msg['GAS_H2'] = 'dihydrogen (H2)';
Blockly.Msg['GAS_NH3'] = 'ammonia (NH3)';
Blockly.Msg['GAS_CH4'] = 'methane (CH4)';
Blockly.Msg['GAS_C3H8'] = 'propane (C3H8)';
Blockly.Msg['GAS_C4H10'] = 'iso-propane (C4H10)';
Blockly.Msg['GAS_VOC'] = 'volatile organic compounds (VOC)';
Blockly.Msg['SENSORS_O2_GAS_READDATA_TITLE'] = '[Oxygen Gas Sensor] O2 (%) on pin %1';
Blockly.Msg['SENSORS_O2_GAS_READDATA_TOOLTIP'] = IMG_MODULE_O2 + Blockly.Tooltip.SEP + 'Returns O2 concentration (in %) from the grove O2 sensor on analog pins p34 through p36, or p39 (as A2 to A4 on shield Grove).';
Blockly.Msg['SENSORS_SCD30_READDATA_TITLE'] = '[SCD30 Sensor] %1';
Blockly.Msg['SENSORS_SCD30_READDATA_TOOLTIP'] = IMG_MODULE_SCD30 + Blockly.Tooltip.SEP + 'Returns CO2 concentration (in ppm), moisture (in %) or temperature in Celsius (°C), Fahrenheit (°F) or Kelvin (K) from the grove SCD30 sensor. Connect sensor on I2C port.';
Blockly.Msg['SENSORS_SCD30_CO2'] = 'carbon dioxide (CO2) (ppm)';
Blockly.Msg['SENSORS_SCD30_TEMP'] = 'temperature';
Blockly.Msg['SENSORS_SCD30_HUM'] = 'moisture (%)';
Blockly.Msg['SENSORS_SCD30_FORCED_CALIBRATION_TITLE'] = '[SCD30 Sensor] force recalibration to %1 (ppm)';
Blockly.Msg['SENSORS_SCD30_FORCED_CALIBRATION_TOOLTIP'] = IMG_MODULE_SCD30 + Blockly.Tooltip.SEP + 'Force the calibration of the SCD30 sensor to the given value (in ppm). Go outside (where the concentration is around approximately 420 ppm, i.e. clean air), reset the board, then wait 2 minutes. Tip: Use the SW1, SW2 or SW3 buttons on the STM32 NUCLEO board to control the start of the calibration. Otherwise, by reconnecting the board, the program launches and again performs an unrequested calibration.';
Blockly.Msg['SENSORS_AIR_QUALITY_GETVALUE_TITLE'] = '[Air Quality Sensor] value on pin %1';
Blockly.Msg['SENSORS_AIR_QUALITY_GETVALUE_TOOLTIP'] = IMG_MODULE_AIR_QUALITY + Blockly.Tooltip.SEP + 'Returns value of air quality (from 0 to 4095) on analog pins p34 through p36, or p39 (as A2 to A4 on shield Grove).';
Blockly.Msg['SENSORS_HM330X_GETPARTICULE_TITLE'] = '[HM330X Sensor] concentration of particle matter %1 (µg/m3)';
Blockly.Msg['SENSORS_HM330X_GETPARTICULE_TOOLTIP'] = IMG_MODULE_HM330X + Blockly.Tooltip.SEP + 'Detect the density of particles in the air with the HM330X sensor. Connect sensor on I2C port.';
Blockly.Msg['SENSORS_HM330X_ATM_PM1'] = 'PM1.0';
Blockly.Msg['SENSORS_HM330X_ATM_PM2_5'] = 'PM2.5';
Blockly.Msg['SENSORS_HM330X_ATM_PM10'] = 'PM10.0';
// Sensors - Climate
Blockly.Msg['SENSORS_TEMPERATURE'] = 'temperature';
Blockly.Msg['SENSORS_HUMIDITY'] = 'moisture (%)';
Blockly.Msg['SENSORS_TEMPERATURE_IN'] = 'in';
Blockly.Msg['SENSORS_BMP280_READDATA_TITLE'] = '[BMP280 Sensor %1] %2';
Blockly.Msg['SENSORS_BMP280_READDATA_TOOLTIP'] = IMG_MODULE_BMP280 + Blockly.Tooltip.SEP + 'Returns the ambient temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K), pressure (in Pa). The altitude is initialized at 0 when program is flashed. It use Grove Barometer Sensor (address: 0x77, color: blue) or HW-611 280 sensor (address: 0x76, color: purple). Connect sensor on I2C port.';
Blockly.Msg['SENSORS_BMP280_TEMP'] = 'temperature';
Blockly.Msg['SENSORS_BMP280_PRESS'] = 'pressure (Pa)';
Blockly.Msg['SENSORS_BMP280_ALT'] = 'altitude (m)';
Blockly.Msg['SENSORS_GETGROVEHIGHTEMP_TITLE'] = '[H.T° sensor] temperature in %1 on pins A0 %2 A1 %3';
Blockly.Msg['SENSORS_GETGROVEHIGHTEMP_TOOLTIP'] = IMG_MODULE_HIGH_TEMPERATURE + Blockly.Tooltip.SEP + 'Returns thermocouple temperature dorm 50 to 600 °C with grove high temperature sensor. Connect sensor on analog pins.';
Blockly.Msg['SENSORS_GETGROVEMOISTURE_TITLE'] = '[Moisture Sensor] moisture on pin %1';
Blockly.Msg['SENSORS_GETGROVEMOISTURE_TOOLTIP'] = IMG_MODULE_MOISTURE + Blockly.Tooltip.SEP + 'Returns moisture measurement (from 0 to 4095) from the grove moisture sensor on pins IO34, 35 , 36 and 39.';
Blockly.Msg['SENSORS_GETGROVETEMPERATURE_TITLE'] = '[Temperature Sensor] temperature in %1 on pin %2';
Blockly.Msg['SENSORS_GETGROVETEMPERATURE_TOOLTIP'] = IMG_MODULE_TEMPERATURE + Blockly.Tooltip.SEP + 'Returns grove temperature sensor value in Celius degree (°C), Fahrenheit (°F) or Kelvin (K) on analog pins p34 through p36, or p39 (as A2 to A4 on shield Grove).';
Blockly.Msg['SENSORS_DHT11_READDATA_TITLE'] = '[DHT11 Sensor] %1 on pin %2';
Blockly.Msg['SENSORS_DHT11_READDATA_TOOLTIP'] = IMG_MODULE_DHT11 + Blockly.Tooltip.SEP + 'Returns temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K), or air moisture (in %) from DHT11 sensor on digital pins.';
Blockly.Msg['SENSORS_DHT22_READDATA_TITLE'] = '[DHT22 Sensor] %1 on pin %2';
Blockly.Msg['SENSORS_DHT22_READDATA_TOOLTIP'] = IMG_MODULE_DHT22 + Blockly.Tooltip.SEP + 'Returns temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K), or air moisture (in %) with good accuracy from DHT22 sensor on digital pins.';
Blockly.Msg['SENSORS_TH02_READDATA_TITLE'] = '[TH02 Sensor] %1';
Blockly.Msg['SENSORS_TH02_READDATA_TOOLTIP'] = IMG_MODULE_TH02 + Blockly.Tooltip.SEP + 'Returns temperature in Celsius degree (°C), Fahrenheit (°F) or Kelvin (K), or air moisture (in %) from TH02 sensor. Connect sensor on I2C port.';
Blockly.Msg['SENSORS_SHT31_READDATA_TITLE'] = '[SHT31 Sensor] %1';
Blockly.Msg['SENSORS_SHT31_READDATA_TOOLTIP'] = IMG_MODULE_SHT31 + Blockly.Tooltip.SEP + 'Returns temperature in Celsius degree (°C), Fahrenheit (°F) or Kelvin (K), or air moisture (in %) from SHT31 sensor. Connect sensor on I2C port.';
Blockly.Msg['SENSORS_DS18B20_GETTEMPERATURE_TITLE'] = '[DS18X20 مستشعر] temperature in %1 on pin %2';
Blockly.Msg['SENSORS_DS18B20_GETTEMPERATURE_TOOLTIP'] = IMG_MODULE_DS18B20 + Blockly.Tooltip.SEP + 'Returns the temperature in degrees Celsius (°C), Fahrenheit (°F) or Kelvin (K) of the waterproof sensor DS18X20.';
Blockly.Msg['SENSORS_GETGROVEWATER_TITLE'] = '[Water Sensor] water amount on pin %1';
Blockly.Msg['SENSORS_GETGROVEWATER_TOOLTIP'] = IMG_MODULE_WATER + Blockly.Tooltip.SEP + 'Returns water amount (from 0 to 255) from the grove water sensor on analog pins p34 through p36, or p39 (as A2 to A4 on shield Grove)..';
Blockly.Msg['SENSORS_GETRAINGAUGE_TITLE'] = '[Rain Gauge sensor] state value on pin %1';
Blockly.Msg['SENSORS_GETRAINGAUGE_TOOLTIP'] = IMG_MODULE_RAIN_GAUGE + Blockly.Tooltip.SEP + 'Returns rain gauge grove state (1 if it\'s raining or 0 else) on digital pins.';
Blockly.Msg['SENSORS_GETANEMOMETER_TITLE'] = '[Anemometer] state value on pin %1';
Blockly.Msg['SENSORS_GETANEMOMETER_TOOLTIP'] = IMG_MODULE_ANEMOMETER + Blockly.Tooltip.SEP + 'Returns grove anemometer state (twice state HIGH on each rotation) on digital pins.';
// Sensors - Sound & Light
Blockly.Msg['SENSORS_GETGROVELIGHT_TITLE'] = '[Light Sensor] light level on pin %1';
Blockly.Msg['SENSORS_GETGROVELIGHT_TOOLTIP'] = IMG_MODULE_LIGHT + Blockly.Tooltip.SEP + 'Returns grove light sensor value (from 0 to 4095) on analog pins p34 through p36, or p39 (as A2 to A4 on shield Grove).';
Blockly.Msg['SENSORS_SI1145_GETLIGHT_TITLE'] = '[SI1145 Sensor] get light %1';
Blockly.Msg['SENSORS_SI1145_GETLIGHT_TOOLTIP'] = IMG_MODULE_SI1145 + Blockly.Tooltip.SEP + 'Returns Ultraviolet light index, IR light (in lumen) or Visible light (in lumen) from si1145 sensor. It works with Grove Sunlight Sensor or GY1145 sensor. Connect sensor on I2C port.';
Blockly.Msg['SENSORS_SI1145_UV'] = 'UV index';
Blockly.Msg['SENSORS_SI1145_VISIBLE'] = 'visible (lumen)';
Blockly.Msg['SENSORS_SI1145_IR'] = 'infrared (lumen)';
Blockly.Msg['SENSORS_GETUVINDEX_TITLE'] = '[Ultraviolet Sensor] UV index on pin %1';
Blockly.Msg['SENSORS_GETUVINDEX_TOOLTIP'] = IMG_MODULE_UV + Blockly.Tooltip.SEP + 'Returns UV index, for waves between 240 nm and 380 nm, with UV grove sensor on analog pins p34 through p36, or p39 (as A2 to A4 on shield Grove)..';
Blockly.Msg['SENSORS_GETGROVESOUND_TITLE'] = '[Sound Sensor] sound level (dB) on pin %1 ';
Blockly.Msg['SENSORS_GETGROVESOUND_TOOLTIP'] = IMG_MODULE_SOUND_LOUDNESS + Blockly.Tooltip.SEP + 'Returns grove sound sensor value (from 0 to 1023 converted in dB) on analog pins p34 through p36, or p39 (as A2 to A4 on shield Grove)..';
Blockly.Msg['SENSORS_GROVECOLOR_GETDATA_TITLE'] = '[Color Sensor] %1';
Blockly.Msg['SENSORS_GROVECOLOR_GETDATA_TOOLTIP'] = IMG_MODULE_I2C_COLOR + Blockly.Tooltip.SEP + 'Lets you read the level of one of the three primary colors with the Grove color sensor, returns a level between 0 and 255.';
// Sensors - Distance & Motion
Blockly.Msg['SENSORS_GETGROVEULTRASONIC_TITLE'] = '[Ultrasonic Sensor %1] get %2';
Blockly.Msg['SENSORS_GETGROVEULTRASONIC_TOOLTIP'] = IMG_MODULE_ULTRASONIC + Blockly.Tooltip.SEP + 'Returns distance measurement (in centimeters) from the ultrasonic ranger sensor on digital pins. Warning, if it\'s a grove sensor, TRIG and ECHO are both connected to SIG.';
Blockly.Msg['SENSORS_ULTRASONIC_DISTANCE'] = 'distance (cm)';
Blockly.Msg['SENSORS_ULTRASONIC_DURATION'] = 'round-trip duration (µs)';
Blockly.Msg['SENSORS_GETGESTURE_TITLE'] = '[Gesture Sensor] gesture type';
Blockly.Msg['SENSORS_GETGESTURE_TOOLTIP'] = IMG_MODULE_GESTURE + Blockly.Tooltip.SEP + 'Returns the gesture type (\'right\', \'left\', \'up\', \'down\', \'forward\', \'backward\', \'clockwise\', \'anticlockwise\') from grove gesture sensor. Connect sensor on I2C port.';
Blockly.Msg['SENSORS_ONGESTUREDETECTED_TITLE'] = '[Gesture Sensor] on gesture %1 detected then';
Blockly.Msg['SENSORS_ONGESTUREDETECTED_TOOLTIP'] = IMG_MODULE_GESTURE + Blockly.Tooltip.SEP + 'Execute instructions if selected gesture id detected by the grove gesture sensor. Connect sensor on I2C port.';
Blockly.Msg['SENSORS_GESTURE_RIGHT'] = 'right';
Blockly.Msg['SENSORS_GESTURE_LEFT'] = 'left';
Blockly.Msg['SENSORS_GESTURE_UP'] = 'up';
Blockly.Msg['SENSORS_GESTURE_DOWN'] = 'down';
Blockly.Msg['SENSORS_GESTURE_FORWARD'] = 'forward';
Blockly.Msg['SENSORS_GESTURE_BACKWARD'] = 'backward';
Blockly.Msg['SENSORS_GESTURE_CLOCKWISE'] = 'clockwise';
Blockly.Msg['SENSORS_GESTURE_ANTICLOCKWISE'] = 'anticlockwise';
Blockly.Msg['SENSORS_GESTURE_WAVE'] = 'wave';
Blockly.Msg['SENSORS_GETGROVELINEFINDER_TITLE'] = '[Line Finder Sensor] line finder state on pin %1';
Blockly.Msg['SENSORS_GETGROVELINEFINDER_TOOLTIP'] = IMG_MODULE_LINE_FINDER + Blockly.Tooltip.SEP + 'Returns grove touch sensor state (0 or 1) on digital pins.';
Blockly.Msg['SENSORS_GETGROVEMOTION_TITLE'] = '[PIR Motion Sensor] movement state value on pin %1';
Blockly.Msg['SENSORS_GETGROVEMOTION_TOOLTIP'] = IMG_MODULE_MOTION + Blockly.Tooltip.SEP + 'Returns grove PIR Motion state (0 if there is movement or 1 else) on digital pins.';
Blockly.Msg['SENSORS_GETPIEZOVIBRATION_TITLE'] = '[Piezo Vibration Sensor] state value on pin %1';
Blockly.Msg['SENSORS_GETPIEZOVIBRATION_TOOLTIP'] = IMG_MODULE_VIBRATIONS + Blockly.Tooltip.SEP + 'Returns vibration state (0 or 1) from piezo vibration grove sensor on digital pins.';
Blockly.Msg['SENSORS_GETGROVETILT_TITLE'] = '[Tilt Module] tilt state on pin %1';
Blockly.Msg['SENSORS_GETGROVETILT_TOOLTIP'] = IMG_MODULE_TILT + Blockly.Tooltip.SEP + 'Returns grove tilt state (0 or 1) on digital pins.';
Blockly.Msg['SENSORS_VL53L0X_GETRANGEMILLIMETERS_TITLE'] = '[Time Of Flight] Distance value in %1';
Blockly.Msg['SENSORS_VL53L0X_GETRANGEMILLIMETERS_TOOLTIP'] = IMG_MODULE_VL53L0X + Blockly.Tooltip.SEP + 'Returns distance measurements from the TOF sensor on I2C port.';
Blockly.Msg['SENSORS_GETGROVEBUTTON_TITLE'] = '[Button Module] button %1 on pin %2';
Blockly.Msg['SENSORS_GETGROVEBUTTON_TOOLTIP'] = IMG_MODULE_BUTTON + Blockly.Tooltip.SEP + 'Returns numeric value of grove button (0/1 or 0V/3.3V) on digital pins.';
Blockly.Msg['SENSORS_GETGROVEBUTTON_VOLTAGE'] = 'voltage';
Blockly.Msg['SENSORS_GETGROVEBUTTON_STATE'] = 'state';
// Actuators - Motors
Blockly.Msg['ACTUATORS_SERVO_SETANGLE_TITLE'] = '[Servomotor] set angle to %1 on pin %2';
Blockly.Msg['ACTUATORS_SERVO_SETANGLE_TOOLTIP'] = IMG_MODULE_SERVO + Blockly.Tooltip.SEP + 'Enable to control servo angle (from 0 to 180) on digital pins. Warning, STM32 has to be powered by external batterie in order to provide enough energy to servomotor.';
Blockly.Msg['ACTUATORS_CONTINUOUS_SERVO_SETSPEED_TITLE'] = '[Continuous Servomotor] set speed to %1 (%) direction %2 on pin %3';
Blockly.Msg['ACTUATORS_CONTINUOUS_SERVO_SETSPEED_TOOLTIP'] = IMG_MODULE_CONTINUOUS_SERVO + Blockly.Tooltip.SEP + 'Enable to control continuous servo speed (from 0 to 100 %) on PWM pins.';
Blockly.Msg['ACTUATORS_MOTOR_SETPOWER_TITLE'] = '[Motor] set power to %1 on pin %2';
Blockly.Msg['ACTUATORS_MOTOR_SETPOWER_TOOLTIP'] = IMG_MODULE_MOTOR + Blockly.Tooltip.SEP + 'Enable to control DC motor power (from 0 to 100 %) on digital pins. Warning, STM32 has to be powered by external batterie in order to provide enough energy to DC motor.';
Blockly.Msg['ACTUATORS_GROVEVIBRATIONMOTOR_CONTROL_TITLE'] = '[Vibration motor] control motor to state %1 on pin %2';
Blockly.Msg['ACTUATORS_GROVEVIBRATIONMOTOR_CONTROL_TOOLTIP'] = IMG_MODULE_VIBRATION_MOTOR + Blockly.Tooltip.SEP + 'Enable to control state of grove vibration motor (0 or 1) on digital pins.';
Blockly.Msg['ACTUATORS_GROVERELAY_CONTROL_TITLE'] = '[Relay module] control relay to state %1 on pin %2';
Blockly.Msg['ACTUATORS_GROVERELAY_CONTROL_TOOLTIP'] = IMG_MODULE_RELAY + Blockly.Tooltip.SEP + 'Enable to control state grove relay module (0 or 1) on digital pins.';
// Actuators - MOSFET
Blockly.Msg['ACTUATORS_MOSFET_SETSTATE_TITLE'] = '[MOSFET] set state to %1 on pin %2';
Blockly.Msg['ACTUATORS_MOSFET_SETSTATE_TOOLTIP'] = IMG_MODULE_MOSFET + Blockly.Tooltip.SEP + 'Enable to set the state of MOSFET transistor to HIGH or LOW on the PWM pins.';
Blockly.Msg['ACTUATORS_MOSFET_SETPERCENTVALUE_TITLE'] = '[MOSFET] set value to %1 (%) on pin %2';
Blockly.Msg['ACTUATORS_MOSFET_SETPERCENTVALUE_TOOLTIP'] = IMG_MODULE_MOSFET + Blockly.Tooltip.SEP + 'Enable to control the MOSFET transistor cycle time (from 0 to 100 %) on PWM pins.';
Blockly.Msg['ACTUATORS_MOSFET_SETFREQUENCY_TITLE'] = '[MOSFET] set cycle frequency to %1 (Hz) on pin %2';
Blockly.Msg['ACTUATORS_MOSFET_SETFREQUENCY_TOOLTIP'] = IMG_MODULE_MOSFET + Blockly.Tooltip.SEP + 'Enable to control MOSFET cycle frequency (in Hz) on PWM pins.';
Blockly.Msg['ACTUATORS_MOSFET_PULL'] = 'pull';
// Actuators - Music
Blockly.Msg['ACTUATORS_MUSIC_PLAYMUSIC_TITLE'] = '[Buzzer/Speaker] play music %1 on %2';
Blockly.Msg['ACTUATORS_MUSIC_PLAYMUSIC_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Enable to play the choosen music on Grove buzzer module (or speaker) on digital pins.';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_NOTES_TITLE'] = '[Buzzer/Speaker] play notes on';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_NOTES_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Enable to play notes on Grove buzzer module (or speaker) on digital pins.';
Blockly.Msg['ACTUATORS_MUSIC_NOTE_TITLE'] = 'note %1 at octave %2 with duration %3';
Blockly.Msg['ACTUATORS_MUSIC_NOTE_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Define a note with octave and duration.';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_FREQUENCY_TITLE'] = '[Buzzer/Speaker] play frequency %1 during %2 (ms) on %3';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_FREQUENCY_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Enable to play integer frequency on Grove buzzer module (or speaker) on digital pins.';
Blockly.Msg['ACTUATORS_MUSIC_STOP_TITLE'] = '[Buzzer/Speaker] stop music on %1';
Blockly.Msg['ACTUATORS_MUSIC_STOP_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Enable to stop music from Grove buzzer module (or speaker) on digital pins.';
// Robots - Alphabot
Blockly.Msg['ROBOTS_ALPHABOT_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_ALPHABOT_LEFT'] = 'left';
Blockly.Msg['ROBOTS_ALPHABOT_ULTRASONICRANGER_TITLE'] = '[Alphabot - Ultrasonic sensor] distance (cm)';
Blockly.Msg['ROBOTS_ALPHABOT_ULTRASONICRANGER_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Returns distance value (in cm) or the round-trip duration of wave (in μs) from any object to alphabot robot with ultrasonic range sensor.';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_CALIBRATE_TITLE'] = '[Alphabot] calibrate line finder';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_CALIBRATE_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to calibrate the line finder of alphabot robot.';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_READSENSORS_TITLE'] = '[Alphabot] sensor values of line finder %1';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_READSENSORS_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to read values of line finder sensors from around 0-500 (black) to 500-1000 (white) with a normal calibartion of alphabot v2 robot. The option \'all\' of block allows you to get array of 5 sensor values.';
Blockly.Msg['ROBOTS_ALPHABOT_ALL_SENSORS'] = 'all sensors';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_GETSENSORABOVELINE_TITLE'] = '[Alphabot] sensor above line';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_GETSENSORABOVELINE_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to return the name of sensor above line. (IR1/IR2/IR3/IR4/IR5 from left to right)';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_ISSENSORABOVELINE_TITLE'] = '[Alphabot] is sensor %1 above line';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_ISSENSORABOVELINE_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to return True if selected sensor is above line, else return False. (IR1/IR2/IR3/IR4/IR5 from left to right)';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_LIMIT_VALUE'] = 'limit value';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_ONABOVEANYSENSOR_TITLE'] = '[Alphabot] if sensor %1';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_ONABOVEANYSENSOR_SENSOR_THEN'] = 'above line then';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_ONABOVEANYSENSOR_ELSEIF'] = 'else if its sensor';
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_ONABOVEANYSENSOR_THEN'] = Blockly.Msg['CONTROLS_IF_MSG_THEN'];
Blockly.Msg['ROBOTS_ALPHABOT_LINEFINDER_ONABOVEANYSENSOR_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Allows you to execute instructions by switching on IR sensors of alphabot robot.';
Blockly.Msg['ROBOTS_ALPHABOT_READOBSTACLEDETECTOR_TITLE'] = '[Alphabot - IR front sensors] obstacle detected by IR';
Blockly.Msg['ROBOTS_ALPHABOT_READOBSTACLEDETECTOR_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to read state of obstacle detectors (IR sensors on LEDL & LEDR) of alphabot robot. The block returns True if the sensor is in front of obstacle.';
Blockly.Msg['ROBOTS_ALPHABOT_ONOBSTACLEDETECTED_TITLE'] = '[Alphabot - IR front sensors] if obstacle %1';
Blockly.Msg['ROBOTS_ALPHABOT_ONOBSTACLEDETECTED_BY_IR_THEN'] = 'detected by IR then';
Blockly.Msg['ROBOTS_ALPHABOT_ONOBSTACLEDETECTED_ELSEIF'] = 'else if';
Blockly.Msg['ROBOTS_ALPHABOT_ONOBSTACLEDETECTED_THEN'] = 'detected then';
Blockly.Msg['ROBOTS_ALPHABOT_ONOBSTACLEDETECTED_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Allows you to execute instructions on obstacle detected by the obstacle detectors (IR sensors on LEDL & LEDR) of alphabot robot.';
Blockly.Msg['ROBOTS_ALPHABOT_BY_RIGHT'] = 'by the right (LEDR)';
Blockly.Msg['ROBOTS_ALPHABOT_BY_LEFT'] = 'by the left (LEDL)';
Blockly.Msg['ROBOTS_ALPHABOT_BOTH_SIDES'] = 'by both sides (LEDR & LEDL)';
Blockly.Msg['ROBOTS_ALPHABOT_GO_TITLE'] = '[Alphabot] control robot %1 speed %2 (%)';
Blockly.Msg['ROBOTS_ALPHABOT_GO_FORWARD'] = 'forward';
Blockly.Msg['ROBOTS_ALPHABOT_GO_REVERSE'] = 'backward';
Blockly.Msg['ROBOTS_ALPHABOT_GO_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to control car running (FORWARD/BACKWARD) and speed (from 0 to 100 %) of alphabot robot.';
Blockly.Msg['ROBOTS_ALPHABOT_TURNTO_TITLE'] = '[Alphabot] turn to %1 speed %2';
Blockly.Msg['ROBOTS_ALPHABOT_TURNTO_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to turn to the right or to the left with alphabot robot. Set speed (from 0 to 100 %).';
Blockly.Msg['ROBOTS_ALPHABOT_RIGHT_BIS'] = Blockly.Msg['ROBOTS_ALPHABOT_RIGHT'];
Blockly.Msg['ROBOTS_ALPHABOT_CONTROLMOTOR_TITLE'] = '[Alphabot] control motor %1 direction %2 speed %3 (%)';
Blockly.Msg['ROBOTS_ALPHABOT_CONTROLMOTOR_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to control right motor and left motor changing direction (↻ : FOWARD, ↺ : REVERSE) or speed (from 0 to 100 %) of alphabot robot.';
Blockly.Msg['ROBOTS_ALPHABOT_STOPMOTORS_TITLE'] = '[Alphabot] stop motor %1';
Blockly.Msg['ROBOTS_ALPHABOT_STOPMOTORS_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to stop right, left or both motors of alphabot robot.';
Blockly.Msg['ROBOTS_ALPHABOT_RIGHT&LEFT'] = 'right & left';
Blockly.Msg['ROBOTS_ALPHABOT_REMOTECONTROL_ONCOMMANDRECEIVED_TITLE'] = '[Alphabot] if command %1';
Blockly.Msg['ROBOTS_ALPHABOT_REMOTECONTROL_ONCOMMANDRECEIVED_RECEIVED_THEN'] = 'received then';
Blockly.Msg['ROBOTS_ALPHABOT_REMOTECONTROL_ONCOMMANDRECEIVED_DETECTED_THEN'] = 'received by NEC basic black remote control then';
Blockly.Msg['ROBOTS_ALPHABOT_REMOTECONTROL_ONCOMMANDRECEIVED_TOOLTIP'] = IMG_MODULE_BASIC_BLACK_REMOTE_IR_RECEIVER + Blockly.Tooltip.SEP + 'Allows you to execute instructions on command received by IR transmission from NEC basic black remote control.';
Blockly.Msg['ROBOTS_ALPHABOT_REMOTECONTROL_ONCOMMANDRECEIVED_CAR_MP3_GRAY_DETECTED_THEN'] = 'received by NEC <br>Car mp3 gray remote control<br> then';
Blockly.Msg['ROBOTS_ALPHABOT_REMOTECONTROL_ONCOMMANDRECEIVED_CAR_MP3_GRAY_TOOLTIP'] = IMG_MODULE_CAR_MP3_GRAY_REMOTE_IR_RECEIVER + Blockly.Tooltip.SEP + 'Allows you to execute instructions on command received by IR transmission from NEC Car mp3 gray remote control.';
Blockly.Msg['REMOTE_NEC_BUTTON'] = 'pad ';
Blockly.Msg['REMOTE_NEC_BUTTON_UP'] = 'up';
Blockly.Msg['REMOTE_NEC_BUTTON_DOWN'] = 'down';
Blockly.Msg['REMOTE_NEC_BUTTON_LEFT'] = 'left';
Blockly.Msg['REMOTE_NEC_BUTTON_RIGHT'] = 'right';
Blockly.Msg['REMOTE_NEC_BUTTON_BACK'] = 'back';
Blockly.Msg['ROBOTS_ALPHABOT_OLED_ADDTEXT_TITLE'] = '[Alphabot] show text %1 on screen at position x %2 y %3';
Blockly.Msg['ROBOTS_ALPHABOT_OLED_ADDTEXT_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable write text on OLED display (128x64 px).';
Blockly.Msg['ROBOTS_ALPHABOT_OLED_SETBACKGROUND_TITLE'] = '[Alphabot] set screen background to %1';
Blockly.Msg['ROBOTS_ALPHABOT_OLED_SETBACKGROUND_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to invert the Grove OLED display.';
Blockly.Msg['ROBOTS_ALPHABOT_OLED_YELLOW_BLUE'] = 'yellow & blue';
Blockly.Msg['ROBOTS_ALPHABOT_OLED_BLACK'] = 'black';
Blockly.Msg['ROBOTS_ALPHABOT_OLED_CLEARSCREEN_TITLE'] = '[Alphabot] clear screen';
Blockly.Msg['ROBOTS_ALPHABOT_OLED_CLEARSCREEN_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to clear the entire Grove OLED screen.';
Blockly.Msg['ROBOTS_ALPHABOT_NEOPIXEL_SETCOLOR_TITLE'] = '[Alphabot] set color R %2 G %3 B %4 on LED %1';
Blockly.Msg['ROBOTS_ALPHABOT_NEOPIXEL_SETCOLOR_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to control each LED color of alphabot neopixel as (R,G,B) from 0 to 255. Neopixel is connected on D7 on alphabot.';
Blockly.Msg['ROBOTS_ALPHABOT_NEOPIXEL_SETPALETTECOLOR_TITLE'] = '[Alphabot] set color %2 on LED %1';
Blockly.Msg['ROBOTS_ALPHABOT_NEOPIXEL_SETPALETTECOLOR_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to control each LED color of alphabot neopixel. Choice color in the palette. Use D7 to set alphabot neopixel.';
Blockly.Msg['ROBOTS_ALPHABOT_NEOPIXEL_SETRAINBOW_TITLE'] = '[Alphabot] Rainbow';
Blockly.Msg['ROBOTS_ALPHABOT_NEOPIXEL_SETRAINBOW_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to show a rainbow on alphabot RGB LED. Neopixel is connected to D7 on alphabot.';
Blockly.Msg['ROBOTS_ALPHABOT_BUZZER_CONTROLSTATE_TITLE'] = '[Alphabot] set buzzer to state %1';
Blockly.Msg['ROBOTS_ALPHABOT_BUZZER_CONTROLSTATE_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Enable to control alphabot buzzer state.';
Blockly.Msg['ROBOTS_ALPHABOT_JOYSTICK_ONCOMMANDRECEIVED_TITLE'] = '[Alphabot] if button %1';
Blockly.Msg['ROBOTS_ALPHABOT_JOYSTICK_ONCOMMANDRECEIVED_DETECTED_THEN'] = 'pressed on joystick then';
Blockly.Msg['ROBOTS_ALPHABOT_JOYSTICK_ONCOMMANDRECEIVED_ELSEIF'] = 'else if button';
Blockly.Msg['ROBOTS_ALPHABOT_JOYSTICK_ONCOMMANDRECEIVED_RECEIVED_THEN'] = 'pressed then';
Blockly.Msg['ROBOTS_ALPHABOT_JOYSTICK_ONCOMMANDRECEIVED_TOOLTIP'] = IMG_MODULE_ALPHABOT + Blockly.Tooltip.SEP + 'Allows you to execute instructions on command received by the joystick of alphabot robot.';
Blockly.Msg['JOYSTICK_BUTTON_UP'] = 'up';
Blockly.Msg['JOYSTICK_BUTTON_DOWN'] = 'down';
Blockly.Msg['JOYSTICK_BUTTON_LEFT'] = 'left';
Blockly.Msg['JOYSTICK_BUTTON_RIGHT'] = 'right';
Blockly.Msg['JOYSTICK_BUTTON_CENTER'] = 'center';