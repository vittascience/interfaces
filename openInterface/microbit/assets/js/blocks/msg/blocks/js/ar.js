/**
 * @fileoverview Arabic messages for Micro:bit. (AR)
 */
'use strict';

// Display - Micro:bit 
Blockly.Msg['SHOW_LEDS_TITLE'] = 'show leds';
Blockly.Msg['SHOW_LEDS_TOOLTIP'] = 'Displays personalized image on the micro:bit board screen';
Blockly.Msg['SHOW_STRING_TITLE'] = 'scroll %1';
Blockly.Msg['SHOW_STRING_TOOLTIP'] = 'Scroll through a string on the micro:bit board screen';
Blockly.Msg['DISPLAY_SHOW_STRING_DELAY'] = 'delay (ms)';
Blockly.Msg['SHOW_NUMBER_TITLE'] = 'show %1';
Blockly.Msg['SHOW_NUMBER_TOOLTIP'] = 'Displays one by one figures on the micro:bit board screen';
Blockly.Msg['SHOW_ICON_TITLE'] = 'show icon %1';
Blockly.Msg['SHOW_ICON_TOOLTIP'] = 'Displays the selected icon on the micro:bit board screen';
Blockly.Msg['SHOW_ICON_SIMPLE_TITLE'] = 'show icon %1';
Blockly.Msg['SHOW_ICON_SIMPLE_TOOLTIP'] = 'Displays the selected icon on the micro:bit board screen';
Blockly.Msg['SHOW_GAUGE_TITLE'] = 'show gauge of %1 Maximum %2';
Blockly.Msg['SHOW_GAUGE_TOOLTIP'] = 'Display the dipstick of a sensor (or number) on the micro:bit board screen by setting the maximum value corresponding to the filled dipstick.';
Blockly.Msg['PLOT_BAR_GRAPH_TITLE'] = 'رسم مخطط لـ %1';
Blockly.Msg['PLOT_BAR_GRAPH_TOOLTIP'] = 'يعرض رسمًا بيانيًا عموديًا للأعمدة بناءً على القيم "value" و "high". إذا كانت "high" تساوي 0، يتم ضبط الرسم البياني تلقائيًا';
Blockly.Msg['PLOT_BAR_GRAPH_TO'] = 'إلى';
Blockly.Msg['SET_PIXEL_TITLE'] = 'control led x %1 y %2 to state %3';
Blockly.Msg['SET_PIXEL_TOOLTIP'] = 'Enable to control the state (ON/OFF) of each micro:bit screen LED.';
Blockly.Msg['GET_PIXEL_STATE_TITLE'] = 'حالة LED عند x %1 y %2';
Blockly.Msg['GET_PIXEL_STATE_TOOLTIP'] = 'يتيح التحقق من حالة (تشغيل/إيقاف) كل LED على شاشة لوحة micro:bit.';
Blockly.Msg['TOGGLE_PIXEL_STATE_TITLE'] = 'تبديل حالة LED عند x %1 y %2';
Blockly.Msg['TOGGLE_PIXEL_STATE_TOOLTIP'] = 'يتيح تبديل حالة (تشغيل/إيقاف) كل LED على شاشة لوحة micro:bit.';
Blockly.Msg['SET_LIGHT_PIXEL_TITLE'] = 'control led x %1 y %2 light %3';
Blockly.Msg['SET_LIGHT_PIXEL_TOOLTIP'] = 'Enable to control the light (from 0 to 9) of each micro:bit screen LED.';
Blockly.Msg['SET_BRIGHTNESS_TITLE'] = 'ضبط السطوع %1';
Blockly.Msg['SET_BRIGHTNESS_TOOLTIP'] = 'يتيح لك اختيار درجة السطوع (من 0 إلى 9) لشاشة LED في لوحة micro:bit.';
Blockly.Msg['SHOW_CLOCK_TITLE'] = 'show clock %1';
Blockly.Msg['SHOW_CLOCK_TOOLTIP'] = 'Displays the hour hand of a clock on the micro:bit board screen';
Blockly.Msg['SHOW_ARROW_TITLE'] = 'show arrow %1';
Blockly.Msg['SHOW_ARROW_TOOLTIP'] = 'Enable to display arrows of 8 directions (N,NE,E,SE,S...) on micro:bit screen.';
Blockly.Msg['CLEAR_TITLE'] = 'clear screen';
Blockly.Msg['CLEAR_TOOLTIP'] = 'Clear the micro:bit board screen';
// Display - Screen
Blockly.Msg['DISPLAY_LCD_SETTEXT_TITLE'] = '[LCD] show text %1 on line %2 position %3';
Blockly.Msg['DISPLAY_LCD_SETTEXT_TOOLTIP'] = IMG_MODULE_LCD_3V3 + Blockly.Tooltip.SEP + 'Show text on the grove lcd 1602 display. Connect lcd on I2C port.';
Blockly.Msg['DISPLAY_LCD_CLEAR_TITLE'] = '[LCD] clear display';
Blockly.Msg['DISPLAY_LCD_CLEAR_TOOLTIP'] = IMG_MODULE_LCD_3V3 + Blockly.Tooltip.SEP + 'Enable to clear the entire lcd text. Connect lcd on I2C port.';
Blockly.Msg['DISPLAY_OLED_ADDTEXT_TITLE'] = '[OLED display] show text %1 at position x %2 y %3';
Blockly.Msg['DISPLAY_OLED_ADDTEXT_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable write text on OLED display. Connect the OLED display on I2C port.';
Blockly.Msg['DISPLAY_OLED_SETPIXEL_TITLE'] = '[OLED display] control pixel x %1 y %2 to state %3';
Blockly.Msg['DISPLAY_OLED_SETPIXEL_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to control each OLED display pixel. Connect the OLED display on I2C port.';
Blockly.Msg['DISPLAY_OLED_CLEARSCREEN_TITLE'] = '[OLED display] clear screen';
Blockly.Msg['DISPLAY_OLED_CLEARSCREEN_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to clear the entire grove oled screen. Connect the OLED display on I2C port.';
Blockly.Msg['DISPLAY_OLED_DRAWICON_TITLE'] = '[OLED display] show icon %1 on x %2 y %3 to state %4';
Blockly.Msg['DISPLAY_OLED_DRAWICON_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable show micro:bit icon from Image library. Connect the OLED display on I2C port.';
// Display - LED modules
Blockly.Msg['DISPLAY_SETGROVELED_TITLE'] = '[LED] control LED to state %1 on pin %2';
Blockly.Msg['DISPLAY_SETGROVELED_TOOLTIP'] = IMG_MODULE_LED + Blockly.Tooltip.SEP + 'Enable to switch on or switch off the LED socket kit Grove (0 or 1) on digitals pins P0 up through P20.';
Blockly.Msg['DISPLAY_SETLEDINTENSITY_TITLE'] = '[LED] set LED intensity to %1 on pin %2';
Blockly.Msg['DISPLAY_SETLEDINTENSITY_TOOLTIP'] = IMG_MODULE_LED_PWM + Blockly.Tooltip.SEP + 'Enable to set the LED intensity from 0 to 255 on PWM pins.';
Blockly.Msg['DISPLAY_SET_VARIABLE_COLOR_LED_TITLE'] = '[Variable Color LED] set intensity to %1 (%) on pin %2';
Blockly.Msg['DISPLAY_SET_VARIABLE_COLOR_LED_TOOLTIP'] = IMG_MODULE_LED_VARIABLE_COLOR + Blockly.Tooltip.SEP + 'Enable to set the LED intensity from 0 to 100 (%) on PWM pins. When using the module for the first time, RGB are set to 0. Use a screwdriver on R, G or B behind module to control LED color.';
Blockly.Msg['DISPLAY_NEOPIXEL_DEFINE_TITLE'] = '[Neopixel] define %1 LED on pin %2';
Blockly.Msg['DISPLAY_NEOPIXEL_DEFINE_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to define LED number of neopixel. This block have to be used in setup.';
Blockly.Msg['DISPLAY_NEOPIXEL_LEDCONTROL_TITLE'] = '[Neopixel] set LED %1 to R %2 G %3 B %4 on pin %5';
Blockly.Msg['DISPLAY_NEOPIXEL_LEDCONTROL_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control each LED color of neopixels as (R,G,B) from 0 to 255. Use P15 to set Maqueen neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_SETPALETTECOLOR_TITLE'] = '[Neopixel] set LED %1 to %2 on pin %3';
Blockly.Msg['DISPLAY_NEOPIXEL_SETPALETTECOLOR_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control each LED color of neopixel. Use P15 to set Maqueen neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDRGB_TITLE'] = '[Neopixel] set all LED to colour R %1 G %2 B %3 on pin %4';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDRGB_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control all LED of neopixel to the choosed colour value as (R,G,B) from 0 to 255. Use P15 to set Maqueen neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDCOLOR_TITLE'] = '[Neopixel] set all LED to colour %1 on pin %2';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDCOLOR_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control all LED of neopixel to the choosed colour value. Use P15 to set Maqueen neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_RAINBOW_TITLE'] = '[Neopixel] set a rainbow on pin %1';
Blockly.Msg['DISPLAY_NEOPIXEL_RAINBOW_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to show a rainbow on neopixel module, set pin and the number of LED.';
Blockly.Msg['DISPLAY_ZIP_HALO_LED_LEDCONTROL_TITLE'] = '[ZIP Halo HD] التحكم في LED %1 باللون R %2 G %3 B %4';
Blockly.Msg['DISPLAY_ZIP_HALO_LED_LEDCONTROL_TOOLTIP'] = 'يتيح التحكم في لون كل LED مثل (R,G,B) من 0 إلى 255 على وحدة Kitronik Zip Halo LED.';
Blockly.Msg['DISPLAY_ZIP_HALO_LED_SETPALETTECOLOR_TITLE'] = '[ZIP Halo HD] التحكم في LED %1 باللون %2';
Blockly.Msg['DISPLAY_ZIP_HALO_LED_SETPALETTECOLOR_TOOLTIP'] = 'يتيح التحكم في لون كل LED على وحدة Kitronik Zip Halo LED. استخدم لوحة الألوان لتغيير اللون.';
Blockly.Msg['DISPLAY_ZIP_HALO_LED_SETALLLEDRGB_TITLE'] = '[ZIP Halo HD] التحكم في جميع LED باللون R %1 G %2 B %3';
Blockly.Msg['DISPLAY_ZIP_HALO_LED_SETALLLEDRGB_TOOLTIP'] = 'يتيح التحكم في جميع LED على وحدة Kitronik Zip Halo LED باللون المختار مثل (R,G,B) من 0 إلى 255.';
Blockly.Msg['DISPLAY_ZIP_HALO_LED_SETALLLEDCOLOR_TITLE'] = '[ZIP Halo HD] التحكم في جميع LED باللون %1';
Blockly.Msg['DISPLAY_ZIP_HALO_LED_SETALLLEDCOLOR_TOOLTIP'] = 'يتيح التحكم في جميع LED على وحدة Kitronik Zip Halo LED باللون المختار. استخدم لوحة الألوان لتغيير اللون.';
Blockly.Msg['DISPLAY_ZIP_HALO_LED_RAINBOW_TITLE'] = '[ZIP Halo HD] قوس قزح';
Blockly.Msg['DISPLAY_ZIP_HALO_LED_RAINBOW_TOOLTIP'] = 'يعرض طيف الألوان على LED RGB لوحدة Kitronik Zip Halo LED.';
Blockly.Msg['DISPLAY_4DIGIT_SETNUMBER_TITLE'] = '[4-Digit module] show %1 %2 on pins CLK %3 DIO %4';
Blockly.Msg['DISPLAY_4DIGIT_SETNUMBER_TOOLTIP'] = IMG_MODULE_4DIGITDISPLAY + Blockly.Tooltip.SEP + 'Enable to show numbers or temperature on grove 4-digit display (TM1637) on digital pins from P0 to P20.';
Blockly.Msg['DISPLAY_4DIGIT_SETCLOCK_TITLE'] = '[4-Digit module] show clock on pins CLK %1 DIO %2';
Blockly.Msg['DISPLAY_4DIGIT_SETCLOCK_TOOLTIP'] = IMG_MODULE_4DIGITDISPLAY + Blockly.Tooltip.SEP + 'Enable to show clock on grove 4-digit display (TM1637) on digital pins from P0 to P20. Warning, getting real clock is possible only if micro:bit stay in power on mode.';
Blockly.Msg['DISPLAY_4DIGIT_NUMBER'] = 'number';
Blockly.Msg['DISPLAY_4DIGIT_TEMPERATURE'] = Blockly.Msg['SENSORS_TEMPERATURE'];
Blockly.Msg['DISPLAY_MY9221_SET_LEVEL_TITLE'] = '[LED Bar module] set level of %1 on pins DI %2 DCKI %3';
Blockly.Msg['DISPLAY_MY9221_SET_LEVEL_TOOLTIP'] = IMG_MODULE_LED_BAR + Blockly.Tooltip.SEP + 'Enable to show level of input value on grove LED bar display (MY9221) on digital pins from P0 to P20.';
Blockly.Msg['DISPLAY_MY9221_REVERSE_TITLE'] = '[LED Bar Module] invert display %1 DI pins %2 DCKI %3';
Blockly.Msg['DISPLAY_MY9221_REVERSE_TOOLTIP'] = IMG_MODULE_LED_BAR + Blockly.Tooltip.SEP + 'Allows to invert the 10 LEDs of the MY9221 module with the digital pins P0 to P20.';
// display - Kitronic Traffic
Blockly.Msg['DISPLAY_TRAFFICLIGHT_SETLED_TITLE'] = '[Traffic Light] set %1 LED to state %2';
Blockly.Msg['DISPLAY_TRAFFICLIGHT_SETLED_TOOLTIP'] = IMG_MODULE_TRAFFIC_LIGHT + Blockly.Tooltip.SEP + 'Allows you to control Kitronik Traffic Light.';
Blockly.Msg['DISPLAY_TRAFFICLIGHT_RED'] = 'red';
Blockly.Msg['DISPLAY_TRAFFICLIGHT_ORANGE'] = 'orange';
Blockly.Msg['DISPLAY_TRAFFICLIGHT_GREEN'] = 'green';
Blockly.Msg['DISPLAY_LAMPBIT_SETLED_TITLE'] = "[LAMP:BIT] ضبط مؤشر LED على %1";
Blockly.Msg['DISPLAY_LAMPBIT_SETLED_TOOLTIP'] = IMG_MODULE_LAMPBIT + Blockly.Tooltip.SEP + "يتحكم في مصباح إنارة الشوارع LED";
//Display - RGB LED MATRIX
Blockly.Msg['DISPLAY_RGB_LED_MATRIX_TITLE'] = '[RGB LED Matrix] display %1 %2';
Blockly.Msg['DISPLAY_RGB_LED_MATRIX_TOOLTIP'] = IMG_MODULE_RGB_LED_MATRIX_8_8 + Blockly.Tooltip.SEP + 'Enables a drawing to be displayed on the 8x8 RGB LED matrix.';
Blockly.Msg['DISPLAY_RGB_LED_MATRIX_STOPDISPLAY_TITLE'] = '[RGB LED Matrix] clear the matrix';
Blockly.Msg['DISPLAY_RGB_LED_MATRIX_STOPDISPLAY_TOOLTIP'] = IMG_MODULE_RGB_LED_MATRIX_8_8 + Blockly.Tooltip.SEP + 'Turns off all LEDs in the matrix';
Blockly.Msg['DISPLAY_LED_MATRIX_DURATION'] = 'during';
Blockly.Msg['DISPLAY_LED_MATRIX_DURATION_UNIT'] = 'ms';
//Display - LED MATRIX
Blockly.Msg['DISPLAY_LED_MATRIX_TITLE'] = '[LED Matrix] display %1 %2';
Blockly.Msg['DISPLAY_LED_MATRIX_TOOLTIP'] = IMG_MODULE_LED_MATRIX_8_8 + Blockly.Tooltip.SEP + 'Enables a drawing to be displayed on the 8x8 monochrome LED matrix.';
Blockly.Msg['DISPLAY_LED_MATRIX_CLEAR_TITLE'] = '[LED Matrix] clear the matrix';
Blockly.Msg['DISPLAY_LED_MATRIX_CLEAR_TOOLTIP'] = IMG_MODULE_LED_MATRIX_8_8 + Blockly.Tooltip.SEP + 'Turns off all LEDs in the matrix';
// Display - Morpion
Blockly.Msg['DISPLAY_MORPION_NEWGAME_TITLE'] = '[OLED display] Tic Tac Toe - new game';
Blockly.Msg['DISPLAY_MORPION_NEWGAME_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to start new game of Tic Tac Toe on OLED display. Connect the OLED display on I2C port. Warning, the game uses all micro:bit memory, you cannot connect any other device during playing Tic Tac Toe.';
Blockly.Msg['DISPLAY_MORPION_MOVECURSOR_TITLE'] = '[OLED display] Tic Tac Toe - move cursor';
Blockly.Msg['DISPLAY_MORPION_MOVECURSOR_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to move cursor of Tic Tac Toe grid on OLED display. The cursor goes through the grid box by box. Connect the OLED display on I2C port. Warning, the game uses all micro:bit memory, you cannot connect any other device during playing Tic Tac Toe.';
Blockly.Msg['DISPLAY_MORPION_SETPLAYERFIGURE_TITLE'] = '[OLED display] Tic Tac Toe - add %1';
Blockly.Msg['DISPLAY_MORPION_SETPLAYERFIGURE_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to add figure player (Cross or Circle) in Tic Tac Toe grid on OLED display. Connect the OLED display on I2C port. Warning, the game uses all micro:bit memory, you cannot connect any other device during playing Tic Tac Toe.';
Blockly.Msg['DISPLAY_MORPION_CROSS'] = 'cross';
Blockly.Msg['DISPLAY_MORPION_CIRCLE'] = 'circle';
Blockly.Msg['DISPLAY_MORPION_ISENDGAME_TITLE'] = '[OLED display] Tic Tac Toe - is end game ?';
Blockly.Msg['DISPLAY_MORPION_ISENDGAME_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to return Tic Tac Toe game curent state. Connect the OLED display on I2C port. Warning, the game uses all micro:bit memory, you cannot connect any other device during playing Tic Tac Toe.';
// Display - Games
Blockly.Msg['DISPLAY_GAMES_LEFT'] = 'left';
Blockly.Msg['DISPLAY_GAMES_RIGHT'] = 'right';
Blockly.Msg['DISPLAY_GAMES_UP'] = 'up';
Blockly.Msg['DISPLAY_GAMES_DOWN'] = 'down';
Blockly.Msg['DISPLAY_GAMES_CREATESPRITE_TITLE'] = 'create sprite at x %1 y %2';
Blockly.Msg['DISPLAY_GAMES_CREATESPRITE_TOOLTIP'] = 'Create a sprite on micro:bit screen.';
Blockly.Msg['DISPLAY_GAMES_DELETESPRITE_TITLE'] = 'delete %1';
Blockly.Msg['DISPLAY_GAMES_DELETESPRITE_TOOLTIP'] = 'Deleted the selected sprite.';
Blockly.Msg['DISPLAY_GAMES_ISSPRITEDELETED_TITLE'] = 'is %1 deleted ?';
Blockly.Msg['DISPLAY_GAMES_ISSPRITEDELETED_TOOLTIP'] = 'Returns True if selected sprite is deleted.';
Blockly.Msg['DISPLAY_GAMES_MOVESPRITE_TITLE'] = 'move %1 by %2 to %3';
Blockly.Msg['DISPLAY_GAMES_MOVESPRITE_TOOLTIP'] = 'Move selected sprite by choosen step number and direction.';
Blockly.Msg['DISPLAY_GAMES_GETSPRITEPOSITION_TITLE'] = 'position %1 %2';
Blockly.Msg['DISPLAY_GAMES_GETSPRITEPOSITION_TOOLTIP'] = 'Get slected sprite position.';
Blockly.Msg['DISPLAY_GAMES_CHANGESCORE_TITLE'] = 'change score by %1';
Blockly.Msg['DISPLAY_GAMES_CHANGESCORE_TOOLTIP'] = 'Increment the score of game.';
Blockly.Msg['DISPLAY_GAMES_GETSCORE_TITLE'] = 'score';
Blockly.Msg['DISPLAY_GAMES_GETSCORE_TOOLTIP'] = 'Returns the score of game.';
Blockly.Msg['DISPLAY_GAMES_STOPGAME_TITLE'] = 'stop game';
Blockly.Msg['DISPLAY_GAMES_STOPGAME_TOOLTIP'] = 'Stop the game.';
Blockly.Msg['DISPLAY_GAMES_ISENDGAME_TITLE'] = 'is end of game';
Blockly.Msg['DISPLAY_GAMES_ISENDGAME_TOOLTIP'] = 'Returns True if game is stopped.';
Blockly.Msg['DISPLAY_GAMES_RESTARTGAME_TITLE'] = 'restart game';
Blockly.Msg['DISPLAY_GAMES_RESTARTGAME_TOOLTIP'] = 'Restart the game.';
// Input/Output - Micro:bit
Blockly.Msg["IO_WAIT_TITLE"] = "wait %1 %2";
Blockly.Msg["IO_WAIT_TOOLTIP"] = "Stop the code execution (duration in seconds or milliseconds).";
Blockly.Msg["IO_WAIT_SECOND"] = "second.s";
Blockly.Msg["IO_WAIT_MILLISECOND"] = "millisecond.s";
Blockly.Msg["IO_WAIT_MICROSECOND"] = "microsecond.s";
Blockly.Msg["IO_WAIT_UNTIL_TITLE"] = "wait until %1";
Blockly.Msg["IO_WAIT_UNTIL_TOOLTIP"] = "Stop the code execution until the satisfied condition.";
Blockly.Msg["IO_INITCHRONOMETER_TITLE"] = "Initialize the chronometer";
Blockly.Msg["IO_INITCHRONOMETER_TOOLTIP"] = "Allows you to initialize the chronometer (in seconds).";
Blockly.Msg['IO_RESETCHRONOMETER_TITLE'] = 'إعادة ضبط المؤقت';
Blockly.Msg['IO_RESETCHRONOMETER_TOOLTIP'] = 'يعيد ضبط المؤقت إلى 0 (بالثواني).';
Blockly.Msg["IO_GETCHRONOMETER_TITLE"] = "get chronometer in %1";
Blockly.Msg["IO_GETCHRONOMETER_TOOLTIP"] = "Returns the chronometer value from the initialization in seconds or milliseconds.";
Blockly.Msg["IO_ONBUTTONPRESSED_TITLE"] = "on button %1 %2 pressed then";
Blockly.Msg["IO_ONBUTTONPRESSED_TOOLTIP"] = "Execute instructions if the choosen button (A or B) is pressed.";
Blockly.Msg["IO_ISPRESSED"] = "is";
Blockly.Msg["IO_WASPRESSED"] = "was";
Blockly.Msg["IO_ONPINTOUCHED_TITLE"] = "on %1 touched then";
Blockly.Msg["IO_ONPINTOUCHED_TOOLTIP"] = "Execute instructions if micro:bit logo or the pin P0, P1 or P2 is touched (or pressed).";
Blockly.Msg["SENSORS_ACCELEROMETER_ON_MOVEMENT_TITLE"] = "on %1 then";
Blockly.Msg["SENSORS_ACCELEROMETER_ON_MOVEMENT_SHAKE"] = "shake";
Blockly.Msg["SENSORS_ACCELEROMETER_ON_MOVEMENT_UP"] = "logo up";
Blockly.Msg["SENSORS_ACCELEROMETER_ON_MOVEMENT_DOWN"] = "logo down";
Blockly.Msg["SENSORS_ACCELEROMETER_ON_MOVEMENT_FACE_UP"] = "screen up";
Blockly.Msg["SENSORS_ACCELEROMETER_ON_MOVEMENT_FACE_DOWN"] = "screen down";
Blockly.Msg["SENSORS_ACCELEROMETER_ON_MOVEMENT_LEFT"] = "tilt left";
Blockly.Msg["SENSORS_ACCELEROMETER_ON_MOVEMENT_RIGHT"] = "tilt right";
Blockly.Msg["SENSORS_ACCELEROMETER_ON_MOVEMENT_FREEFALL"] = "free fall";
Blockly.Msg["SENSORS_ACCELEROMETER_ON_MOVEMENT_TOOLTIP"] = "Execute instructions if the micro:bit board is shaken.";
Blockly.Msg["IO_ISBUTTONPRESSED_TITLE"] = "button %1 %2 pressed";
Blockly.Msg["IO_ISBUTTONPRESSED_TOOLTIP"] = "Returns 'True' if button A or B is pressed, else return 'False'.";
Blockly.Msg["IO_ISPINTOUCHED_TITLE"] = "%1 is touched";
Blockly.Msg["IO_ISPINTOUCHED_TOOLTIP"] = "Returns 'True' if micro:bit logo or pin P0, P1 or P2 is touched (or pressed), else return 'False'.";
Blockly.Msg["IO_BUTTONS_GET_PRESSES_TITLE"] = "get button %1 presses";
Blockly.Msg["IO_BUTTONS_GET_PRESSES_TOOLTIP"] = "Returns number of presses of button A or B";
Blockly.Msg["IO_RUN_EVERY_TITLE"] = "repeat every %1 hour.s %2 minute.s %3 second.s %4 millisecond.s";
Blockly.Msg["IO_RUN_EVERY_TOOLTIP"] = "Runs a function repeatedly. Each argument is a different unit of time and they are additive. For example, run_every(min=2, s=30) schedules the reminder every two minutes and a half. Please note that this feature is only available with the micro:bit V2.";
Blockly.Msg['IO_MICROBIT_RESET_TITLE'] = '[Micro:bit] reset board';
Blockly.Msg['IO_MICROBIT_RESET_TOOLTIP'] = 'Restarts the micro:bit board. This can be useful to reset the board state or restart the running program.';
// Input/Output - Microphone module
Blockly.Msg["IO_MICRO_LOUD"] = "loud";
Blockly.Msg["IO_MICRO_QUIET"] = "quiet";
Blockly.Msg["IO_MICRO_IS"] = "is";
Blockly.Msg["IO_MICRO_WAS"] = "was";
Blockly.Msg["IO_MICRO_ONSOUNDDETECTED_TITLE"] = "[Micro] if %1 sound %2 detected then";
Blockly.Msg["IO_MICRO_ONSOUNDDETECTED_TOOLTIP"] = "Execute instructions if sound condition (loud/quiet) is detected. 'was' option: Execute instructions if a (loud/quiet) sound occured since the last call to 'was_sound()'.";
Blockly.Msg["IO_MICRO_GETCURRENTSOUND_TITLE"] = "[Micro] sound condition";
Blockly.Msg["IO_MICRO_GETCURRENTSOUND_TOOLTIP"] = "Returns the sound condition (loud/quiet).";
Blockly.Msg["IO_MICRO_WASSOUNDDETECTED_TITLE"] = "[Micro] %1 sound was detected";
Blockly.Msg["IO_MICRO_WASSOUNDDETECTED_TOOLTIP"] = "Returns True if a (loud/quiet) sound occured since the last call to 'was_sound()'.";
Blockly.Msg["IO_MICRO_GETSOUNDLEVEL_TITLE"] = "[Micro] sound level";
Blockly.Msg["IO_MICRO_GETSOUNDLEVEL_TOOLTIP"] = "Enable du get sound level from 0 to 255.";
Blockly.Msg["IO_MICRO_GETHISTORYSOUND_TITLE"] = "[Micro] history of sounds";
Blockly.Msg["IO_MICRO_GETHISTORYSOUND_TOOLTIP"] = "Returns history of sounds since last call to 'get_sounds()'.";
Blockly.Msg["IO_MICRO_SETSOUNDTHRESHOLD_TITLE"] = "[Micro] set %1 sound threshold to %2";
Blockly.Msg["IO_MICRO_SETSOUNDTHRESHOLD_TOOLTIP"] = "Enable to set sound level threshold loud/quiet from 0 to 255.";
Blockly.Msg["IO_MICRO_SOUNDCONDITION_TITLE"] = "[Micro] %1";
Blockly.Msg["IO_MICRO_SOUNDCONDITION_TOOLTIP"] = "Enable to use (LOUD/QUIET) constants from microphone module in 'Logic' category.";
// Input/Output - External modules
Blockly.Msg["IO_GROVEKEYPAD_GETNUMBER_TITLE"] = "[Numeric Touch Keypad] get number on pins RX %1 TX %2";
Blockly.Msg["IO_GROVEKEYPAD_GETNUMBER_TOOLTIP"] = IMG_MODULE_KEYPAD + Blockly.Tooltip.SEP + "Enable to get touched number from keypad grove module on pins RX & TX. When you connect device, make sure you “cross” the wires. micro:bit TX pin needs to be connected with device's RX pin, and the RX pin with the device's TX pin.";
Blockly.Msg["IO_GROVEJOYSTICK_GETAXIS_TITLE"] = "[Joystick Module] joystick axis %1 value on pins A0 %2 A1 %3";
Blockly.Msg["IO_GROVEJOYSTICK_GETAXIS_TOOLTIP"] = IMG_MODULE_JOYSTICK + Blockly.Tooltip.SEP + "Returns grove joystick axis value (from 0 to 1023) on analog pins P0 through P4, or P10.";
Blockly.Msg["IO_GROVECOLOREDBUTTON_GET_TITLE"] = "[Colored Button Module] state on pin SIG2 %1";
Blockly.Msg["IO_GROVECOLOREDBUTTON_GET_TOOLTIP"] = IMG_MODULE_LED_BUTTON + Blockly.Tooltip.SEP + "Returns grove colored button state (0 or 1) on digital pins P0 up through P20.";
Blockly.Msg["IO_GROVECOLOREDBUTTON_SETLED_TITLE"] = "[Colored Button Module] control LED to state %1 on pin SIG1 %2";
Blockly.Msg["IO_GROVECOLOREDBUTTON_SETLED_TOOLTIP"] = IMG_MODULE_LED_BUTTON + Blockly.Tooltip.SEP + "Enable to switch on or switch off the LED Button Grove (0 or 1) on digitals pins P0 up through P20.";
Blockly.Msg["IO_GETGROVEROTARYANGLE_TITLE"] = "[Rotary Angle Module] angle on pin %1";
Blockly.Msg["IO_GETGROVEROTARYANGLE_TOOLTIP"] = IMG_MODULE_ROTARY_ANGLE + Blockly.Tooltip.SEP + "Returns grove rotary angle position (from 0 to 1023) on analog pins P0 through P4, or P10.";
Blockly.Msg["IO_GETGROVESLIDEPOTENTIOMETER_TITLE"] = "[Slide Potentiometer] position value on pin %1";
Blockly.Msg["IO_GETGROVESLIDEPOTENTIOMETER_TOOLTIP"] = IMG_MODULE_SLIDE_POT + Blockly.Tooltip.SEP + "Returns grove slide potentiometer position value (from 0 to 1023) on analog pins P0 through P4, or P10.";
Blockly.Msg["IO_GETGROVETACTILE_TITLE"] = "[Touch Sensor] touch state on pin %1 ";
Blockly.Msg["IO_GETGROVETACTILE_TOOLTIP"] = IMG_MODULE_TOUCH + Blockly.Tooltip.SEP + "Returns grove touch sensor state (0 or 1) on digital pins P0 up through P20.";
Blockly.Msg["IO_GETGROVEBUTTON_TITLE"] = "[Button Module] button state on pin %1 ";
Blockly.Msg["IO_GETGROVEBUTTON_TOOLTIP"] = IMG_MODULE_BUTTON + Blockly.Tooltip.SEP + "Returns grove button state (0 or 1) on digital pins P0 up through P20.";
Blockly.Msg["IO_GETGROVESWITCH_TITLE"] = "[Switch Module] switch state on pin %1 ";
Blockly.Msg["IO_GETGROVESWITCH_TOOLTIP"] = IMG_MODULE_SWITCH + Blockly.Tooltip.SEP + "Returns grove switch state (0 or 1) on digital pins P0 up through P20.";
// Input/Output - Pins
Blockly.Msg["IO_DIGITAL_SIGNAL_TITLE"] = "%1";
Blockly.Msg["IO_DIGITAL_SIGNAL_HIGH"] = "HIGH (1)";
Blockly.Msg["IO_DIGITAL_SIGNAL_LOW"] = "LOW (0)";
Blockly.Msg["IO_DIGITAL_SIGNAL_TOOLTIP"] = "Returns boolean value (1 if HIGH or 0 if LOW).";
Blockly.Msg["IO_READDIGITALPIN_TITLE"] = "read digital pin %1";
Blockly.Msg["IO_READDIGITALPIN_TOOLTIP"] = "Enable to read the digital value of pins (0 or 1).";
Blockly.Msg["IO_WRITEDIGITALPIN_TITLE"] = "write on digital pin %1 state %2";
Blockly.Msg["IO_WRITEDIGITALPIN_TOOLTIP"] = "Enable to write the value (0 or 1) on digital pin.";
Blockly.Msg["IO_READANALOGPIN_TITLE"] = "read analog pin %1";
Blockly.Msg["IO_READANALOGPIN_TOOLTIP"] = "Enable to read the analog value of pins (0-1023).";
Blockly.Msg["IO_WRITEANALOGPIN_TITLE"] = "write on analog pin %1 value %2";
Blockly.Msg["IO_WRITEANALOGPIN_TOOLTIP"] = "Enable to write on analog pin the value (0-1023). This function does not really write analog value, it writes PWM signal. For example, writing 511 has 50% duty cycle, the average voltage is 1,65V.";
Blockly.Msg["IO_SETPWM_TITLE"] = "apply a signal of period %1 %2 on pin %3";
Blockly.Msg["IO_SETPWM_TOOLTIP"] = "Enable to apply a PWM signal on a pin";
Blockly.Msg["IO_READPULSEIN_TITLE"] = "read pulse in (μs) of state %1 on pin %2";
Blockly.Msg["IO_READPULSEIN_TOOLTIP"] = "Returns the duration of pulse in. Choice state (HIGH or LOW)";
Blockly.Msg['IO_SET_PULL_TITLE'] = 'set pull pin %1 to %2';
Blockly.Msg['IO_SET_PULL_TOOLTIP'] = 'Configure the pin to be in digital read mode with the given pull mode.';
Blockly.Msg['IO_SET_PULL_UP'] = 'up';
Blockly.Msg['IO_SET_PULL_DOWN'] = 'down';
Blockly.Msg['IO_SET_NO_PULL'] = 'none';
// Micro:bit Logs
Blockly.Msg['COMMUNICATION_LOG_DELETE_TITLE'] = 'clear log on micro:bit';
Blockly.Msg['COMMUNICATION_LOG_DELETE_TOOLTIP'] = 'Clears the log (HTML) on the micro:bit board.';
Blockly.Msg['COMMUNICATION_LOG_SERIAL_TITLE'] = 'get console feedback';
Blockly.Msg['COMMUNICATION_LOG_SERIAL_TOOLTIP'] = 'Allows writing log data to the console in real-time.';
Blockly.Msg['COMMUNICATION_LOG_SETLABEL_TITLE'] = 'add a new label with Timer %1';
Blockly.Msg['COMMUNICATION_LOG_SETLABEL_TOOLTIP'] = 'Allows adding a label to the log data column. The label can be text or a number. The timestamp can be in seconds, milliseconds, minutes, hours, or days.';
Blockly.Msg['COMMUNICATION_LOG_SETLABEL_TIMESTAMP_MILLISECONDS'] = 'milliseconds';
Blockly.Msg['COMMUNICATION_LOG_SETLABEL_TIMESTAMP_SECONDS'] = 'seconds';
Blockly.Msg['COMMUNICATION_LOG_SETLABEL_TIMESTAMP_MINUTES'] = 'minutes';
Blockly.Msg['COMMUNICATION_LOG_SETLABEL_TIMESTAMP_HOURS'] = 'hours';
Blockly.Msg['COMMUNICATION_LOG_SETLABEL_TIMESTAMP_DAYS'] = 'days';
Blockly.Msg['COMMUNICATION_LOG_SETLABEL_TIMESTAMP_NONE'] = 'None';
Blockly.Msg['COMMUNICATION_LOG_ADDDATA_TITLE'] = 'add data to label';
Blockly.Msg['COMMUNICATION_LOG_ADDDATA_TOOLTIP'] = 'Allows adding data to the log data column. The label can be text or a number. The data can be text or a number.';
Blockly.Msg['COMMUNICATION_LOG_DATA_TITLE'] = 'label %1 data %2';
Blockly.Msg['COMMUNICATION_LOG_DATA_TOOLTIP'] = 'Allows adding data to the log data column. The label can be text or a number. The data can be text or a number.';
// Communication - Serial connection
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_TITLE'] = 'write on serial port %1';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_TOOLTIP'] = 'Write a string on serial port.';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_WITH'] = 'with';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_NEWLINES'] = 'newline(s)';
Blockly.Msg['COMMUNICATION_WRITEGRAPH_TITLE'] = 'write graph';
Blockly.Msg['COMMUNICATION_WRITEGRAPH_TOOLTIP'] = 'This block makes it possible to write (digital) data that will be visible in the plotter. It can be used with one or more blocks in "Name" and "Data" format. Click on icon \'Graphic mode\' to display graphics.';
Blockly.Msg['COMMUNICATION_DATA'] = 'Data';
Blockly.Msg['COMMUNICATION_PRINT_DATAS_TITLE'] = 'Name %1 Data %2';
Blockly.Msg['COMMUNICATION_PRINT_DATAS_TOOLTIP'] = 'This block is to be used in the "Write in graphic" block. It must contain the name of the (text) value to display and the value in question.';
Blockly.Msg['COMMUNICATION_COMPUTER_PLAYNOTE_TITLE'] = 'play music %1 in the serial port';
Blockly.Msg['COMMUNICATION_COMPUTER_PLAYNOTE_TOOLTIP'] = 'Play selected note until execution of "Stop music" block.';
Blockly.Msg['NOTE_C'] = 'C';
Blockly.Msg['NOTE_C_SHARP'] = 'C#';
Blockly.Msg['NOTE_D'] = 'D';
Blockly.Msg['NOTE_D_SHARP'] = 'D#';
Blockly.Msg['NOTE_E'] = 'E';
Blockly.Msg['NOTE_F'] = 'F';
Blockly.Msg['NOTE_F_SHARP'] = 'F#';
Blockly.Msg['NOTE_G'] = 'G';
Blockly.Msg['NOTE_G_SHARP'] = 'G#';
Blockly.Msg['NOTE_A'] = 'A';
Blockly.Msg['NOTE_A_SHARP'] = 'A#';
Blockly.Msg['NOTE_B'] = 'B';
Blockly.Msg['COMMUNICATION_COMPUTER_SETFREQUENCY_TITLE'] = 'play frequency %1 (Hz) on the computer';
Blockly.Msg['COMMUNICATION_COMPUTER_SETFREQUENCY_TOOLTIP'] = 'This block allows to play a given frequency on the computer';
Blockly.Msg['COMMUNICATION_COMPUTER_STOPMUSIC_TITLE'] = 'stop music of serial port';
Blockly.Msg['COMMUNICATION_COMPUTER_STOPMUSIC_TOOLTIP'] = 'Stop the current note of serial port.';
Blockly.Msg['COMMUNICATION_SERIAL_ONDATARECEIVED_TITLE'] = 'on serial data received in %1 then';
Blockly.Msg['COMMUNICATION_SERIAL_ONDATARECEIVED_TOOLTIP'] = 'Allows you to execute instructions if data is received by serial port in the \'serialData\' variable.';
// Communication - Radio
Blockly.Msg['COMMUNICATION_RADIO_SENDSTRING_TITLE'] = '[Radio] send string %1';
Blockly.Msg['COMMUNICATION_RADIO_SENDSTRING_TOOLTIP'] = 'Enable to send string by micro:bit radio module.';
Blockly.Msg['COMMUNICATION_RADIO_SEND_TITLE'] = '[Radio] send number or list %1';
Blockly.Msg['COMMUNICATION_RADIO_SEND_TOOLTIP'] = 'Enable to send numbers or lists by radio module.';
Blockly.Msg['COMMUNICATION_RADIO_SENDVALUE_TITLE'] = '[Radio] send value %1 as %2';
Blockly.Msg['COMMUNICATION_RADIO_SENDVALUE_TOOLTIP'] = 'Enable to send data with \'name\' and its value by radio module.';
Blockly.Msg['COMMUNICATION_RADIO_ONSTRINGRECEIVED_TITLE'] = '[Radio] on data received in %1 then';
Blockly.Msg['COMMUNICATION_RADIO_ONSTRINGRECEIVED_TOOLTIP'] = 'Allows you to execute instructions on string received by radio in the \'stringData\' variable.';
Blockly.Msg['COMMUNICATION_RADIO_ONNUMBERRECEIVED_TITLE'] = '[Radio] on data received in %1 then';
Blockly.Msg['COMMUNICATION_RADIO_ONNUMBERRECEIVED_TOOLTIP'] = 'Allows you to execute instructions on number received by radio in the \'numberData\' variable.';
Blockly.Msg['COMMUNICATION_RADIO_ONVALUERECEIVED_TITLE'] = '[Radio] on data received in %1 %2 then';
Blockly.Msg['COMMUNICATION_RADIO_ONVALUERECEIVED_TOOLTIP'] = 'Allows you to execute instructions on name as string and value as number received by radio in the \'name\' and \'value\' variables.';
Blockly.Msg['COMMUNICATION_RADIO_CONFIG_TITLE'] = '[Radio] set Channel %1 Power %2 Data size %3 Group %4';
Blockly.Msg['COMMUNICATION_RADIO_CONFIG_TOOLTIP'] = 'Allows you to configure the frequence channel (from 0 to 83), data size (bytes), transmission power (from 0 to 7), and group (from 0 to 255).';
// Communication - Data logging
Blockly.Msg['COMMUNICATION_OPENLOG_WRITE_TITLE'] = '[Openlog] write in the SD card %1 board %2 on pins RXI %3 TXO %4 %5 Datas %6';
Blockly.Msg['COMMUNICATION_OPENLOG_WRITE_TOOLTIP'] = IMG_MODULE_OPENLOG + Blockly.Tooltip.SEP + 'Block enables writing data in the SD card of Openlog module. For the openlog, the baudrate has to be defined at the half of micro:bit baudrate. Example: micro:bit v1 (9600 in config.txt file), the baudrate is 4800 in function uart.init().';
// Communication - Wireless
Blockly.Msg['COMMUNICATION_BLUETOOTH_SENDDATA_TITLE'] = '[Bluetooth] send on pins RX %1 TX %2 message %3';
Blockly.Msg['COMMUNICATION_BLUETOOTH_SENDDATA_TOOLTIP'] = IMG_MODULE_HC05 + Blockly.Tooltip.SEP + 'Enable to send any data by bluetooth HC05 module on pins RX/TX.';
Blockly.Msg['COMMUNICATION_BLUETOOTH_ONDATARECEIVED_TITLE'] = '[Bluetooth] on message received RX %1 TX %2 in %3 then';
Blockly.Msg['COMMUNICATION_BLUETOOTH_ONDATARECEIVED_TOOLTIP'] = IMG_MODULE_HC05 + Blockly.Tooltip.SEP + 'Allows you to execute instructions on data received by Bluetooth HC05 module in the \'bluetoothData\' variable on pins TX/RX.';
Blockly.Msg['COMMUNICATION_HM10_BLUETOOTH_SENDDATA_TITLE'] = '[HM10 BT] send on pins RX %1 TX %2 message %3';
Blockly.Msg['COMMUNICATION_HM10_BLUETOOTH_SENDDATA_TOOLTIP'] = IMG_MODULE_HM10_BT + Blockly.Tooltip.SEP + 'Enable to send any data by bluetooth HM10 module on pins RX/TX.';
Blockly.Msg['COMMUNICATION_HM10_BLUETOOTH_ONDATARECEIVED_TITLE'] = '[HM10 BT] on message received RX %1 TX %2 in %3 then';
Blockly.Msg['COMMUNICATION_HM10_BLUETOOTH_ONDATARECEIVED_TOOLTIP'] = IMG_MODULE_HM10_BT + Blockly.Tooltip.SEP + 'Allows you to execute instructions on data received by Bluetooth HM10 module in the \'HM10Data\' variable on pins TX/RX. As default, the module name is MLT-BT05.';
// Communication - Tracking modules
Blockly.Msg['COMMUNICATION_GPS_INFO_TYPE'] = 'frame type';
Blockly.Msg['COMMUNICATION_GPS_INFO_CLOCK'] = 'clock (h, m, s)';
Blockly.Msg['COMMUNICATION_GPS_INFO_LATITUDE'] = 'latitude (°)';
Blockly.Msg['COMMUNICATION_GPS_INFO_LONGITUDE'] = 'longitude (°)';
Blockly.Msg['COMMUNICATION_GPS_INFO_SATELLITE'] = 'number of satellites used';
Blockly.Msg['COMMUNICATION_GPS_INFO_ALTITUDE'] = 'altitude (m)';
Blockly.Msg['COMMUNICATION_GPS_INFO_ALL_FRAME'] = 'all frame';
Blockly.Msg['COMMUNICATION_GPS_GET_NMEA_TITLE'] = '[GPS] NMEA frames on pins RX %1 TX %2';
Blockly.Msg['COMMUNICATION_GPS_GET_NMEA_TOOLTIP'] = IMG_MODULE_GPS + Blockly.Tooltip.SEP + 'Returns the list of NMEA frames read with the Grove SIM28 or Air530 GPS module on the RX/TX pins. The wires do not need to be reversed between the module pins and those indicated in the block. The inversion is done automatically in the python code.\nWarning: If you use the console to display GPS data, connect your card to the interface before sending the program by clicking on the button [>_ REPL]. Then transfer your program using the button [Download .hex].';
Blockly.Msg['COMMUNICATION_GPS_GGA_GETINFORMATIONS_TITLE'] = '[GPS] get %3 on RX %1 TX %2 pins';
Blockly.Msg['COMMUNICATION_GPS_GGA_GETINFORMATIONS_TOOLTIP'] = IMG_MODULE_GPS + Blockly.Tooltip.SEP + 'Returns the data selected among (frame type, clock, latitude, longitude, altitude) analyzed from the NMEA frame (GNGGA or GPGGA) read with the Grove SIM28 or Air530 GPS module on the RX/TX pins. The wires do not do not need to be reversed between the pins of the module and those indicated in the block. The reversal is done automatically in the python code.\nWarning: If you use the console to display the GPS data, connect your card to the interface before sending the program by clicking on the [>_ REPL] button. Then, transfer your program using the button [Download .hex].';
// 05/22 The 2 following blocks removed from toolbox. We keep the block cause of user projects.
Blockly.Msg['COMMUNICATION_GPS_ONDATARECEIVED_TITLE'] = '[GPS] on data received on pins TX %1 RX %2 in %3 then';
Blockly.Msg['COMMUNICATION_GPS_ONDATARECEIVED_TOOLTIP'] = IMG_MODULE_GPS + Blockly.Tooltip.SEP + 'Allows you to execute instructions on data received by GPS grove module in the \'gpsData\' variable on pin TX/RX.';
Blockly.Msg['COMMUNICATION_GPS_GETINFORMATIONS_TITLE'] = '[GPS] get %1 with datas %2';
Blockly.Msg['COMMUNICATION_GPS_GETINFORMATIONS_TOOLTIP'] = IMG_MODULE_GPS + Blockly.Tooltip.SEP + 'Returns analyzed datas from gps grove module choosen in (\'clock\',\'latitude,\'longitude\')';
// end of the 2 blocks
Blockly.Msg['COMMUNICATION_RTC_MODULE_PCF85063TP'] = 'High Precision (0x51)';
Blockly.Msg['COMMUNICATION_RTC_MODULE_DS1307'] = 'v1.2 (0x68)';
Blockly.Msg['COMMUNICATION_GROVERTC_SETDATE_TITLE'] = '[Clock RTC %1] initialize at %2 date %3';
Blockly.Msg['COMMUNICATION_GROVERTC_SETDATE_TOOLTIP'] = IMG_MODULE_RTC + Blockly.Tooltip.SEP + 'Allows you to initialize the Grove High Precision RTC clock module (PCF85063TP) or RTC v1.2 (DS1307) so that you can read the exact date and time using the \'Read clock module\' block. Place in the \'on start\' block. Connect module on I2C port. Warning: To work, the DS1307 module must have a small flat battery.';
Blockly.Msg['DAY_MONDAY'] = 'monday';
Blockly.Msg['DAY_TUESDAY'] = 'tuesday';
Blockly.Msg['DAY_WEDNESDAY'] = 'wednesday';
Blockly.Msg['DAY_THURSDAY'] = 'thursday';
Blockly.Msg['DAY_FRIDAY'] = 'friday';
Blockly.Msg['DAY_SATURDAY'] = 'saturday';
Blockly.Msg['DAY_SUNDAY'] = 'sunday';
Blockly.Msg['COMMUNICATION_GROVERTC_SETHOUR_TITLE'] = '[Clock RTC %1] initialize at hour %2 minute %3 second %4';
Blockly.Msg['COMMUNICATION_GROVERTC_SETHOUR_TOOLTIP'] = IMG_MODULE_RTC + Blockly.Tooltip.SEP + 'Allows you to initialize the Grove High Precision RTC clock module (PCF85063TP) or RTC v1.2 (DS1307) so that you can read the exact date and time using the \'Read clock module\' block. Place in the \'on start\' block. Connect the module on I2C port. Warning: To work, the DS1307 module must have a small flat battery.';
Blockly.Msg['COMMUNICATION_GROVERTC_READTIME_TITLE'] = '[Clock RTC %1] read %2';
Blockly.Msg['COMMUNICATION_GROVERTC_READTIME_TOOLTIP'] = IMG_MODULE_RTC + Blockly.Tooltip.SEP + 'Read the date and time (choose from the drop-down menu) from Grove High Precision RTC clock module (PCF85063TP) or RTC v1.2 (DS1307). To obtain a correct result, first use the two blocks \'Initialize the clock module\'. Connect module on I2C port. Warning: To work, the DS1307 module must have a small flat battery.';
Blockly.Msg['CLOCK_ALL_DATA'] = 'time';
Blockly.Msg['CLOCK_YEAR'] = 'year';
Blockly.Msg['CLOCK_MONTH'] = 'month';
Blockly.Msg['CLOCK_MONTH_DAY'] = 'day of month';
Blockly.Msg['CLOCK_WEEK_DAY'] = 'day of week';
Blockly.Msg['CLOCK_HOUR'] = 'hour';
Blockly.Msg['CLOCK_MINUTE'] = 'minute';
Blockly.Msg['CLOCK_SECOND'] = 'second';
// Communication - UART
Blockly.Msg['COMMUNICATION_SERIAL_INIT_TITLE'] = '[uart] redirect serial to RX %2 TX %3 baudrate %1';
Blockly.Msg['COMMUNICATION_SERIAL_INIT_TOOLTIP'] = 'Enable to redirect serial connection with RX & TX. When you connect device, make sure you “cross” the wires. micro:bit TX pin needs to be connected with device\'s RX pin, and the RX pin with the device\'s TX pin.';
Blockly.Msg['COMMUNICATION_SERIAL_REDIRECTTOUSB_TITLE'] = '[uart] redirect serial to USB port';
Blockly.Msg['COMMUNICATION_SERIAL_REDIRECTTOUSB_TOOLTIP'] = 'Enable to redirect serial connection to USB. It is used if you connect some UART devices in same time.';
Blockly.Msg['COMMUNICATION_UART_WRITE_TITLE'] = '[uart] write data %1';
Blockly.Msg['COMMUNICATION_UART_WRITE_TOOLTIP'] = 'Write data on uart port.';
Blockly.Msg['COMMUNICATION_UART_READ_TITLE'] = '[uart] read data';
Blockly.Msg['COMMUNICATION_UART_READ_TOOLTIP'] = 'read data from uart port.';
Blockly.Msg['COMMUNICATION_UART_DATA_AVAILABLE_TITLE'] = '[uart] Available data';
Blockly.Msg['COMMUNICATION_UART_DATA_AVAILABLE_TOOLTIP'] = 'Returns a boolen (1 if there\'s data to read 0 else).';
// Sensors - common msg
Blockly.Msg["SENSORS_TEMPERATURE"] = "temperature";
Blockly.Msg["SENSORS_TEMPERATURE_IN"] = "in";
Blockly.Msg["SENSORS_HUMIDITY"] = "humidity (%)";
Blockly.Msg["SENSORS_PRESSURE"] = "pressure (Pa)";
Blockly.Msg["SENSORS_ALTITUDE"] = "altitude (m)";
// Sensors - Micro:bit
Blockly.Msg["SENSORS_GETACCELERATION_TITLE"] = "acceleration (mg) %1";
Blockly.Msg["SENSORS_GETACCELERATION_TOOLTIP"] = "Returns the acceleration (in mg) with internal micro:bit accelerometer.";
Blockly.Msg["SENSORS_GETLIGHT_TITLE"] = "light level";
Blockly.Msg["SENSORS_GETLIGHT_TOOLTIP"] = "Returns light level (from 0 to 255) with some of micro:bit screen LED.";
Blockly.Msg["SENSORS_CALIBRATECOMPASS_TITLE"] = "calibrate compass";
Blockly.Msg["SENSORS_CALIBRATECOMPASS_TOOLTIP"] = "Enable to calibrate the internal micro:bit compass. Just shake the board to calibrate it. A 'happy' smiley appears when the calibration is completed.";
Blockly.Msg["SENSORS_GETCOMPASS_TITLE"] = "compass heading (°)";
Blockly.Msg["SENSORS_GETCOMPASS_TOOLTIP"] = "Returns the compass heading (from 0° to 360°) with the internal micro:bit compass.";
Blockly.Msg["SENSORS_ISCOMPASSCALIBRATED_TITLE"] = "compass calibrated ?";
Blockly.Msg["SENSORS_ISCOMPASSCALIBRATED_TOOLTIP"] = "Returns 'True' if the compass calibrated, else return 'False'.";
Blockly.Msg["SENSORS_GETTEMPERATURE_TITLE"] = Blockly.Msg["SENSORS_TEMPERATURE"] + " in %1";
Blockly.Msg["SENSORS_GETTEMPERATURE_TOOLTIP"] = "Returns the temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K) of micro:bit processor.";
Blockly.Msg["SENSORS_GETROTATION_TITLE"] = "rotation (°) %1";
Blockly.Msg["SENSORS_GETROTATION_PITCH"] = "pitch";
Blockly.Msg["SENSORS_GETROTATION_ROLL"] = "roll";
Blockly.Msg["SENSORS_GETROTATION_TOOLTIP"] = "Returns the rotation (from -180° to 180°) with the internal micro:bit accelerometer.";
Blockly.Msg["SENSORS_GETMAGNETICFORCE_TITLE"] = "magnetic field strength %1 (nT)";
Blockly.Msg["SENSORS_GETMAGNETICFORCE_TOOLTIP"] = "Returns the magnetic field strength (in nT) in the choosen direction from internal micro:bit compass.";
// Sensors - Enviro:bit
Blockly.Msg["SENSORS_TCS3472_GETRGB_TITLE"] = "[Enviro:bit - TCS3472] %1";
Blockly.Msg["SENSORS_TCS3472_GETRGB_TOOLTIP"] = IMG_MODULE_ENVIRO_BIT + Blockly.Tooltip.SEP + "Lets you read the level of one of the three primary colors (from 0 to 255) with the integrated color sensor TCS3472 on Enviro:bit shield.";
Blockly.Msg["SENSORS_TCS3472_GETBRIGHTNESS_TITLE"] = "[Enviro:bit - TCS3472] brightness";
Blockly.Msg["SENSORS_TCS3472_GETBRIGHTNESS_TOOLTIP"] = IMG_MODULE_ENVIRO_BIT + Blockly.Tooltip.SEP + "Enable to measure brightness (from 0 to 1000) with TCS3472 sensor of Enviro:bit shield.";
Blockly.Msg["SENSORS_TCS3472_SETLED_TITLE"] = "[Enviro:bit - TCS3472] set LED to state %1";
Blockly.Msg["SENSORS_TCS3472_SETLED_TOOLTIP"] = IMG_MODULE_ENVIRO_BIT + Blockly.Tooltip.SEP + "Enable to control integrated LED of TCS3472 sensor from Enviro:bit shield.";
Blockly.Msg["SENSORS_ENVIROBIT_BME280_GETDATA_TITLE"] = "[Enviro:bit - BME280] %1";
Blockly.Msg["SENSORS_ENVIROBIT_BME280_GETDATA_TOOLTIP"] = IMG_MODULE_ENVIRO_BIT + Blockly.Tooltip.SEP + "Returns the ambient temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K), pressure (in Pa), humidity (in %) or altitude (in m) from BME280 sensor on Enviro:bit shield.";
Blockly.Msg["SENSORS_BME280_TEMP"] = Blockly.Msg["SENSORS_TEMPERATURE"];
Blockly.Msg["SENSORS_BME280_HUM"] = Blockly.Msg["SENSORS_HUMIDITY"];
Blockly.Msg["SENSORS_BME280_PRESS"] = Blockly.Msg["SENSORS_PRESSURE"];
Blockly.Msg["SENSORS_BME280_ALT"] = Blockly.Msg["SENSORS_ALTITUDE"];
Blockly.Msg["SENSORS_ENVIRO_BIT_GETSOUNDLEVEL_TITLE"] = "[Enviro:bit - micro] sound level";
Blockly.Msg["SENSORS_ENVIRO_BIT_GETSOUNDLEVEL_TOOLTIP"] = IMG_MODULE_ENVIRO_BIT + Blockly.Tooltip.SEP + "Take a reading of the sound level (from 0 to 443) which you can use to compare different sound levels.";
Blockly.Msg["SENSORS_ENVIRO_BIT_WAIT_CLAP_TITLE"] = "[Enviro:bit - micro] is listening %1 clap.s in %2 second.s";
Blockly.Msg["SENSORS_ENVIRO_BIT_WAIT_CLAP_TOOLTIP"] = IMG_MODULE_ENVIRO_BIT + Blockly.Tooltip.SEP + "Listen for a high sound level twice in a second, returns True if detected."
Blockly.Msg["SENSORS_WEATHERBIT_BME280_GETDATA_TITLE"] = "[Weather:bit - BME280] %1";
Blockly.Msg["SENSORS_WEATHERBIT_BME280_GETDATA_TOOLTIP"] = IMG_MODULE_WEATHER_BIT + Blockly.Tooltip.SEP + "Returns the ambient temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K), pressure (in Pa), humidity (in %) or altitude (in m) from BME280 sensor on Weather:bit shield.";
Blockly.Msg["SENSORS_WEATHERBIT_GETSOILMOISTURE_TITLE"] = "[Weather:bit] soil moisture";
Blockly.Msg["SENSORS_WEATHERBIT_GETSOILMOISTURE_TOOLTIP"] = IMG_MODULE_WEATHER_BIT_MOSITURE + Blockly.Tooltip.SEP + "Returns measurement (from 0 to 1023) from the moisture sensor (SOIL MOISTURE) on P0.";
Blockly.Msg["SENSORS_WEATHERBIT_ANEMOMETER_GET_SPEED_TITLE"] = "[Weather:bit] speed of wind in %1";
Blockly.Msg["SENSORS_WEATHERBIT_ANEMOMETER_GET_SPEED_TOOLTIP"] = IMG_MODULE_WEATHER_BIT_KIT_MICROBIT + Blockly.Tooltip.SEP + "Returns the wind speed with the anemometer in the chosen unit (in m/s, km/s, inch/s or knots). The anemometer is connected to the RJ45 WIND port of the Weather:bit shield.";
Blockly.Msg["SENSORS_UNIT_M_S"] = "(m/s)";
Blockly.Msg["SENSORS_UNIT_KM_H"] = "(km/h)";
Blockly.Msg["SENSORS_UNIT_INCH_S"] = "(inch/s)";
Blockly.Msg["SENSORS_UNIT_KNOT"] = "(knots)";
Blockly.Msg["SENSORS_WEATHERBIT_WEATHERCOCK_GET_DIRECTION_TITLE"] = "[Weather:bit - wind] wind direction";
Blockly.Msg["SENSORS_WEATHERBIT_WEATHERCOCK_GET_DIRECTION_TOOLTIP"] = IMG_MODULE_WEATHER_BIT_KIT_MICROBIT + Blockly.Tooltip.SEP + "Returns the wind direction (N,S,E,W,NE,NO,SE,SO) in a string. The weather vane plugs with the anemometer on the RJ45 WIND port of the shield Weather:bit.";
Blockly.Msg["SENSORS_WEATHERBIT_RAIN_GAUGE_GET_DUMPS_TITLE"] = "[Weather:bit - rain] rain dumps (mm)";
Blockly.Msg["SENSORS_WEATHERBIT_RAIN_GAUGE_GET_DUMPS_TOOLTIP"] = IMG_MODULE_WEATHER_BIT_KIT_MICROBIT + Blockly.Tooltip.SEP + "Returns the precipitation of water in height of water fallen on the ground reported to a unit of surface. The rain gauge plugs into the RJ45 RAIN port of the Weather:bit shield.";
// Sensors - Kitronik environmental
Blockly.Msg['SENSORS_KITRONIK_BME280_GETDATA_TITLE'] = '[Kitronik env. - BME280] %1';
Blockly.Msg['SENSORS_KITRONIK_BME280_GETDATA_TOOLTIP'] = IMG_SHIELD_KITRONIK_ENV + Blockly.Tooltip.SEP + 'Returns the ambient temperature in degrees Celsius (°C) from -40 to 85°C, Fahrenheit (°F) or Kelvin (K), humidity (in %), pressure (in Pascals), or altitude (in m) thanks to the BME280 sensor of the Kitronik shield.';
Blockly.Msg['SENSORS_KITRONIK_KLIMATE_BME280_GETDATA_TITLE'] = '[Kitronik Klimate - BME280] %1';
Blockly.Msg['SENSORS_KITRONIK_KLIMATE_BME280_GETDATA_TOOLTIP'] = IMG_SHIELD_KITRONIK_KLIMATE + Blockly.Tooltip.SEP + 'Returns the ambient temperature in degrees Celsius (°C) from -40 to 85°C, Fahrenheit (°F) or Kelvin (K), humidity (in %), pressure (in Pascals), or altitude (in m) thanks to the BME280 sensor of the Kitronik shield.';
// Sensors - Kitronic Traffic
Blockly.Msg['SENSORS_LAMPBIT_GETLUMINOSITY_TITLE'] = "[LAMP:BIT] luminosity";
Blockly.Msg['SENSORS_LAMPBIT_GETLUMINOSITY_TOOLTIP'] = IMG_MODULE_LAMPBIT + Blockly.Tooltip.SEP + "Gets luminosity from streetlight phototransistor";
// Sensors - Gas
Blockly.Msg["SENSORS_SGP30_READDATA_TITLE"] = "[SGP30 Sensor] gas %1";
Blockly.Msg["SENSORS_SGP30_READDATA_TOOLTIP"] = IMG_MODULE_SGP30 + Blockly.Tooltip.SEP + "Returns the amount of CO2 (in ppm) or TVOC (in ppb) in the air from sgp30 sensor. Connect sensor on I2C port.";
Blockly.Msg["SENSORS_SGP30_CO2"] = "carbon dioxide (CO2) (ppm)";
Blockly.Msg["SENSORS_SGP30_TVOC"] = "volatile organic compounds (TVOC) (ppb)";
Blockly.Msg["SENSORS_MULTICHANNEL_GETGAS_TITLE"] = "[Multichannel Gas Sensor] gas %1 (ppm)";
Blockly.Msg["SENSORS_MULTICHANNEL_GETGAS_TOOLTIP"] = IMG_MODULE_MULTICHANNEL + Blockly.Tooltip.SEP + "Returns the amount of choosen gas in the air (in ppm) from grove multichannel gas sensor. Connect sensor on I2C port.";
Blockly.Msg["SENSORS_MULTICHANNELV2_GETGAS_TITLE"] = "[Multichannel Gas Sensor v2] gas %1 (V)";
Blockly.Msg["SENSORS_MULTICHANNELV2_GETGAS_TOOLTIP"] = IMG_MODULE_MULTICHANNEL_V2 + Blockly.Tooltip.SEP + "Returns the amount of choosen gas in the air (in V) from grove multichannel gas V2 sensor. Connect sensor on I2C port.";
Blockly.Msg["GAS_CO"] = "carbon monoxide (CO)";
Blockly.Msg["GAS_NO2"] = "nitrogen dioxide (NO2)";
Blockly.Msg["GAS_C2H5OH"] = "ethanol (C2H5OH)";
Blockly.Msg["GAS_H2"] = "dihydrogen (H2)";
Blockly.Msg["GAS_NH3"] = "ammonia (NH3)";
Blockly.Msg["GAS_CH4"] = "methane (CH4)";
Blockly.Msg["GAS_C3H8"] = "propane (C3H8)";
Blockly.Msg["GAS_C4H10"] = "iso-propane (C4H10)";
Blockly.Msg["GAS_VOC"] = "volatile organic compounds (VOC)";
Blockly.Msg["SENSORS_O2_GAS_READDATA_TITLE"] = "[Oxygen Gas Sensor] O2 (%) on pin %1";
Blockly.Msg["SENSORS_O2_GAS_READDATA_TOOLTIP"] = IMG_MODULE_O2 + Blockly.Tooltip.SEP + "Returns O2 concentration (in %) from the grove O2 sensor on pins P0 through P4, or P10.";
Blockly.Msg["SENSORS_SCD30_READDATA_TITLE"] = "[SCD30 Sensor] %1";
Blockly.Msg["SENSORS_SCD30_READDATA_TOOLTIP"] = IMG_MODULE_SCD30 + Blockly.Tooltip.SEP + "Returns CO2 concentration (in ppm), humidity (in %) or temperature in Celsius (°C), Fahrenheit (°F) or Kelvin (K) from the grove SCD30 sensor. Connect sensor on I2C port.";
Blockly.Msg["SENSORS_SCD30_CO2"] = "carbon dioxide (CO2) (ppm)";
Blockly.Msg["SENSORS_SCD30_TEMP"] = Blockly.Msg["SENSORS_TEMPERATURE"];
Blockly.Msg["SENSORS_SCD30_HUM"] = Blockly.Msg["SENSORS_HUMIDITY"];
Blockly.Msg["SENSORS_SCD30_FORCED_CALIBRATION_TITLE"] = "[Capteur SCD30] force recalibration to %1 (ppm)";
Blockly.Msg["SENSORS_SCD30_FORCED_CALIBRATION_TOOLTIP"] = IMG_MODULE_SCD30 + Blockly.Tooltip.SEP + "Force the calibration of the SCD30 sensor to the given value (in ppm). Go outside (where the concentration is around approximately 420 ppm, i.e. clean air), reset the board, then wait 2 minutes. Tip: Use button A or B on the BBC micro:bit board to control the start of calibration. Otherwise, by reconnecting the board, the program launches and performs a calibration again that is not necessarily desired.";
Blockly.Msg["SENSORS_AIR_QUALITY_GETVALUE_TITLE"] = "[Air Quality Sensor] value on pin %1";
Blockly.Msg["SENSORS_AIR_QUALITY_GETVALUE_TOOLTIP"] = IMG_MODULE_AIR_QUALITY + Blockly.Tooltip.SEP + "Returns value of air quality (from 0 to 1023) on pins P0 through P4, or P10.";
Blockly.Msg["SENSORS_HM330X_GETPARTICULE_TITLE"] = "[HM330X Sensor] concentration of particle matter %1 (µg/m3)";
Blockly.Msg["SENSORS_HM330X_GETPARTICULE_TOOLTIP"] = IMG_MODULE_HM330X + Blockly.Tooltip.SEP + "Detect the density of particles in the air with the HM330X sensor. Connect sensor on I2C port.";
Blockly.Msg["SENSORS_HM330X_ATM_PM1"] = "PM1.0";
Blockly.Msg["SENSORS_HM330X_ATM_PM2_5"] = "PM2.5";
Blockly.Msg["SENSORS_HM330X_ATM_PM10"] = "PM10.0";
// Sensors - Climate
Blockly.Msg["SENSORS_BMP280_READDATA_TITLE"] = "[BMP280 Sensor %1] %2";
Blockly.Msg["SENSORS_BMP280_READDATA_TOOLTIP"] = IMG_MODULE_BMP280 + Blockly.Tooltip.SEP + "Returns the ambient temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K), pressure (in Pa). The altitude is initialized at 0 when program is flashed. It use Grove Barometer Sensor (address: 0x77, color: blue) or HW-611 280 sensor (address: 0x76, color: purple). Connect sensor on I2C port.";
Blockly.Msg["SENSORS_BMP280_TEMP"] = Blockly.Msg["SENSORS_TEMPERATURE"];
Blockly.Msg["SENSORS_BMP280_PRESS"] = Blockly.Msg["SENSORS_PRESSURE"];
Blockly.Msg["SENSORS_BMP280_ALT"] = Blockly.Msg["SENSORS_ALTITUDE"];
Blockly.Msg['SENSORS_BME280_GETDATA_TITLE'] = '[BME280 Sensor] %1';
Blockly.Msg['SENSORS_BME280_GETDATA_TOOLTIP'] = IMG_MODULE_BME280 + Blockly.Tooltip.SEP + 'Returns the ambient temperature in degrees Celsius (°C) from -40 to 85 °C, Fahrenheit (°F) or Kelvin (K), humidity (in %), pressure (in Pascal) or altitude (in m) from the BME280 sensor.';
Blockly.Msg["SENSORS_GETGROVEHIGHTEMP_TITLE"] = "[H.T° Sensor] temperature in %1 on pins A0 %2 A1 %3";
Blockly.Msg["SENSORS_GETGROVEHIGHTEMP_TOOLTIP"] = IMG_MODULE_HIGH_TEMPERATURE + Blockly.Tooltip.SEP + "Returns thermocouple temperature dorm 50 to 600 °C with grove high temperature sensor. Connect sensor on analog pins.";
Blockly.Msg["SENSORS_GETGROVEMOISTURE_TITLE"] = "[Moisture Sensor] moisture on pin %1";
Blockly.Msg["SENSORS_GETGROVEMOISTURE_TOOLTIP"] = IMG_MODULE_MOISTURE + Blockly.Tooltip.SEP + "Returns moisture measurement (from 0 to 1023) from the grove moisture sensor on pins P0 through P4, or P10.";
Blockly.Msg['SENSORS_GETGROVECAPACITIVEMOISTURE_TITLE'] = '[Capacitive Moisture Sensor] soil moisture %1';
Blockly.Msg['SENSORS_GETGROVECAPACITIVEMOISTURE_TOOLTIP'] = IMG_MODULE_CAPACITIVE_MOISTURE + Blockly.Tooltip.SEP + 'Returns the moisture (from 0 to 1023) measured by the Grove capacitive moisture sensor on pins P0/P14, P1/P15, or P2/P16.';
Blockly.Msg["SENSORS_GETGROVETEMPERATURE_TITLE"] = "[Temperature Sensor] temperature in %1 on pin %2";
Blockly.Msg["SENSORS_GETGROVETEMPERATURE_TOOLTIP"] = IMG_MODULE_TEMPERATURE + Blockly.Tooltip.SEP + "Returns grove temperature sensor value in Celius degree (°C), Fahrenheit (°F) or Kelvin (K) on analog pins P0 through P4, or P10.";
Blockly.Msg['SENSORS_BAROMETER_READDATA_TITLE'] = '[Barometer] %1';
Blockly.Msg['SENSORS_BAROMETER_READDATA_TOOLTIP'] = IMG_MODULE_SHT35 + Blockly.Tooltip.SEP + 'Returns temperature in Celsius (°C), Fahrenheit (°F), or Kelvin (K), pressure (in hPa), or altitude (in m) using the barometer. Connect the sensor to an I2C port.';
Blockly.Msg["SENSORS_DHT_READDATA_TITLE"] = "[DHT11 Sensor] %1 on pin %2 with %3";
Blockly.Msg["SENSORS_DHT_READDATA_TOOLTIP"] = IMG_MODULE_DHT11 + Blockly.Tooltip.SEP + "Returns temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K), or air humidity (in %) from dht11 sensor on digital pins P0 up through P20. The sensor performs a new measurement every 2 seconds with the micro:bit v1. It performs a new measurement every 20 seconds with the micro:bit v2.";
Blockly.Msg["SENSORS_TH02_READDATA_TITLE"] = "[TH02 Sensor] %1";
Blockly.Msg["SENSORS_TH02_READDATA_TOOLTIP"] = IMG_MODULE_TH02 + Blockly.Tooltip.SEP + "Returns temperature in Celsius degree (°C), Fahrenheit (°F) or Kelvin (K), or air humidity (in %) from TH02 sensor. Connect sensor on I2C port.";
Blockly.Msg["SENSORS_SHT31_READDATA_TITLE"] = "[SHT31 Sensor] %1";
Blockly.Msg["SENSORS_SHT31_READDATA_TOOLTIP"] = IMG_MODULE_SHT31 + Blockly.Tooltip.SEP + "Returns temperature in Celsius degree (°C), Fahrenheit (°F) or Kelvin (K), or air humidity (in %) from SHT31 sensor. Connect sensor on I2C port.";
Blockly.Msg['SENSORS_SHT35_READDATA_TITLE'] = '[SHT35 Sensor] %1';
Blockly.Msg['SENSORS_SHT35_READDATA_TOOLTIP'] = IMG_MODULE_SHT35 + Blockly.Tooltip.SEP + 'Returns temperature in Celsius (°C), Fahrenheit (°F), or Kelvin (K), or humidity (in %) using the SHT35 sensor. Connect the sensor to an I2C port.';
Blockly.Msg["SENSORS_MPX5700AP_GETPRESSURE_TITLE"] = "[MPX5700AP Sensor] pressure (kPa) on pin %1";
Blockly.Msg["SENSORS_MPX5700AP_GETPRESSURE_TOOLTIP"] = IMG_MODULE_MPX5700AP + Blockly.Tooltip.SEP + "Enable to read pressure of grove sensor with TI-83 calculator.";
Blockly.Msg["SENSORS_MPX5700AP_CALIBRATE_TITLE"] = "[MPX5700AP Sensor] calibrate pressure sensor m %1 b %2";
Blockly.Msg["SENSORS_MPX5700AP_CALIBRATE_TOOLTIP"] = IMG_MODULE_MPX5700AP + Blockly.Tooltip.SEP + "Enable to calibrate pressure sensor grove with TI-83 calculator.";
Blockly.Msg["SENSORS_GETGROVEWATER_TITLE"] = "[Water Sensor] water amount on pin %1";
Blockly.Msg["SENSORS_GETGROVEWATER_TOOLTIP"] = IMG_MODULE_WATER + Blockly.Tooltip.SEP + "Returns water amount (from 0 to 255) from the grove water sensor on pins P0 through P4, or P10.";
Blockly.Msg["SENSORS_GETRAINGAUGE_TITLE"] = "[Rain Gauge Sensor] state value on pin %1";
Blockly.Msg["SENSORS_GETRAINGAUGE_TOOLTIP"] = IMG_MODULE_RAIN_GAUGE + Blockly.Tooltip.SEP + "Returns rain gauge grove state (1 if it's raining or 0 else) on digital pins P0 up through P20.";
Blockly.Msg["SENSORS_GETANEMOMETER_TITLE"] = "[Anemometer] state value on pin %1";
Blockly.Msg["SENSORS_GETANEMOMETER_TOOLTIP"] = IMG_MODULE_ANEMOMETER + Blockly.Tooltip.SEP + "Returns grove anemometer state (twice state HIGH on each rotation) on digital pins P0 up through P20.";
// Sensors - Sound & Light
Blockly.Msg["SENSORS_GETGROVELIGHT_TITLE"] = "[Light Sensor] light level on pin %1";
Blockly.Msg["SENSORS_GETGROVELIGHT_TOOLTIP"] = IMG_MODULE_LIGHT + Blockly.Tooltip.SEP + "Returns grove light sensor value (from 0 to 1023) on analog pins P0 through P4, or P10.";
Blockly.Msg["SENSORS_SI1145_GETLIGHT_TITLE"] = "[SI1145 Sensor] get light %1";
Blockly.Msg["SENSORS_SI1145_GETLIGHT_TOOLTIP"] = IMG_MODULE_SI1145 + Blockly.Tooltip.SEP + "Returns Ultraviolet light index, IR light (in lumen) or Visible light (in lumen) from si1145 sensor. It works with Grove Sunlight Sensor or GY1145 sensor. Connect sensor on I2C port.";
Blockly.Msg["SENSORS_SI1145_UV"] = "UV index";
Blockly.Msg["SENSORS_SI1145_VISIBLE"] = "visible (lumen)";
Blockly.Msg["SENSORS_SI1145_IR"] = "infrared (lumen)";
Blockly.Msg["SENSORS_GETUVINDEX_TITLE"] = "[Ultraviolet Sensor] UV index on pin %1";
Blockly.Msg["SENSORS_GETUVINDEX_TOOLTIP"] = IMG_MODULE_UV + Blockly.Tooltip.SEP + "Returns UV index, for waves between 240 nm and 380 nm, with UV grove sensor on analog pins A0 to A5.";
Blockly.Msg["SENSORS_GROVECOLOR_GETDATA_TITLE"] = "[Color Sensor] %1";
Blockly.Msg["SENSORS_GROVECOLOR_GETDATA_TOOLTIP"] = IMG_MODULE_I2C_COLOR + Blockly.Tooltip.SEP + "Lets you read the level of one of the three primary colors with the Grove color sensor, returns a level between 0 and 255. Connect sensor on I2C port.";
Blockly.Msg["SENSORS_GETGROVESOUND_TITLE"] = "[Sound Sensor] sound level (dB) on pin %1 ";
Blockly.Msg["SENSORS_GETGROVESOUND_TOOLTIP"] = IMG_MODULE_SOUND_LOUDNESS + Blockly.Tooltip.SEP + "Returns grove sound sensor value (from 0 to 1023 converted in dB) on analog pins P0 through P4, or P10.";
// Sensors - Distance & Motion
Blockly.Msg["SENSORS_GETGROVEULTRASONIC_TITLE"] = "[Ultrasonic Sensor %1] get %2";
Blockly.Msg["SENSORS_GETGROVEULTRASONIC_TOOLTIP"] = IMG_MODULE_ULTRASONIC + Blockly.Tooltip.SEP + "Returns distance measurement (in cm) or round-trip duration (in µs) from the ultrasonic ranger sensor on digital pins P0 up through P20. Warning, if it's a grove sensor, TRIG and ECHO are both connected to SIG.";
Blockly.Msg["SENSORS_ULTRASONIC_DISTANCE"] = "distance (cm)";
Blockly.Msg["SENSORS_ULTRASONIC_DURATION"] = "round-trip duration (µs)";
Blockly.Msg["SENSORS_ULTRASONIC_1PIN"] = "on pin";
Blockly.Msg["SENSORS_ULTRASONIC_2PINS"] = "on pins ";
Blockly.Msg['SENSORS_VL53L0X_GETRANGEMILLIMETERS_TITLE'] = 'قيمة المسافة في %1 [Time Of Flight]';
Blockly.Msg['SENSORS_VL53L0X_GETRANGEMILLIMETERS_TOOLTIP'] = IMG_MODULE_VL53L0X + Blockly.Tooltip.SEP + 'إرجاع قياسات المسافة من مستشعر TOF على منفذ I2C';
Blockly.Msg["SENSORS_GETGESTURE_TITLE"] = "[Gesture Sensor] gesture type";
Blockly.Msg["SENSORS_GETGESTURE_TOOLTIP"] = IMG_MODULE_GESTURE + Blockly.Tooltip.SEP + "Returns the gesture type ('right', 'left', 'up', 'down', 'forward', 'backward', 'clockwise', 'anticlockwise') from grove gesture sensor. Connect sensor on I2C port.";
Blockly.Msg["SENSORS_ONGESTUREDETECTED_TITLE"] = "[Gesture Sensor] on gesture %1 detected then";
Blockly.Msg["SENSORS_ONGESTUREDETECTED_TOOLTIP"] = IMG_MODULE_GESTURE + Blockly.Tooltip.SEP + "Execute instructions if selected gesture id detected by the grove gesture sensor. Connect sensor on I2C port.";
Blockly.Msg["SENSORS_GESTURE_RIGHT"] = "right";
Blockly.Msg["SENSORS_GESTURE_LEFT"] = "left";
Blockly.Msg["SENSORS_GESTURE_UP"] = "up";
Blockly.Msg["SENSORS_GESTURE_DOWN"] = "down";
Blockly.Msg["SENSORS_GESTURE_FORWARD"] = "forward";
Blockly.Msg["SENSORS_GESTURE_BACKWARD"] = "backward";
Blockly.Msg["SENSORS_GESTURE_CLOCKWISE"] = "clockwise";
Blockly.Msg["SENSORS_GESTURE_ANTICLOCKWISE"] = "anticlockwise";
Blockly.Msg["SENSORS_GESTURE_WAVE"] = "wave";
Blockly.Msg["SENSORS_GETGROVELINEFINDER_TITLE"] = "[Line Finder Sensor] line finder state on pin %1";
Blockly.Msg["SENSORS_GETGROVELINEFINDER_TOOLTIP"] = IMG_MODULE_LINE_FINDER + Blockly.Tooltip.SEP + "Returns grove touch sensor state (0 or 1) on digital pins P0 up through P20.";
Blockly.Msg["SENSORS_GETGROVEMOTION_TITLE"] = "[PIR Motion Sensor] movement state value on pin %1";
Blockly.Msg["SENSORS_GETGROVEMOTION_TOOLTIP"] = IMG_MODULE_MOTION + Blockly.Tooltip.SEP + "Returns grove PIR Motion state (0 if there is movement or 1 else) on digital pins P0 up through P20.";
Blockly.Msg["SENSORS_GETPIEZOVIBRATION_TITLE"] = "[Piezo Vibration Sensor] state value on pin %1";
Blockly.Msg["SENSORS_GETPIEZOVIBRATION_TOOLTIP"] = IMG_MODULE_VIBRATIONS + Blockly.Tooltip.SEP + "Returns vibration state (0 or 1) from piezo vibration grove sensor on digital pins P0 up through P20.";
Blockly.Msg["SENSORS_GETGROVETILT_TITLE"] = "[Tilt Module] tilt state on pin %1";
Blockly.Msg["SENSORS_GETGROVETILT_TOOLTIP"] = IMG_MODULE_TILT + Blockly.Tooltip.SEP + "Returns grove tilt state (0 or 1) on digital pins P0 up through P20.";
// Other sensors
Blockly.Msg["SENSORS_GETGROVEBUTTON_TITLE"] = "[Button Module] button %1 on pin %2";
Blockly.Msg["SENSORS_GETGROVEBUTTON_TOOLTIP"] = IMG_MODULE_BUTTON + Blockly.Tooltip.SEP + "Returns numeric value of grove button (0/1 or 0V/3.3V) on digital pins P0 up through P20.";
Blockly.Msg["SENSORS_GETGROVEBUTTON_VOLTAGE"] = "voltage";
Blockly.Msg["SENSORS_GETGROVEBUTTON_STATE"] = "state";
Blockly.Msg['SENSORS_GET_EAR-CLIP_HEART_RATE_TITLE'] = '[Heart Rate Sensor] bpm on pin %1';
Blockly.Msg['SENSORS_GET_EAR-CLIP_HEART_RATE_TOOLTIP'] = IMG_MODULE_EAR_CLIP + Blockly.Tooltip.SEP + 'Returns the number of beats per minute (bpm) measured by the Grove heart rate sensor.';
Blockly.Msg['SENSORS_FSR402_GETFORCE_TITLE'] = '[Force sensor] value on pin %1';
Blockly.Msg['SENSORS_FSR402_GETFORCE_TOOLTIP'] = IMG_MODULE_FORCE + Blockly.Tooltip.SEP + 'Returns the force applied to the round sensor using the FSR402 sensor on analog pins (P0 to P4 or P10).';
Blockly.Msg['SENSORS_EMG_DETECTOR_TITLE'] = '[EMG Detector] value on pin %1';
Blockly.Msg['SENSORS_EMG_DETECTOR_TOOLTIP'] = IMG_MODULE_EMG_DETECTOR + Blockly.Tooltip.SEP + 'Measures the electrical currents accompanying muscle activity on analog pins (P0 to P4 or P10).';
Blockly.Msg['SENSORS_GET_WATER_LEVEL_TITLE'] = '[Water Level] value';
Blockly.Msg['SENSORS_GET_WATER_LEVEL_TOOLTIP'] = 'Measures water level as a percentage (from 0 to 100%) on the I2C port.';
// Actuators
Blockly.Msg['ACTUATORS_SERVO_SETANGLE_TITLE'] = '[Servo Motor] set angle to %1 ° on pin %2';
Blockly.Msg['ACTUATORS_SERVO_SETANGLE_TOOLTIP'] = IMG_MODULE_SERVO + Blockly.Tooltip.SEP + 'Allows you to control the angle of a servo motor (from 0 to 180) on digital pins P0 to P20. Please note that the setup must be powered by a battery to provide enough current to the servo motor.';
Blockly.Msg['ACTUATORS_CONTINUOUS_SERVO_SETSPEED_TITLE'] = '[Continuous Servo] set speed to %1 (%) direction %2 on pin %3';
Blockly.Msg['ACTUATORS_CONTINUOUS_SERVO_SETSPEED_TOOLTIP'] = IMG_MODULE_CONTINUOUS_SERVO + Blockly.Tooltip.SEP + 'Allows you to control the speed (from 0 to 100%) of a continuous servo motor on PWM pins.';
Blockly.Msg['ACTUATORS_MOTOR_SETPOWER_TITLE'] = '[Motor] set power to %1 on pin %2';
Blockly.Msg['ACTUATORS_MOTOR_SETPOWER_TOOLTIP'] = IMG_MODULE_MOTOR + Blockly.Tooltip.SEP + 'Allows you to control the power of a motor (from 0 to 1023) on digital pins P0 to P20. Please note that the setup must be powered by a battery to provide enough current to the motor.';
Blockly.Msg["ACTUATORS_FAN_SETPOWER_TITLE"] = "[Fan] set power to %1 on pin %2";
Blockly.Msg["ACTUATORS_FAN_SETPOWER_TOOLTIP"] = IMG_MODULE_FAN + Blockly.Tooltip.SEP + "Enable to control mini fan power (from 0 to 1023) on digital pins P0 up through P20.";
Blockly.Msg['ACTUATORS_KITRONIK_CONTROLMOTOR_TITLE'] = '[Kitronik Shield] control motor %1 direction %2 speed %3';
Blockly.Msg['ACTUATORS_KITRONIK_CONTROLMOTOR_TOOLTIP'] = IMG_SHIELD_KITRONIK + Blockly.Tooltip.SEP + 'Allows you to control MOTOR1, MOTOR2, or both by changing the direction (↻: FORWARD, ↺: BACKWARD) or speed (from 0 to 100%) of the Kitronik motor shield for BBC micro:bit. The shield\'s power supply should be between 3V and 10V.';
Blockly.Msg['ACTUATORS_KITRONIK_STOPMOTOR_TITLE'] = '[Kitronik Shield] stop motor %1';
Blockly.Msg['ACTUATORS_KITRONIK_STOPMOTOR_TOOLTIP'] = IMG_SHIELD_KITRONIK + Blockly.Tooltip.SEP + 'Allows you to stop MOTOR1, MOTOR2, or both on the Kitronik motor shield for BBC micro:bit. The shield\'s power supply should be between 3V and 10V.';
Blockly.Msg['ACTUATORS_KITRONIK_MOTOR_BOTH'] = 'both';
Blockly.Msg['ACTUATORS_GROVERELAY_CONTROL_TITLE'] = '[Relay Module] control relay to state %1 on pin %2';
Blockly.Msg['ACTUATORS_GROVERELAY_CONTROL_TOOLTIP'] = IMG_MODULE_RELAY + Blockly.Tooltip.SEP + 'Allows you to control the state of the relay (0 or 1) on digital pins P0 to P20.';
Blockly.Msg['ACTUATORS_MOSFET_SETSTATE_TITLE'] = '[MOSFET] set state to %1 on pin %2';
Blockly.Msg['ACTUATORS_MOSFET_SETSTATE_TOOLTIP'] = IMG_MODULE_MOSFET + Blockly.Tooltip.SEP + 'Allows you to control the state of the MOSFET transistor (0 or 1) on a PWM pin.';
Blockly.Msg['ACTUATORS_MOSFET_SETPERCENTVALUE_TITLE'] = '[MOSFET] set power to %1 (%) on pin %2';
Blockly.Msg['ACTUATORS_MOSFET_SETPERCENTVALUE_TOOLTIP'] = IMG_MODULE_MOSFET + Blockly.Tooltip.SEP + 'Allows you to control the output power of the MOSFET transistor (from 0 to 100%) on a PWM pin.';
Blockly.Msg['ACTUATORS_GROVEVIBRATIONMOTOR_CONTROL_TITLE'] = '[Vibration Motor] control motor to state %1 on pin %2';
Blockly.Msg['ACTUATORS_GROVEVIBRATIONMOTOR_CONTROL_TOOLTIP'] = IMG_MODULE_VIBRATION_MOTOR + Blockly.Tooltip.SEP + 'Allows you to activate or deactivate the grove vibration motor (0 or 1) on digital pins P0 to P20.';
Blockly.Msg['ACTUATORS_GROVEELECTROMAGNET_CONTROL_TITLE'] = '[Electromagnet] control to state %1 on pin %2';
Blockly.Msg['ACTUATORS_GROVEELECTROMAGNET_CONTROL_TOOLTIP'] = IMG_MODULE_ELECTROMAGNET + Blockly.Tooltip.SEP + 'Allows activating or deactivating the electromagnet (HIGH or LOW) on digital pins.';
Blockly.Msg['ACTUATORS_GROVEWATERATOMIZATION_CONTROL_TITLE'] = '[Water Atomizer] control to state %1 on pin %2';
Blockly.Msg['ACTUATORS_GROVEWATERATOMIZATION_CONTROL_TOOLTIP'] = IMG_MODULE_WATER_ATOMIZER + Blockly.Tooltip.SEP + 'Allows activating or deactivating the water atomizer (HIGH or LOW) on digital pins.';
// actuators - Kitronic Traffic
Blockly.Msg['ACTUATORS_ACCESSBIT_CONTROLBARRIER_TITLE'] = "[ACCESS:BIT] %1 the gate";
Blockly.Msg['ACTUATORS_ACCESSBIT_CONTROLBARRIER_RAISE'] = "raise";
Blockly.Msg['ACTUATORS_ACCESSBIT_CONTROLBARRIER_LOWER'] = "lower";
Blockly.Msg['ACTUATORS_ACCESSBIT_CONTROLBARRIER_TOOLTIP'] = IMG_MODULE_ACCESSBIT + Blockly.Tooltip.SEP + "Controls gate position"
Blockly.Msg['ACTUATORS_ACCESSBIT_CONTROLBUZZER_TITLE'] = "[ACCESS:BIT] Buzzer on for %1 ms";
Blockly.Msg['ACTUATORS_ACCESSBIT_CONTROLBUZZER_TOOLTIP'] = IMG_MODULE_ACCESSBIT + Blockly.Tooltip.SEP + "Vibrates the buzzer for the set time"
// MUSIC
Blockly.Msg['ACTUATORS_MUSIC_PLAYMUSIC_TITLE'] = '[Music] play music %1 on %2';
Blockly.Msg['ACTUATORS_MUSIC_PLAYMUSIC_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Allows you to play music with the buzzer or grove speaker module on digital pins P0 to P20.';
Blockly.Msg['ACTUATORS_MUSIC_PLAYSONG_TITLE'] = '[Music] play melody %1 %2 on %3';
Blockly.Msg['ACTUATORS_MUSIC_PLAYSONG_ONCE'] = 'once';
Blockly.Msg['ACTUATORS_MUSIC_PLAYSONG_LOOP'] = 'loop';
Blockly.Msg['ACTUATORS_MUSIC_PLAYSONG_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Allows you to play a melody with a buzzer or speaker module on digital pins P0 to P20.';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_NOTES_TITLE'] = '[Music] play notes on';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_NOTES_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Allows you to play notes with a buzzer or speaker module on digital pins P0 to P20.';
Blockly.Msg['ACTUATORS_MUSIC_NOTE_TITLE'] = 'note %1 at octave %2 duration %3';
Blockly.Msg['ACTUATORS_MUSIC_NOTE_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Allows you to define a note with its octave and duration.';
Blockly.Msg['NOTE_C'] = 'C';
Blockly.Msg['NOTE_C_SHARP'] = 'C#';
Blockly.Msg['NOTE_D'] = 'D';
Blockly.Msg['NOTE_D_SHARP'] = 'D#';
Blockly.Msg['NOTE_E'] = 'E';
Blockly.Msg['NOTE_F'] = 'F';
Blockly.Msg['NOTE_F_SHARP'] = 'F#';
Blockly.Msg['NOTE_G'] = 'G';
Blockly.Msg['NOTE_G_SHARP'] = 'G#';
Blockly.Msg['NOTE_A'] = 'A';
Blockly.Msg['NOTE_A_SHARP'] = 'A#';
Blockly.Msg['NOTE_B'] = 'B';
Blockly.Msg['MUSIC_SILENCE'] = 'Silence';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_FREQUENCY_TITLE'] = '[Music] play frequency %1 for %2 (ms) on %3';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_FREQUENCY_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Allows you to play a frequency on the built-in micro:bit speaker or with a buzzer (or speaker) module on digital pins P0 to P20.';
Blockly.Msg['ACTUATORS_MUSIC_STOP_TITLE'] = '[Music] stop music on %1';
Blockly.Msg['ACTUATORS_MUSIC_STOP_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Allows you to stop the currently playing music on the built-in speaker or buzzer on digital pins P0 to P20.';
Blockly.Msg['ACTUATORS_MUSIC_SETVOLUME_TITLE'] = '[Music] set volume to %1';
Blockly.Msg['ACTUATORS_MUSIC_SETVOLUME_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Allows you to change the volume of the built-in micro:bit speaker from 0 to 255.';
Blockly.Msg['ACTUATORS_MUSIC_SETTEMPO_TITLE'] = '[Music] set beats per measure %1 and tempo %2';
Blockly.Msg['ACTUATORS_MUSIC_SETTEMPO_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Allows you to set the number of beats per measure and the tempo of the music played by the music library functions.';
Blockly.Msg['ACTUATORS_MUSIC_GETTEMPO_TITLE'] = '[Music] music tempo';
Blockly.Msg['ACTUATORS_MUSIC_GETTEMPO_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Allows you to get the tempo of the music as a tuple of integers (ticks, bpm).';
Blockly.Msg['ACTUATORS_KITRONIK_PLAY_FREQUENCY_TITLE'] = '[Kitronik Env. Shield] play frequency %1 for %2 ms';
Blockly.Msg['ACTUATORS_KITRONIK_PLAY_FREQUENCY_TOOLTIP'] = IMG_SHIELD_KITRONIK_ENV + Blockly.Tooltip.SEP + 'Allows you to play a frequency on the built-in speaker of the Kitronik environmental shield.';
Blockly.Msg['ACTUATORS_SPEECH_SAYSOMETHING_TITLE'] = '[Speech] say %1 speed %2 pitch %3';
Blockly.Msg['ACTUATORS_SPEECH_SAYSOMETHING_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Allows you to say a phrase with the micro:bit. You can adjust the speed and pitch of the voice (from 0 to 255).';
// Robots - Remote Control
Blockly.Msg['ROBOTS_REMOTECONTROL_ONCOMMANDRECEIVED_TITLE'] = 'if command %1';
Blockly.Msg['ROBOTS_REMOTECONTROL_ONCOMMANDRECEIVED_RECEIVED_THEN'] = 'received then';
Blockly.Msg['ROBOTS_REMOTECONTROL_ONCOMMANDRECEIVED_BLACK_NEC_DETECTED_THEN'] = 'received by NEC basic black remote control then';
Blockly.Msg['ROBOTS_REMOTECONTROL_ONCOMMANDRECEIVED_BLACK_NEC_TOOLTIP'] = IMG_MODULE_BASIC_BLACK_REMOTE_IR_RECEIVER + Blockly.Tooltip.SEP + 'Allows you to execute instructions on command received by IR transmission from NEC basic black remote control.';
Blockly.Msg['ROBOTS_REMOTECONTROL_ONCOMMANDRECEIVED_CAR_MP3_GRAY_DETECTED_THEN'] = 'received by NEC <br>Car mp3 gray remote control<br> then';
Blockly.Msg['ROBOTS_REMOTECONTROL_ONCOMMANDRECEIVED_CAR_MP3_GRAY_TOOLTIP'] = IMG_MODULE_CAR_MP3_GRAY_REMOTE_IR_RECEIVER + Blockly.Tooltip.SEP + 'Allows you to execute instructions on command received by IR transmission from NEC Car mp3 gray remote control.';
Blockly.Msg['REMOTE_NEC_BUTTON'] = 'pad ';
Blockly.Msg['REMOTE_NEC_BUTTON_UP'] = 'up';
Blockly.Msg['REMOTE_NEC_BUTTON_DOWN'] = 'down';
Blockly.Msg['REMOTE_NEC_BUTTON_LEFT'] = 'left';
Blockly.Msg['REMOTE_NEC_BUTTON_RIGHT'] = 'right';
Blockly.Msg['REMOTE_NEC_BUTTON_BACK'] = 'back';
// Robots - Maqueen
Blockly.Msg['ROBOTS_MAQUEEN_RIGHT'] = 'Right';
Blockly.Msg['ROBOTS_MAQUEEN_LEFT'] = 'Left';
Blockly.Msg['ROBOTS_MAQUEEN_RIGHT&LEFT'] = 'Right & Left';
Blockly.Msg['ROBOTS_MAQUEEN_ULTRASONICRANGER_TITLE'] = '[Maqueen] ultrasonic %1';
Blockly.Msg['ROBOTS_MAQUEEN_ULTRASONICRANGER_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Returns distance value (in cm) or the round-trip duration of wave (in μs) from any object to maqueen robot with ultrasonic range sensor.';
Blockly.Msg['ROBOTS_MAQUEEN_ULTRASONIC_DISTANCE'] = 'distance (cm)';
Blockly.Msg['ROBOTS_MAQUEEN_ULTRASONIC_DURATION'] = 'round-trip duration (μs)';
Blockly.Msg['ROBOTS_MAQUEEN_CONTROLLED_TITLE'] = '[Maqueen] control red LED %1 to state %2';
Blockly.Msg['ROBOTS_MAQUEEN_CONTROLLED_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to control LED Right or Left state value of maqueen robot.';
Blockly.Msg['ROBOTS_MAQUEEN_GO_TITLE'] = '[Maqueen] control robot %1 speed %2';
Blockly.Msg['ROBOTS_MAQUEEN_GO_FORWARD'] = 'forward';
Blockly.Msg['ROBOTS_MAQUEEN_GO_REVERSE'] = 'backward';
Blockly.Msg['ROBOTS_MAQUEEN_GO_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to control car running (FORWARD/BACKWARD) and speed (from 0 to 255) of maqueen robot.';
Blockly.Msg['ROBOTS_MAQUEEN_CONTROLMOTOR_TITLE'] = '[Maqueen] control motor %1 direction %2 speed %3';
Blockly.Msg['ROBOTS_MAQUEEN_CONTROLMOTOR_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to control right motor (I2C address : 0x02) and left motor (I2C address : 0x00) changing direction (↻ : FOWARD, ↺ : REVERSE) or speed (from 0 to 255) of maqueen robot.';
Blockly.Msg['ROBOTS_MAQUEEN_ROTATE_TITLE'] = '[Maqueen] rotate %1 speed %2';
Blockly.Msg['ROBOTS_MAQUEEN_ROTATE_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to control right motor (I2C address : 0x02) and left motor (I2C address : 0x00) changing direction (↻ : FOWARD, ↺ : REVERSE) or speed (from 0 to 255) of maqueen robot.';
Blockly.Msg['ROBOTS_MAQUEEN_STOPMOTORS_TITLE'] = '[Maqueen] stop motor %1';
Blockly.Msg['ROBOTS_MAQUEEN_STOPMOTORS_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to stop right, left or both motors of maqueen robot.';
Blockly.Msg['ROBOTS_MAQUEEN_SETSERVOANGLE_TITLE'] = '[Maqueen] set servo %1 to angle %2 °';
Blockly.Msg['ROBOTS_MAQUEEN_SETSERVOANGLE_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to control servomotor S1 (I2C address : 0x14) and S2 (I2C address : 0x15) by setting angle (from 0 to 180) of maqueen robot.';
Blockly.Msg['ROBOTS_MAQUEEN_S1'] = 'S1';
Blockly.Msg['ROBOTS_MAQUEEN_S2'] = 'S2';
Blockly.Msg['ROBOTS_MAQUEEN_SERVO_BOTH'] = 'both';
Blockly.Msg['ROBOTS_MAQUEEN_MOVE_ONE_SQUARE_FORWARD_TITLE'] = '[Maqueen] move one square forward';
Blockly.Msg['ROBOTS_MAQUEEN_MOVE_ONE_SQUARE_FORWARD_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Move the Maqueen robot one square forward.';
Blockly.Msg['ROBOTS_MAQUEEN_MOVE_ONE_SQUARE_BACKWARD_TITLE'] = '[Maqueen] move back one square';
Blockly.Msg['ROBOTS_MAQUEEN_MOVE_ONE_SQUARE_BACKWARD_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Move the Maqueen robot back one square.';
Blockly.Msg['ROBOTS_MAQUEEN_TURN_LEFT_TITLE'] = '[Maqueen] rotate left';
Blockly.Msg['ROBOTS_MAQUEEN_TURN_LEFT_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Turn the Maqueen robot to the left.';
Blockly.Msg['ROBOTS_MAQUEEN_TURN_RIGHT_TITLE'] = '[Maqueen] rotate right';
Blockly.Msg['ROBOTS_MAQUEEN_TURN_RIGHT_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Turn the Maqueen robot to the right.';
Blockly.Msg['ROBOTS_MAQUEEN_STOP_ROBOT_TITLE'] = '[Maqueen] stop the robot';
Blockly.Msg['ROBOTS_MAQUEEN_STOP_ROBOT_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Stop motors of the Maqueen robot.';
Blockly.Msg['ROBOTS_MAQUEEN_BLINK_ROBOT_TITLE'] = '[Maqueen] blink the robot';
Blockly.Msg['ROBOTS_MAQUEEN_BLINK_ROBOT_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Allows you to set blinking Maqueen robot.';
Blockly.Msg['ROBOTS_MAQUEEN_READPATROL_TITLE'] = '[Maqueen] read line patrol %1';
Blockly.Msg['ROBOTS_MAQUEEN_READPATROL_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to read state of line patrol sensor of maqueen robot. The block returns 0 if the sensor is above the line.';
Blockly.Msg['ROBOTS_MAQUEEN_SETNEOPIXEL_TITLE'] = '[Maqueen] set color R %2 G %3 B %4 on LED %1';
Blockly.Msg['ROBOTS_MAQUEEN_SETNEOPIXEL_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to control each LED color ([R,G,B] from 0 to 255) of Maqueen neopixel (P15).';
Blockly.Msg['ROBOTS_MAQUEEN_SETPALETTECOLOR_TITLE'] = '[Maqueen] set color %2 on LED %1';
Blockly.Msg['ROBOTS_MAQUEEN_SETPALETTECOLOR_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to control each LED color of Maqueen neopixel (P15). Choice color in the palette.';
Blockly.Msg['ROBOTS_MAQUEEN_SETRAINBOW_TITLE'] = '[Maqueen] Rainbow';
Blockly.Msg['ROBOTS_MAQUEEN_SETRAINBOW_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to show a rainbow on Maqueen RGB LED (P15).';
Blockly.Msg['ROBOTS_MAQUEEN_SETBUZZER_TITLE'] = '[Maqueen] set buzzer at frequency %1 during %2 (ms)';
Blockly.Msg['ROBOTS_MAQUEEN_SETBUZZER_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to control Maqueen buzzer at any frequency (P0).';
Blockly.Msg['ROBOTS_MAQUEEN_PLAYMUSIC_TITLE'] = '[Maqueen] play music %1';
Blockly.Msg['ROBOTS_MAQUEEN_PLAYMUSIC_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to play music on Maqueen buzzer (P0).';
Blockly.Msg['ROBOTS_MAQUEEN_DECODEIRRECEIVER_TITLE'] = '[Maqueen] decode the infrared receiver';
Blockly.Msg['ROBOTS_MAQUEEN_DECODEIRRECEIVER_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Enable to do a reading of infrared receiver connected to P16 of maqueen robot.';
Blockly.Msg['ROBOTS_MAQUEEN_GETIRCODE_TITLE'] = '[Maqueen] code from infrared receiver';
Blockly.Msg['ROBOTS_MAQUEEN_GETIRCODE_TOOLTIP'] = IMG_ROBOT_MAQUEEN + Blockly.Tooltip.SEP + 'Get the hexadecimal code received by infrared receiver from maqueen robot.';
//Robots - MaqueenPlus
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_V2_ULTRASONICRANGER_TITLE'] = '[MaqueenPlus v2] %1';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_V2_ULTRASONICRANGER_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Returns the distance (in cm) or the round-trip time (in μs) of the wave between an object and the MaqueenPlus robot thanks to the ultrasonic sensor.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_ULTRASONICRANGER_TRIG_ECHO_TITLE'] = '[MaqueenPlus %1] %2 TRIG %3 ECHO %4';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_ULTRASONICRANGER_TRIG_ECHO_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Returns the distance (in cm) or the round-trip time (in μs) of the wave between an object and the MaqueenPlus robot thanks to the ultrasonic sensor connected to the indicated digital pins.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_V1_READPATROL_TITLE'] = '[MaqueenPlus v1] line sensor state %1';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_V1_READPATROL_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Allows reading the state of one of the MaqueenPlus robot\'s line-following sensors. The block returns 1 if the sensor is above the line.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_V2_READPATROL_TITLE'] = '[MaqueenPlus v2] line sensor state %1';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_V2_READPATROL_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Allows reading the state of one of the MaqueenPlus robot\'s line-following sensors. The block returns 0 if the sensor is above the line.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_LEFT_REAR'] = "left rear";
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_LEFT'] = "left";
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_MIDDLE_LEFT'] = "middle left";
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_MIDDLE'] = "middle";
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_MIDDLE_RIGHT'] = "middle right";
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_RIGHT'] = "right";
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_RIGHT_REAR'] = "right rear";
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_CONTROLLED_TITLE'] = '[MaqueenPlus %1] control the front red LED %2 state %3';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_CONTROLLED_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Allows controlling the state of the left or right front red LED of the MaqueenPlus robot.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_LED_LEFT'] = "left";
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_LED_RIGHT'] = "right";
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_LED_LEFT&RIGHT'] = "left & right";
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_GO_TITLE'] = '[MaqueenPlus %1] control the robot %2 speed %3';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_GO_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Allows controlling the movement (FORWARD/BACKWARD) as well as the speed (from 0 to 255) of the MaqueenPlus robot.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_ROTATE_TITLE'] = '[MaqueenPlus %1] rotate %2 speed %3';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_ROTATE_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Allows controlling the right and left motors by changing the direction (↻: FORWARD, ↺: BACKWARD) and speed (from 0 to 255) of the MaqueenPlus robot.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_CONTROLMOTOR_TITLE'] = '[MaqueenPlus %1] control the motor %2 direction %3 speed %4';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_CONTROLMOTOR_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Allows controlling the right and left motors by changing the direction (↻: FORWARD, ↺: BACKWARD) and speed (from 0 to 255) of the MaqueenPlus robot.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_STOPMOTORS_TITLE'] = '[MaqueenPlus %1] stop the motor %2';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_STOPMOTORS_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Allows stopping the right or left motor of the MaqueenPlus robot.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_V1_SETSERVOANGLE_TITLE'] = '[MaqueenPlus v1] set the servo %1 to angle %2°';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_V1_SETSERVOANGLE_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Allows controlling the servomotors P0, P1, P2 by changing the angle (from 0 to 180 degrees) of the MaqueenPlus V1 robot.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_V2_SETSERVOANGLE_TITLE'] = '[MaqueenPlus v2] set the servo %1 to angle %2°';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_V2_SETSERVOANGLE_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS_V2 + Blockly.Tooltip.SEP + 'Allows controlling the servomotors P0, P1, P2 by changing the angle (from 0 to 180 degrees) of the MaqueenPlus V2 robot.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_SETNEOPIXEL_TITLE'] = '[MaqueenPlus v2] control the RGB LED below %1 to R %2 G %3 B %4';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_SETNEOPIXEL_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS_V2 + Blockly.Tooltip.SEP + 'Allows controlling the color of each RGB LED of the MaqueenPlus robot\'s neopixel so that the R,G,B values are between 0 and 255.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_BLINK_ROBOT_TITLE'] = '[MaqueenPlus  v2] blink the robot';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_BLINK_ROBOT_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS_V2 + Blockly.Tooltip.SEP + 'Makes the Maqueen robot blink.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_SETPALETTECOLOR_TITLE'] = '[MaqueenPlus  v2] control the RGB LED below %1 to %2';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_SETPALETTECOLOR_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS_V2 + Blockly.Tooltip.SEP + 'Allows controlling the color of each RGB LED of the neopixel module located under the MaqueenPlus robot. Use the palette to change the color.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_SETRAINBOW_TITLE'] = '[MaqueenPlus  v2] Rainbow';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_SETRAINBOW_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS_V2 + Blockly.Tooltip.SEP + 'Displays the color spectrum on the RGB LEDs.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_SETBUZZER_TITLE'] = '[MaqueenPlus %1] control the buzzer at frequency %2 for %3 ms';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_SETBUZZER_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Allows setting a frequency on the MaqueenPlus robot\'s buzzer.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_DECODEIRRECEIVER_TITLE'] = '[MaqueenPlus] decode the infrared receiver';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_DECODEIRRECEIVER_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Performs a reading of the infrared receiver of the MaqueenPlus robot.';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_GETIRCODE_TITLE'] = '[MaqueenPlus] code received from the infrared receiver';
Blockly.Msg['ROBOTS_MAQUEEN_PLUS_GETIRCODE_TOOLTIP'] = IMG_ROBOT_MAQUEEN_PLUS + Blockly.Tooltip.SEP + 'Returns the hexadecimal code received with the infrared detector of the MaqueenPlus robot.';
// Robots - Cutebot
Blockly.Msg['ROBOTS_CUTEBOT_ULTRASONICRANGER_TITLE'] = '[Cutebot] %1';
Blockly.Msg['ROBOTS_CUTEBOT_ULTRASONICRANGER_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Returns the distance (in cm) or the round-trip duration (in μs) of the wave between an object and the Cutebot robot using the ultrasonic sensor.';
Blockly.Msg['ROBOTS_CUTEBOT_ULTRASONIC_DISTANCE'] = 'distance (cm)';
Blockly.Msg['ROBOTS_CUTEBOT_ULTRASONIC_DURATION'] = 'round-trip duration (μs)';
Blockly.Msg['ROBOTS_CUTEBOT_BLINK_ROBOT_TITLE'] = '[Cutebot] blink the robot';
Blockly.Msg['ROBOTS_CUTEBOT_BLINK_ROBOT_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Makes the Cutebot robot blink.';
Blockly.Msg['ROBOTS_CUTEBOT_READPATROL_TITLE'] = '[Cutebot] line follower sensor %1';
Blockly.Msg['ROBOTS_CUTEBOT_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_CUTEBOT_LEFT'] = 'left';
Blockly.Msg['ROBOTS_CUTEBOT_READPATROL_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Reads the state of the left or right line follower sensor of the Cutebot robot. The block returns 1 if the sensor is above the line.';
Blockly.Msg['ROBOTS_CUTEBOT_CONTROLLED_TITLE'] = '[Cutebot] control RGB LED %1 %2';
Blockly.Msg['ROBOTS_CUTEBOT_CONTROLLED_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Allows you to control the color of each RGB LED on the Cutebot robot by selecting a color from the available palette.';
Blockly.Msg['ROBOTS_CUTEBOT_CONTROL_RGB_LED_TITLE'] = '[Cutebot] control RGB LED %1 R %2 G %3 B %4';
Blockly.Msg['ROBOTS_CUTEBOT_CONTROL_RGB_LED_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Allows you to control the color of each RGB LED on the Cutebot robot with R, G, and B values ranging from 0 to 255.';
Blockly.Msg['ROBOTS_CUTEBOT_SETNEOPIXEL_TITLE'] = '[Cutebot] control RGB LED underneath at %1 R %2 G %3 B %4';
Blockly.Msg['ROBOTS_CUTEBOT_SETNEOPIXEL_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Allows you to control the color of each RGB LED on the neopixel of the Cutebot robot (P15) with R, G, and B values ranging from 0 to 255. The neopixel is connected to pin P15 on the robot.';
Blockly.Msg['ROBOTS_CUTEBOT_SETPALETTECOLOR_TITLE'] = '[Cutebot] control RGB LED underneath at %1 %2';
Blockly.Msg['ROBOTS_CUTEBOT_SETPALETTECOLOR_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Allows you to control the color of each RGB LED on the neopixel module (P15) located under the Cutebot robot. Use the palette to change the color.';
Blockly.Msg['ROBOTS_CUTEBOT_GO_TITLE'] = '[Cutebot] control robot %1 speed %2 %';
Blockly.Msg['ROBOTS_CUTEBOT_GO_FORWARD'] = 'forward';
Blockly.Msg['ROBOTS_CUTEBOT_GO_BACKWARD'] = 'backward';
Blockly.Msg['ROBOTS_CUTEBOT_GO_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Allows you to control the motors of the Cutebot robot to make it move forward or backward at a speed ranging from 0 to 100%.';
Blockly.Msg['ROBOTS_CUTEBOT_TURN_TITLE'] = '[Cutebot] turn %1 speed %2 %';
Blockly.Msg['ROBOTS_CUTEBOT_TURN_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_CUTEBOT_TURN_LEFT'] = 'left';
Blockly.Msg['ROBOTS_CUTEBOT_TURN_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Allows you to control the motors of the Cutebot robot to make it turn (right or left) at a speed ranging from 0 to 100%.';
Blockly.Msg['ROBOTS_CUTEBOT_STOP_TITLE'] = '[Cutebot] stop the robot';
Blockly.Msg['ROBOTS_CUTEBOT_STOP_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Stops the motors of the Cutebot robot.';
Blockly.Msg['ROBOTS_CUTEBOT_CONTROLMOTOR_TITLE'] = '[Cutebot] control motor %1 direction %2 speed %3 %';
Blockly.Msg['ROBOTS_CUTEBOT_MOTOR_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_CUTEBOT_MOTOR_LEFT'] = 'left';
Blockly.Msg['ROBOTS_CUTEBOT_CONTROLMOTOR_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Allows you to control the right and left motors by changing the direction (↻: FORWARD, ↺: BACKWARD) and speed (from 0 to 100%) of the Cutebot robot.';
Blockly.Msg['ROBOTS_CUTEBOT_SETSERVOANGLE_TITLE'] = '[Cutebot] set servo motor(s) %1 to angle %2°';
Blockly.Msg['ROBOTS_CUTEBOT_S1'] = 'S1';
Blockly.Msg['ROBOTS_CUTEBOT_S2'] = 'S2';
Blockly.Msg['ROBOTS_CUTEBOT_SERVO_BOTH'] = 'S1 and S2';
Blockly.Msg['ROBOTS_CUTEBOT_SETSERVOANGLE_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Allows you to control servo motors S1 and S2 by changing the angle (from 0 to 180°) of the Cutebot robot.';
Blockly.Msg['ROBOTS_CUTEBOT_MOVE_ONE_SQUARE_FORWARD_TITLE'] = '[Cutebot] move one square forward';
Blockly.Msg['ROBOTS_CUTEBOT_MOVE_ONE_SQUARE_FORWARD_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Moves the Cutebot robot one square forward.';
Blockly.Msg['ROBOTS_CUTEBOT_MOVE_ONE_SQUARE_BACKWARD_TITLE'] = '[Cutebot] move one square backward';
Blockly.Msg['ROBOTS_CUTEBOT_MOVE_ONE_SQUARE_BACKWARD_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Moves the Cutebot robot one square backward.';
Blockly.Msg['ROBOTS_CUTEBOT_TURN_LEFT_TITLE'] = '[Cutebot] turn left';
Blockly.Msg['ROBOTS_CUTEBOT_TURN_LEFT_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Turns the Cutebot robot 90° to the left.';
Blockly.Msg['ROBOTS_CUTEBOT_TURN_RIGHT_TITLE'] = '[Cutebot] turn right';
Blockly.Msg['ROBOTS_CUTEBOT_TURN_RIGHT_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Turns the Cutebot robot 90° to the right.';
Blockly.Msg['ROBOTS_CUTEBOT_SETBUZZER_TITLE'] = '[Cutebot] control the buzzer at frequency %1 for %2 (ms)';
Blockly.Msg['ROBOTS_CUTEBOT_SETBUZZER_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Allows setting a frequency on the Cutebot robot\'s buzzer (P0).';
Blockly.Msg['ROBOTS_CUTEBOT_PLAYMUSIC_TITLE'] = '[Cutebot] play music %1';
Blockly.Msg['ROBOTS_CUTEBOT_PLAYMUSIC_TOOLTIP'] = IMG_ROBOT_CUTEBOT + Blockly.Tooltip.SEP + 'Allows playing music with the buzzer of the Cutebot robot connected to the pin (P0).';
Blockly.Msg['ROBOTS_CUTEBOT_DECODEIRRECEIVER_TITLE'] = '[Cutebot] decode infrared receiver';
Blockly.Msg['ROBOTS_CUTEBOT_DECODEIRRECEIVER_TOOLTIP'] = 'Performs a reading of the Cutebot robot\'s infrared receiver (P16).';
Blockly.Msg['ROBOTS_CUTEBOT_GETIRCODE_TITLE'] = '[Cutebot] code received from the infrared receiver';
Blockly.Msg['ROBOTS_CUTEBOT_GETIRCODE_TOOLTIP'] = 'Returns the hexadecimal code received with the Cutebot robot\'s infrared detector (P16).';
// Robots - Cutebot Pro - Detection
Blockly.Msg['ROBOTS_CUTEBOTPRO_ULTRASONICRANGER_TITLE'] = '[Cutebot Pro] distance in %1';
Blockly.Msg['ROBOTS_CUTEBOTPRO_ULTRASONIC_CM'] = '(cm)';
Blockly.Msg['ROBOTS_CUTEBOTPRO_ULTRASONIC_INCH'] = '(inch)';
Blockly.Msg['ROBOTS_CUTEBOTPRO_ULTRASONICRANGER_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Returns the distance (in cm or inch) of the wave between an object and the Cutebot Pro robot using the ultrasonic sensor. The latter is linked to pin P8 and P12 of the BBC micro:bit board.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETLINESTATE_TITLE'] = '[Cutebot Pro] line follower status';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETLINESTATE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Gets the line follower status. It is composed of 4 infrared sensors located under the Cutebot Pro robot that return 16 different states (integers from 0 to 15).';
Blockly.Msg['ROBOTS_CUTEBOTPRO_ISSPECIFICSTATE_TITLE'] = '[Cutebot Pro] line follower status is %1';
Blockly.Msg['ROBOTS_CUTEBOTPRO_ISSPECIFICSTATE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Really returns whether the line follower detects the state specified in the block. The line follower is made up of 4 infrared sensors located under the Cutebot Pro robot which return 16 different states (integers from 0 to 15). For each state of the line follower, the values ​​of the 4 sensors such as [left, center left, center right, right], either looking in the direction of the robot.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETLINEOFFSET_TITLE'] = '[Cutebot Pro] offset from line at %1';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETLINEOFFSET_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to get the offset (in cm) or (in inches) from the line from -3 cm (robot offset to the right) to 3 cm (robot offset to the left). 0 means that the robot is well aligned. It is thus possible to orient the robot according to this value to follow the line.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_ISABOVELINE_TITLE'] = '[Cutebot Pro] sensor %1 above black line?';
Blockly.Msg['ROBOTS_CUTEBOTPRO_ISABOVELINE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Returns True if the selected line follower sensor (1 to 4) is above a black line.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETGRAYSCALEVALUE_TITLE'] = '[Cutebot Pro] sensor gray level %1';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETGRAYSCALEVALUE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Gets the value of the selected line follower sensor (from 1 to 4) in grayscale, from 0 to 255.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_READVERSION_TITLE'] = '[Cutebot Pro] robot version';
Blockly.Msg['ROBOTS_CUTEBOTPRO_READVERSION_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Used to obtain the version of the Cutebot Pro robot.';
// Robots - Cutebot Pro - Moving
Blockly.Msg['ROBOTS_CUTEBOTPRO_GO_TITLE'] = '[Cutebot Pro] %1 at speed %2 %';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GO_FORWARD'] = 'forward';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GO_BACKWARD'] = 'go back';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GO_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to control the Cutebot Pro robot\'s motors to move it forward or backward at a speed between 0 and 100%.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_TURN_TITLE'] = '[Cutebot Pro] turn at %1 speed %2%';
Blockly.Msg['ROBOTS_CUTEBOTPRO_TURN_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_CUTEBOTPRO_TURN_LEFT'] = 'left';
Blockly.Msg['ROBOTS_CUTEBOTPRO_TURN_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to control the Cutebot Pro robot\'s motors to turn (left or right) at a speed between 0 and 100%.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_STOP_TITLE'] = '[Cutebot Pro] stop the robot\'s motors';
Blockly.Msg['ROBOTS_CUTEBOTPRO_STOP_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to stop the Cutebot Pro robot\'s motors.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_CONTROLMOTOR_TITLE'] = '[Cutebot Pro] control motor %1 direction %2 speed %3 %';
Blockly.Msg['ROBOTS_CUTEBOTPRO_MOTOR_LEFT'] = 'left';
Blockly.Msg['ROBOTS_CUTEBOTPRO_MOTOR_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_CUTEBOTPRO_MOTOR_BOTH'] = 'left & right';
Blockly.Msg['ROBOTS_CUTEBOTPRO_CONTROLMOTOR_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to control the right and left motors by changing the direction (↻: FORWARD, ↺: REVERSE) and speed (from 0 to 100%) of the Cutebot Pro robot.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_UNIT_CM_S'] = '(cm/s)';
Blockly.Msg['ROBOTS_CUTEBOTPRO_UNIT_INCH_S'] = '(inch/s)';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETMOTORSPEED_TITLE'] = '[Cutebot Pro] motor speed %1 to %2';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETMOTORSPEED_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Gets the speed of the selected wheel (in m/s) or (inch/s) of the Cutebot Pro robot.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETANGULARDISTANCE_DEGREES'] = 'angular distance traveled (°)';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETANGULARDISTANCE_ROTATIONS'] = 'rotations performed';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETANGULARDISTANCE_PULSES'] = 'pulses detected';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETANGULARDISTANCE_TITLE'] = '[Cutebot Pro] %1 of wheel %2';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETANGULARDISTANCE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to obtain the angular distance traveled (in °) or the number of pulses detected by one of the Cutebot Pro robot\'s wheels since the last initialization. Note that a rotation of 1 ° corresponds to 4 pulses. Be careful, the lower the angular distance traveled, the less accurate the measurement.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_INITANGULARDISTANCE_TITLE'] = '[Cutebot Pro] reset angular measurement %1';
Blockly.Msg['ROBOTS_CUTEBOTPRO_INITANGULARDISTANCE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to reset the measurement of the angular distance traveled by each wheel of the Cutebot Pro robot.';
// Robots - Cutebot Pro - RGB LED
Blockly.Msg['ROBOTS_CUTEBOTPRO_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_CUTEBOTPRO_LEFT'] = 'left';
Blockly.Msg['ROBOTS_CUTEBOTPRO_BOTH'] = 'right & left';
Blockly.Msg['ROBOTS_CUTEBOTPRO_CONTROLLED_TITLE'] = '[Cutebot Pro] control RGB LED %1 %2';
Blockly.Msg['ROBOTS_CUTEBOTPRO_CONTROLLED_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to control the color of the left or right RGB LED of the Cutebot Pro robot by selecting a color from the available palette.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_CONTROL_RGB_LED_TITLE'] = '[Cutebot Pro] control RGB LED %1 R %2 G %3 B %4';
Blockly.Msg['ROBOTS_CUTEBOTPRO_CONTROL_RGB_LED_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to control the color of the left or right RGB LED of the Cutebot Pro robot such that the R,G,B values ​​are between 0 and 255.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SWITCHOFFLED_TITLE'] = '[Cutebot Pro] turn off both front RGB LEDs';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SWITCHOFFLED_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to turn off the two front RGB LEDs of the Cutebot Pro robot.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETNEOPIXEL_TITLE'] = '[Cutebot Pro] control the RGB LED below %1 to R %2 G %3 B %4';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETNEOPIXEL_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to control the color of the two RGB LEDs on the neopixel module located under the Cutebot Pro robot so that the values ​​(R,G,B) are between 0 and 255. The module is linked to pin P15 of the BBC micro:bit board.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETNEOPIXELPALETTE_TITLE'] = '[Cutebot Pro] control the RGB LED below %1 to %2';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETNEOPIXELPALETTE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Controls the color of the two RGB LEDs on the neopixel module located under the Cutebot Pro robot. Use the palette to change the color. The module is linked to pin P15 on the BBC micro:bit board.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SWITCHOFFNEOPIXEL_TITLE'] = '[Cutebot Pro] turn off the RGB LED below %1';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SWITCHOFFNEOPIXEL_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Turns off the RGB LEDs on the neopixel module located under the Cutebot Pro robot. The module is linked to pin P15 of the BBC micro:bit board.';
// Robots - Cutebot Pro - PID

Blockly.Msg['ROBOTS_CUTEBOTPRO_UNIT_CM'] = '(cm)';
Blockly.Msg['ROBOTS_CUTEBOTPRO_UNIT_INCH'] = '(inch)';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUNWITHSPEED_TITLE'] = '[Cutebot Pro] %1 at speed %2 %3';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUNWITHSPEED_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to run forward or backward at a certain speed (in cm/s) or (in inch/s) with the Cutebot Pro robot. Please note, speeds are guaranteed between 20 and 60 cm/s. Outside this interval, the motors are less able to establish a precise speed.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETMOTORSSPEED_TITLE'] = '[Cutebot Pro] set the speed of the left motor to %1, the right motor to %2 in %3';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETMOTORSSPEED_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to set a speed (in cm/s) or (in inch/s) on the right and left motors of the Cutebot Pro robot.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUNWITHRADIUS_TITLE'] = '[Cutebot Pro] turn at %1 turning radius %2 at speed %3 %4';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUNWITHRADIUS_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to move the Cutebot Pro robot on an arc with a specific turning radius (in cm) or (in inches) at a certain speed (in cm /s) or (in inches/s). The robot can move clockwise (to the right) or counterclockwise (to the left). Be careful, the speed and the turning radius must be in the same spatial unit.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUN_WAITING'] = 'wait ?';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUN_WAITING_YES']= 'yes';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUN_WAITING_NO'] = 'no';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUNDISTANCE_TITLE'] = '[Cutebot Pro] %1 of %2 %3';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUNDISTANCE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to travel a certain distance (in cm) or (in inches) FORWARD or BACKWARD with the Cutebot Pro robot.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_TURNWITHANGLE_TITLE'] = '[Cutebot Pro] turn %1 by %2 °';
Blockly.Msg['ROBOTS_CUTEBOTPRO_TURNWITHANGLE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to turn the Cutebot Pro robot left or right by a certain angle (in °).';
Blockly.Msg['ROBOTS_CUTEBOTPRO_DEFINESQUARE_TITLE'] = '[Cutebot Pro] define the dimension of a square at %1 %2';
Blockly.Msg['ROBOTS_CUTEBOTPRO_DEFINESQUARE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to define the size of a square (in cm) or (in inches) for the Cutebot Pro robot to move per unit.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUNSQUARE_TITLE'] = '[Cutebot Pro] %1 of %2 square.s';
Blockly.Msg['ROBOTS_CUTEBOTPRO_RUNSQUARE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to move forward or backward a certain number of squares. The value must be an integer.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_PLACEWITHANGLE_TITLE'] = '[Cutebot Pro] rotate to %1 at angle %2°';
Blockly.Msg['ROBOTS_CUTEBOTPRO_PLACEWITHANGLE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to rotate the Cutebot Pro robot left or right at an angular position (in °).';
Blockly.Msg['ROBOTS_CUTEBOTPRO_UNIT_DEG'] = '(°)';
Blockly.Msg['ROBOTS_CUTEBOTPRO_UNIT_TOUR'] = '(Tr)';
Blockly.Msg['ROBOTS_CUTEBOTPRO_TURNWHEEL_TITLE'] = '[Cutebot Pro] turn wheel %1 by %2 %3';
Blockly.Msg['ROBOTS_CUTEBOTPRO_TURNWHEEL_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to turn the right and/or left wheels by a certain angle (in °) or (in Tr) of the Cutebot Pro robot. 1 Tr corresponds to 360 °, or one complete turn of the wheel.';
// Robots - Cutebot Pro - Servomotors
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETSERVOANGLE_TITLE'] = '[Cutebot Pro] position the servomotor.s %1 at %2 °';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETSERVOANGLE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to control the angle (in °) of the servos that can be placed on pins S1, S2, S3 and S4 at the back of the Cutebot Pro robot.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETSERVOSPEED_TITLE'] = '[Cutebot Pro] control the continuous servo.s %1 direction %2 speed %3 %';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETSERVOSPEED_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to control the speed (in %) of the continuous servo motors that can be placed on pins S1, S2, S3 and S4 on the back of the Cutebot Pro robot.';
// Robots - Cutebot Pro - Extended motor (M port)
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETEXTENDEDMOTORSPEED_TITLE'] = '[Cutebot Pro] control motor direction %1 speed %2% on port M';
Blockly.Msg['ROBOTS_CUTEBOTPRO_SETEXTENDEDMOTORSPEED_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to control the speed (from 0 to 100%) and the direction of rotation of the motor connected to the M extension port of the Cutebot Pro robot .';
Blockly.Msg['ROBOTS_CUTEBOTPRO_STOPEXTENDEDMOTOR_TITLE'] = '[Cutebot Pro] stop M port motor';
Blockly.Msg['ROBOTS_CUTEBOTPRO_STOPEXTENDEDMOTOR_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Allows you to stop the motor connected to the extension port M of the Cutebot Pro robot.';
// Robots - Cutebot Pro - Remote control
Blockly.Msg['ROBOTS_CUTEBOTPRO_DECODEIRRECEIVER_TITLE'] = '[Cutebot] decode the infrared receiver';
Blockly.Msg['ROBOTS_CUTEBOTPRO_DECODEIRRECEIVER_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Reads the infrared receiver of the Cutebot Pro robot. The IR receiver is tied to pin P16 on the BBC micro:bit board.';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETIRCODE_TITLE'] = '[Cutebot] code received from the infrared receiver';
Blockly.Msg['ROBOTS_CUTEBOTPRO_GETIRCODE_TOOLTIP'] = IMG_ROBOT_CUTEBOT_PRO + Blockly.Tooltip.SEP + 'Returns the hex code received with the infrared detector of the Cutebot Pro robot. Use with the \'decode infrared receiver\' block. The IR receiver is tied to pin P16 on the BBC micro:bit board.';
// Robots - Codo
Blockly.Msg['ROBOTS_CODO_GO_TITLE'] = '[Codo] control robot %1 speed %2';
Blockly.Msg['ROBOTS_CODO_GO_FORWARD'] = 'forward';
Blockly.Msg['ROBOTS_CODO_GO_BACKWARD'] = 'backward';
Blockly.Msg['ROBOTS_CODO_GO_TOOLTIP'] = IMG_ROBOT_OOBYBOT + Blockly.Tooltip.SEP + 'Enable to control car running (forward/backward) and speed (from 0 to 255) of Codo robot.';
Blockly.Msg['ROBOTS_CODO_TURN_TITLE'] = '[Codo] turn %1 speed %2';
Blockly.Msg['ROBOTS_CODO_TURN_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_CODO_TURN_LEFT'] = 'left';
Blockly.Msg['ROBOTS_CODO_TURN_TOOLTIP'] = IMG_ROBOT_OOBYBOT + Blockly.Tooltip.SEP + 'Enable to control direction (right/left) and speed (from 0 to 255) of Codo robot.';
Blockly.Msg['ROBOTS_CODO_STOP_TITLE'] = '[Codo] stop run of robot';
Blockly.Msg['ROBOTS_CODO_STOP_TOOLTIP'] = IMG_ROBOT_OOBYBOT + Blockly.Tooltip.SEP + 'Stop car running of Codo robot.';
Blockly.Msg['ROBOTS_CODO_CONTROLMOTOR_TITLE'] = '[Codo] control motor %1 direction %2 speed %3';
Blockly.Msg['ROBOTS_CODO_MOTOR_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_CODO_MOTOR_LEFT'] = 'left';
Blockly.Msg['ROBOTS_CODO_CONTROLMOTOR_TOOLTIP'] = IMG_ROBOT_OOBYBOT + Blockly.Tooltip.SEP + 'Enable to control motor (right/left), direction (clockwise/anticlockwise) and speed (from 0 to 100) of Oobybot robot.';
// Robots - Oobybot
Blockly.Msg['ROBOTS_OOBYBOT_CONTROLLED_TITLE'] = '[Oobybot] check the LEDs at state %1 on pin %2';
Blockly.Msg['ROBOTS_OOBYBOT_CONTROLLED_TOOLTIP'] = IMG_ROBOT_OOBYBOT + Blockly.Tooltip.SEP + 'Allows you to control the LEDs (P0)';
Blockly.Msg['ROBOTS_OOBYBOT_GO_TITLE'] = '[Oobybot] control robot %1 speed %2%';
Blockly.Msg['ROBOTS_OOBYBOT_GO_FORWARD'] = 'forward';
Blockly.Msg['ROBOTS_OOBYBOT_GO_BACKWARD'] = 'backward';
Blockly.Msg['ROBOTS_OOBYBOT_GO_TOOLTIP'] = IMG_ROBOT_OOBYBOT + Blockly.Tooltip.SEP + 'Allows you to control the direction (forward/backward) as well as the speed (from 0 to 100%) of the Oobybot robot.';
Blockly.Msg['ROBOTS_OOBYBOT_TURN_TITLE'] = '[Oobybot] spin %1 at speed %2%';
Blockly.Msg['ROBOTS_OOBYBOT_TURN_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_OOBYBOT_TURN_LEFT'] = 'left';
Blockly.Msg['ROBOTS_OOBYBOT_TURN_TOOLTIP'] = IMG_ROBOT_OOBYBOT + Blockly.Tooltip.SEP + 'Allows you to control the direction (right/left) as well as the speed (from 0 to 100%) of the Oobybot robot.';
Blockly.Msg['ROBOTS_OOBYBOT_STOP_TITLE'] = '[Oobybot] stop the robot run';
Blockly.Msg['ROBOTS_OOBYBOT_STOP_TOOLTIP'] = IMG_ROBOT_OOBYBOT + Blockly.Tooltip.SEP + 'Allows you to stop the run of the Oobybot robot.';
Blockly.Msg['ROBOTS_OOBYBOT_CONTROLMOTOR_TITLE'] = '[Oobybot] control motor %1 direction %2 speed %3%';
Blockly.Msg['ROBOTS_OOBYBOT_MOTOR_RIGHT'] = 'left';
Blockly.Msg['ROBOTS_OOBYBOT_MOTOR_LEFT'] = 'right';
Blockly.Msg['ROBOTS_OOBYBOT_CONTROLMOTOR_TOOLTIP'] = IMG_ROBOT_OOBYBOT + Blockly.Tooltip.SEP + 'Allows you to control the motor (right/left), direction (clockwise/counterclockwise) and speed (from 0 to 100%) of the Oobybot robot.';
// Robots - Buggy
Blockly.Msg['ROBOTS_BUGGY_GO_TITLE'] = '[Buggy] control robot %1 speed %2';
Blockly.Msg['ROBOTS_BUGGY_GO_FORWARD'] = 'forward';
Blockly.Msg['ROBOTS_BUGGY_GO_BACKWARD'] = 'backward';
Blockly.Msg['ROBOTS_BUGGY_GO_TOOLTIP'] = IMG_ROBOT_BUGGY + Blockly.Tooltip.SEP + 'Enable to control car running (forward/backward) and speed (from 0 to 255) of Buggy robot.';
Blockly.Msg['ROBOTS_BUGGY_TURN_TITLE'] = '[Buggy] turn %1 speed %2';
Blockly.Msg['ROBOTS_BUGGY_TURN_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_BUGGY_TURN_LEFT'] = 'left';
Blockly.Msg['ROBOTS_BUGGY_TURN_TOOLTIP'] = IMG_ROBOT_BUGGY + Blockly.Tooltip.SEP + 'Enable to control direction (right/left) and speed (from 0 to 255) of Buggy robot.';
Blockly.Msg['ROBOTS_BUGGY_STOP_TITLE'] = '[Buggy] stop run of robot';
Blockly.Msg['ROBOTS_BUGGY_STOP_TOOLTIP'] = IMG_ROBOT_BUGGY + Blockly.Tooltip.SEP + 'Stop car running of Buggy robot.';
Blockly.Msg['ROBOTS_BUGGY_CONTROLMOTOR_TITLE'] = '[Buggy] control motor %1 direction %2 speed %3';
Blockly.Msg['ROBOTS_BUGGY_MOTOR_RIGHT'] = 'right';
Blockly.Msg['ROBOTS_BUGGY_MOTOR_LEFT'] = 'left';
Blockly.Msg['ROBOTS_BUGGY_CONTROLMOTOR_TOOLTIP'] = IMG_ROBOT_BUGGY + Blockly.Tooltip.SEP + 'Enable to control motor (right/left), direction (clockwise/anticlockwise) and speed (from 0 to 255) of Buggy robot.';
// Robots - Bit:Bot
Blockly.Msg['ROBOTS_BITBOT_READLIGHTSENSOR_TITLE'] = '[Bit:Bot] read light level on %1 sensor';
Blockly.Msg['ROBOTS_BITBOT_READLIGHTSENSOR_TOOLTIP'] = IMG_ROBOT_BITBOT + Blockly.Tooltip.SEP + 'Returns light level (from 0 to 255) with internal bit:bot light sensor';
Blockly.Msg['ROBOTS_BITBOT_READPATROL_TITLE'] = '[Bit:Bot] read line patrol %1';
Blockly.Msg['ROBOTS_BITBOT_READPATROL_TOOLTIP'] = IMG_ROBOT_BITBOT + Blockly.Tooltip.SEP + 'Enable to read state of line patrol sensor of bit:bot robot. The block returns 1 if the sensor is above the line.';
Blockly.Msg['ROBOTS_BITBOT_RIGHT'] = 'Right';
Blockly.Msg['ROBOTS_BITBOT_LEFT'] = 'Left';
Blockly.Msg['ROBOTS_BITBOT_RIGHT&LEFT'] = 'Right & Left';
Blockly.Msg['ROBOTS_BITBOT_GO_TITLE'] = '[Bit:Bot] control robot %1 speed %2';
Blockly.Msg['ROBOTS_BITBOT_GO_FORWARD'] = 'Forward';
Blockly.Msg['ROBOTS_BITBOT_GO_REVERSE'] = 'Reverse';
Blockly.Msg['ROBOTS_BITBOT_GO_TOOLTIP'] = IMG_ROBOT_BITBOT + Blockly.Tooltip.SEP + 'Enable to control car running (FORWARD/REVERSE) or speed (from 0 to 1023) of bit:bot robot.';
Blockly.Msg['ROBOTS_BITBOT_CONTROLMOTOR_TITLE'] = '[Bit:Bot] control motor %1 direction %2 speed %3';
Blockly.Msg['ROBOTS_BITBOT_CONTROLMOTOR_TOOLTIP'] = IMG_ROBOT_BITBOT + Blockly.Tooltip.SEP + 'Enable to control right motor (P0, P8) and left motor (P1, P12) changing direction (↻ : FOWARD, ↺ : REVERSE) or speed (from 0 to 1023) of bit:bot robot.';
Blockly.Msg['ROBOTS_BITBOT_STOPMOTORS_TITLE'] = '[Bit:Bot] stop motor %1';
Blockly.Msg['ROBOTS_BITBOT_STOPMOTORS_TOOLTIP'] = IMG_ROBOT_BITBOT + Blockly.Tooltip.SEP + 'Enable to stop right, left or both motors of bit:bot robot.';
Blockly.Msg['ROBOTS_BITBOT_SETNEOPIXEL_TITLE'] = '[Bit:Bot] set color R %2 G %3 B %4 on LED %1';
Blockly.Msg['ROBOTS_BITBOT_SETNEOPIXEL_TOOLTIP'] = IMG_ROBOT_BITBOT + Blockly.Tooltip.SEP + 'Enable to control each LED color of Maqueen neopixel (P13) as (R,G,B) from 0 to 255.';
Blockly.Msg['ROBOTS_BITBOT_SETPALETTECOLOR_TITLE'] = '[Bit:Bot] set color %2 on LED %1';
Blockly.Msg['ROBOTS_BITBOT_SETPALETTECOLOR_TOOLTIP'] = IMG_ROBOT_BITBOT + Blockly.Tooltip.SEP + 'Enable to control each LED color of Bit:Bot neopixel (P13). Choice color in the palette.';
Blockly.Msg['ROBOTS_BITBOT_SETRAINBOW_TITLE'] = '[Bit:Bot] rainbow';
Blockly.Msg['ROBOTS_BITBOT_SETRAINBOW_TOOLTIP'] = IMG_ROBOT_BITBOT + Blockly.Tooltip.SEP + 'Enable to show a rainbow on bit:bot RGB LED (P13).';
// Robots - Gamepad
Blockly.Msg['ROBOTS_GAMEPAD_V4_ONBUTTONEVENT_TITLE'] = '[Gamepad v4] إذا كان الزر %1 في حالة %2 إذاً';
Blockly.Msg['ROBOTS_GAMEPAD_V4_ONBUTTONEVENT_TOOLTIP'] = IMG_ROBOT_GAMEPAD_V4 + Blockly.Tooltip.SEP + 'تنفيذ التعليمات إذا تم استخدام أحد أزرار \'مايكرو:جيم باد (V4.0) DFR0536\'. للزر حالتان: \'مضغوط\' أو \'مُفلت\'. أزرار: A(A), B(B), C(P13), D(P14), E(P15), F(P16), Z(P8).';
Blockly.Msg['ROBOTS_GAMEPAD_V4_LED_MOTOR_TITLE'] = '[Gamepad v4] حالة LED وموتور الاهتزاز %1';
Blockly.Msg['ROBOTS_GAMEPAD_V4_LED_MOTOR_TOOLTIP'] = IMG_ROBOT_GAMEPAD_V4 + Blockly.Tooltip.SEP + 'يتيح التحكم في حالة LED وموتور الاهتزاز في \'مايكرو:جيم باد (V4.0) DFR0536\' (P16).';
Blockly.Msg['ROBOTS_GAMEPAD_V4_GETAXIS_TITLE'] = '[Gamepad v4] قيمة المحور %1';
Blockly.Msg['ROBOTS_GAMEPAD_V4_GETAXIS_TOOLTIP'] = IMG_ROBOT_GAMEPAD_V4 + Blockly.Tooltip.SEP + 'يعيد قيمة المحور X أو Y (من 0 إلى 1023) لعصا التحكم في \'مايكرو:جيم باد (V4.0) DFR0536\'. عصا التحكم: 2 محاور تناظرية (X: P1 Y: P2) 1 محور رقمي (Z: P8).';
Blockly.Msg['ROBOTS_GAMEPAD_CONTROLLED_TITLE'] = '[Gamepad] set LED to state %1';
Blockly.Msg['ROBOTS_GAMEPAD_CONTROLLED_TOOLTIP'] = IMG_ROBOT_GAMEPAD + Blockly.Tooltip.SEP + 'Enable to control LED state of Gamepad Expansion DFR035 (P16).';
Blockly.Msg['ROBOTS_GAMEPAD_SETMOTORVIBRATION_TITLE'] = '[Gamepad] set motor vibration to state %1';
Blockly.Msg['ROBOTS_GAMEPAD_SETMOTORVIBRATION_TOOLTIP'] = IMG_ROBOT_GAMEPAD + Blockly.Tooltip.SEP + 'Enable to control motorvibration state of Gamepad Expansion DFR035 (P12)';
Blockly.Msg['ROBOTS_GAMEPAD_SETBUZZERFREQ_TITLE'] = '[Gamepad] set buzzer at frequency %1 during %2 (ms)';
Blockly.Msg['ROBOTS_GAMEPAD_SETBUZZERFREQ_TOOLTIP'] = IMG_ROBOT_GAMEPAD + Blockly.Tooltip.SEP + 'Enable to control Gamepad buzzer at any frequency (P0).';
Blockly.Msg['ROBOTS_GAMEPAD_PLAYMUSIC_TITLE'] = '[Gamepad] play music %1';
Blockly.Msg['ROBOTS_GAMEPAD_PLAYMUSIC_TOOLTIP'] = IMG_ROBOT_GAMEPAD + Blockly.Tooltip.SEP + 'Enable to play music on Gamepad buzzer (P0).';
Blockly.Msg['ROBOTS_GAMEPAD_ONBUTTONEVENT_TITLE'] = '[Gamepad] on button %1 %2 then';
Blockly.Msg['ROBOTS_GAMEPAD_PRESSED'] = 'pressed';
Blockly.Msg['ROBOTS_GAMEPAD_RELEASED'] = 'released';
Blockly.Msg['ROBOTS_GAMEPAD_ONBUTTONEVENT_TOOLTIP'] = IMG_ROBOT_GAMEPAD + Blockly.Tooltip.SEP + 'Execute instructions if any gamepad button is used. The button have two states : \'pressed\' or \'released\'. Table of pins : ([X, P1], [Y, P2], [UP, P8], [DOWN, P13], [LEFT, P14], [RIGHT, P15]).';
// Tello
Blockly.Msg['TELLO_TAKEOFF_TITLE'] = '[Tello] take off the drone';
Blockly.Msg['TELLO_TAKEOFF_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows the Tello drone to take off. Note: You need a Grove Wifi UART v2 module to control the drone with a micro:bit v2.';
Blockly.Msg['TELLO_LAND_TITLE'] = '[Tello] land the drone';
Blockly.Msg['TELLO_LAND_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows the Tello drone to land. Note: You need a Grove Wifi UART v2 module to control the drone with a micro:bit v2.';
Blockly.Msg['TELLO_DRONE_INIT_TITLE'] = '[Tello] connect to Tello drone, SSID %1 On TX pin %2 and RX pin %3 of the Grove module';
Blockly.Msg['TELLO_DRONE_INIT_TOOLTIP'] = IMG_MODULE_WIFI + Blockly.Tooltip.SEP + 'Allows connecting and initializing the Tello drone with a Grove Wifi UART v2 module.';
Blockly.Msg['TELLO_FLIP_TITLE'] = '[Tello] perform a %1 flip';
Blockly.Msg['TELLO_FLIP_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows performing a flip (forward, backward, right, and left) with the Tello drone';
Blockly.Msg['TELLO_FLIP_FORWARD'] = 'forward';
Blockly.Msg['TELLO_FLIP_BACKWARD'] = 'backward';
Blockly.Msg['TELLO_FLIP_RIGHT'] = 'right';
Blockly.Msg['TELLO_FLIP_LEFT'] = 'left';
Blockly.Msg['TELLO_GO_TITLE'] = '[Tello] move with accelerometer. %1 Move %2 cm at a speed of %3 cm/s';
Blockly.Msg['TELLO_GO_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows moving the Tello drone with the accelerometer of the micro:bit. Step is a number between 20 and 100, and speed is a number between 10 and 100 cm/s.';
Blockly.Msg['TELLO_MOVE_TITLE'] = '[Tello] move the drone %1 by %2 cm';
Blockly.Msg['TELLO_MOVE_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows moving the Tello drone in a direction (forward, backward, right, and left) for a certain distance in cm (between 20 and 500 cm).';
Blockly.Msg['TELLO_MOVE_UP_DOWN_TITLE'] = '[Tello] move the drone %1 by %2 cm';
Blockly.Msg['TELLO_MOVE_UP_DOWN_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows the Tello drone to move in a direction (up or down) for a certain distance in cm (between 20 and 500 cm).';
Blockly.Msg['TELLO_MOVE_UP'] = 'up';
Blockly.Msg['TELLO_MOVE_DOWN'] = 'down';
Blockly.Msg['TELLO_MOVE_LEFT'] = 'left';
Blockly.Msg['TELLO_MOVE_RIGHT'] = 'right';
Blockly.Msg['TELLO_MOVE_FORWARD'] = 'forward';
Blockly.Msg['TELLO_MOVE_BACK'] = 'backward';
Blockly.Msg['TELLO_ROTATE_TITLE'] = '[Tello] rotate the drone %1 by %2 degrees';
Blockly.Msg['TELLO_ROTATE_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows rotating the Tello drone in a direction (clockwise CW and counterclockwise CCW) between 1 and 360 degrees.';
Blockly.Msg['TELLO_ROTATE_CW'] = 'clockwise';
Blockly.Msg['TELLO_ROTATE_CCW'] = 'counterclockwise';
Blockly.Msg['TELLO_EMERGENCY_TITLE'] = '[Tello] emergency stop';
Blockly.Msg['TELLO_EMERGENCY_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows cutting the motors of the Tello drone in case of emergency. Note: Depending on the height of the drone, the emergency stop can damage the Tello.';
Blockly.Msg['TELLO_STOP_TITLE'] = '[Tello] stop the drone';
Blockly.Msg['TELLO_STOP_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows stopping the movement of the Tello drone.';
Blockly.Msg['TELLO_SPEED_TITLE'] = '[Tello] drone speed (cm/s)';
Blockly.Msg['TELLO_SPEED_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows reading the speed of the Tello drone in cm/s (between 0 and 100 cm/s).';
Blockly.Msg['TELLO_BATTERY_TITLE'] = '[Tello] drone battery level (%)';
Blockly.Msg['TELLO_BATTERY_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows reading the battery level of the Tello drone in % (between 0 and 100).';
Blockly.Msg['TELLO_FLIGHT_TIME_TITLE'] = '[Tello] flight time (s)';
Blockly.Msg['TELLO_FLIGHT_TIME_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows reading the flight time of the Tello drone in seconds.';
Blockly.Msg['TELLO_STREAMING_VIDEO_ON_TITLE'] = '[Tello] enable video streaming';
Blockly.Msg['TELLO_STREAMING_VIDEO_ON_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows enabling video streaming from the Tello drone. Connect to the Tello drone\'s Wi-Fi network (SSID: \'TELLO-XXXXXX\', pw:\'\') and enter the URL \'0.0.0.0:11111\' in a web or mobile browser to receive real-time video feedback.';
Blockly.Msg['TELLO_STREAMING_VIDEO_OFF_TITLE'] = '[Tello] disable video streaming';
Blockly.Msg['TELLO_STREAMING_VIDEO_OFF_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows disabling video streaming from the Tello drone.';
Blockly.Msg['TELLO_RECTANGLE_FORM_TITLE'] = '[Tello] draw a rectangle with a width of %1 cm and a height of %2 cm';
Blockly.Msg['TELLO_RECTANGLE_FORM_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows drawing a rectangle with the Tello drone. The width and height are between 20 and 500 cm.';
Blockly.Msg['TELLO_SQUARE_FORM_TITLE'] = '[Tello] draw a square with a side length of %1 cm';
Blockly.Msg['TELLO_SQUARE_FORM_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows drawing a square with the Tello drone. The side length is between 20 and 500 cm.';
//Cameras
Blockly.Msg['CAMERAS_HUSKYLENS_SET_MODE_TITLE'] = '[HuskyLens] تفعيل الوضع %1';
Blockly.Msg['CAMERAS_HUSKYLENS_SET_MODE_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يتيح اختيار وضع الكشف في كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_SET_MODE_FACE_RECOGNITION'] = 'التعرف على الوجه';
Blockly.Msg['CAMERAS_HUSKYLENS_SET_MODE_OBJECT_TRACKING'] = 'تتبع الكائنات';
Blockly.Msg['CAMERAS_HUSKYLENS_SET_MODE_OBJECT_RECOGNITION'] = 'التعرف على الكائنات';
Blockly.Msg['CAMERAS_HUSKYLENS_SET_MODE_LINE_TRACKING'] = 'تتبع الخطوط';
Blockly.Msg['CAMERAS_HUSKYLENS_SET_MODE_COLOR_RECOGNITION'] = 'التعرف على الألوان';
Blockly.Msg['CAMERAS_HUSKYLENS_SET_MODE_TAG_RECOGNITION'] = 'التعرف على AprilTag';
Blockly.Msg['CAMERAS_HUSKYLENS_SET_MODE_OBJECT_CLASSIFICATION'] = 'تصنيف الكائنات';
Blockly.Msg['CAMERAS_HUSKYLENS_SET_TEXT_TITLE'] = '[HuskyLens] عرض النص %1 في الموضع (%2,%3)';
Blockly.Msg['CAMERAS_HUSKYLENS_SET_TEXT_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يعرض نصًا في الموضع (x, y) على شاشة كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_CLEAR_SCREEN_TITLE'] = '[HuskyLens] مسح الشاشة';
Blockly.Msg['CAMERAS_HUSKYLENS_CLEAR_SCREEN_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يمسح جميع النصوص المعروضة على شاشة كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_LEARN_ID_TITLE'] = '[HuskyLens] تعلم المعرف رقم %1 تلقائيًا';
Blockly.Msg['CAMERAS_HUSKYLENS_LEARN_ID_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يتعلم التعرف تلقائيًا على معرف باستخدام كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_FORGET_IDS_TITLE'] = '[HuskyLens] نسيان جميع المعرفات';
Blockly.Msg['CAMERAS_HUSKYLENS_FORGET_IDS_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يمسح جميع المعرفات المسجلة من كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_GET_DATA_TITLE'] = '[HuskyLens] استرجاع البيانات %1';
Blockly.Msg['CAMERAS_HUSKYLENS_GET_DATA_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يتيح الحصول على البيانات التي ترسلها كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_BLOCKS'] = 'الكتل';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_ARROWS'] = 'الأسهم';
Blockly.Msg['CAMERAS_HUSKYLENS_CUSTOM_NAME_TITLE'] = '[HuskyLens] تعيين الاسم %1 للمعرف رقم %2';
Blockly.Msg['CAMERAS_HUSKYLENS_CUSTOM_NAME_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يتيح ربط اسم بمعرف مسجل مسبقًا (وضع التعرف على الوجه).';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_BLOCKS_DATA_TITLE'] = '[HuskyLens] الحصول على %1 من الكتل المكتشفة';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_BLOCKS_DATA_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يتيح الحصول على معلومات الكشف من كاميرا HuskyLens. يتم تخزين كل عنصر مكتشف في مصفوفة بالشكل [x1, y1, العرض, الارتفاع, المعرف].';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_ID'] = 'المعرفات';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_X'] = 'الإحداثيات X';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_Y'] = 'الإحداثيات Y';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_X1'] = 'الإحداثيات X (الأصل)';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_Y1'] = 'الإحداثيات Y (الأصل)';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_X2'] = 'الإحداثيات X (النهاية)';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_Y2'] = 'الإحداثيات Y (النهاية)';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_SINGLE_X'] = 'الإحداثي X';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_SINGLE_Y'] = 'الإحداثي Y';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_SINGLE_WIDTH'] = 'العرض';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_SINGLE_HEIGHT'] = 'الارتفاع';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_BLOCKS_XY_TITLE'] = '[HuskyLens] الحصول على %1 من الكتلة المكتشفة';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_BLOCKS_XY_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يتيح الحصول على إحداثيات X أو Y للكتلة المكتشفة بواسطة كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_WIDTH'] = 'العروض';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_HEIGHT'] = 'الارتفاعات';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_ALL'] = 'جميع البيانات';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_ARROWS_DATA_TITLE'] = '[HuskyLens] الحصول على %1 من الأسهم المكتشفة';
Blockly.Msg['CAMERAS_HUSKYLENS_REQUEST_ARROWS_DATA_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يتيح الحصول على معلومات الكشف من كاميرا HuskyLens. يتم تخزين كل عنصر مكتشف في مصفوفة بالشكل [x1, y1, x2, y2, المعرف].';
Blockly.Msg['CAMERAS_HUSKYLENS_DETECTED_ELEMENTS_TITLE'] = '[HuskyLens] الحصول على عدد العناصر %1 المكتشفة';
Blockly.Msg['CAMERAS_HUSKYLENS_DETECTED_ELEMENTS_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يتيح الحصول على عدد العناصر المكتشفة بواسطة كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_CHECK_ID_TITLE'] = '[HuskyLens] %2 التحقق مما إذا كان المعرف رقم %1 مكتشفًا';
Blockly.Msg['CAMERAS_HUSKYLENS_CHECK_ID_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يعيد صحيح أو خطأ إذا كان المعرف مكتشفًا بواسطة كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_GET_LINE_DIRECTION_TITLE'] = '[HuskyLens] إذا كان خط المعرف رقم %1 %2';
Blockly.Msg['CAMERAS_HUSKYLENS_LINE_STRAIGHT'] = 'مستقيم';
Blockly.Msg['CAMERAS_HUSKYLENS_LINE_LEFT'] = 'ينعطف يسارًا';
Blockly.Msg['CAMERAS_HUSKYLENS_LINE_RIGHT'] = 'ينعطف يمينًا';
Blockly.Msg['CAMERAS_HUSKYLENS_GET_LINE_DIRECTION_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يكتشف اتجاه الخط باستخدام كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_SAVE_MODEL_TITLE'] = '[HuskyLens] حفظ كنموذج رقم %1';
Blockly.Msg['CAMERAS_HUSKYLENS_SAVE_MODEL_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يحفظ النموذج على بطاقة SD في كاميرا HuskyLens.';
Blockly.Msg['CAMERAS_HUSKYLENS_LOAD_MODEL_TITLE'] = '[HuskyLens] تحميل النموذج رقم %1';
Blockly.Msg['CAMERAS_HUSKYLENS_LOAD_MODEL_TOOLTIP'] = IMG_HUSKYLENS + Blockly.Tooltip.SEP + 'يقوم بتحميل النموذج من بطاقة SD الخاصة بكاميرا HuskyLens.';

Blockly.Msg['IO_GETMAGNETICSWITCH_TITLE'] = '[وحدة المفتاح المغناطيسي] الحالة على الطرف %1';
Blockly.Msg['IO_GETMAGNETICSWITCH_TOOLTIP'] = IMG_MODULE_MAGNETIC_SWITCH + Blockly.Tooltip.SEP + 'يعيد قيمة المفتاح المغناطيسي من نوع Grove (0 أو 1) على الأطراف الرقمية من P0 إلى P20.';
Blockly.Msg['SENSORS_BAROMETER_READDATA_TITLE'] = '[مقياس الضغط] %1';
Blockly.Msg['SENSORS_BAROMETER_READDATA_TOOLTIP'] = IMG_MODULE_SHT35 + Blockly.Tooltip.SEP + 'يعيد درجة الحرارة بوحدة مئوية (°C)، فهرنهايت (°F) أو كلفن (K)، أو الضغط (بـ hPa)، أو الارتفاع (بالمتر) باستخدام مقياس الضغط. يجب توصيل المستشعر بمنفذ I2C.';
Blockly.Msg['SENSORS_SHT35_READDATA_TITLE'] = '[مستشعر SHT35] %1';
Blockly.Msg['SENSORS_SHT35_READDATA_TOOLTIP'] = IMG_MODULE_SHT35 + Blockly.Tooltip.SEP + 'يعيد درجة الحرارة بوحدة مئوية (°C)، فهرنهايت (°F) أو كلفن (K)، أو الرطوبة (٪) باستخدام مستشعر SHT35. يجب توصيل المستشعر بمنفذ I2C.';
Blockly.Msg['SENSORS_FSR402_GETFORCE_TITLE'] = '[مستشعر القوة] القيمة على الطرف %1';
Blockly.Msg['SENSORS_FSR402_GETFORCE_TOOLTIP'] = IMG_MODULE_FORCE + Blockly.Tooltip.SEP + 'يعيد القوة المطبقة على المستشعر الدائري باستخدام مستشعر FSR402 على الأطراف التناظرية (P0 إلى P4 أو P10).';
Blockly.Msg['SENSORS_EMG_DETECTOR_TITLE'] = '[كاشف EMG] القيمة على الطرف %1';
Blockly.Msg['SENSORS_EMG_DETECTOR_TOOLTIP'] = IMG_MODULE_EMG_DETECTOR + Blockly.Tooltip.SEP + 'يقيس التيارات الكهربائية التي تصاحب النشاط العضلي على الأطراف التناظرية (P0 إلى P4 أو P10).';
Blockly.Msg['ACTUATORS_GROVEELECTROMAGNET_CONTROL_TITLE'] = '[مغناطيس كهربائي] التحكم بالحالة %1 على الطرف %2';
Blockly.Msg['ACTUATORS_GROVEELECTROMAGNET_CONTROL_TOOLTIP'] = IMG_MODULE_ELECTROMAGNET + Blockly.Tooltip.SEP + 'يمكن من تفعيل أو تعطيل المغناطيس الكهربائي (مرتفع أو منخفض) على الأطراف الرقمية.';
Blockly.Msg['ACTUATORS_GROVEWATERATOMIZATION_CONTROL_TITLE'] = '[مرذاذ الماء] التحكم بالحالة %1 على الطرف %2';
Blockly.Msg['ACTUATORS_GROVEWATERATOMIZATION_CONTROL_TOOLTIP'] = IMG_MODULE_WATER_ATOMIZER + Blockly.Tooltip.SEP + 'يمكن من تفعيل أو تعطيل مرذاذ الماء (مرتفع أو منخفض) على الأطراف الرقمية.';

// AI sensors
Blockly.Msg['VITTAIA_LOAD_LOCAL_MODEL_TITLE'] = '%1 تحميل النموذج المحلي';
Blockly.Msg['VITTAIA_LOAD_LOCAL_MODEL_TOOLTIP'] = 'يسمح بتحميل نموذج ذكاء اصطناعي مخزَّن محليًا من متصفح الويب.';
Blockly.Msg['VITTAIA_LOAD_CLOUD_MODEL_TITLE'] = '%1 تحميل النموذج من الرابط %2';
Blockly.Msg['VITTAIA_LOAD_CLOUD_MODEL_TOOLTIP'] = 'يسمح بتحميل نموذج ذكاء اصطناعي من التخزين السحابي.';
Blockly.Msg['VITTAIA_MAKE_PREDICTION_TITLE'] = '%1 تنفيذ التنبؤ باستخدام بيانات المستشعر';
Blockly.Msg['VITTAIA_MAKE_PREDICTION_TIME_WINDOW'] = 'نافذة';
Blockly.Msg['VITTAIA_MAKE_PREDICTION_TOOLTIP'] = 'يسمح بتنفيذ تنبؤ باستخدام بيانات من مستشعر. قم بضبط النافذة الزمنية إذا لزم الأمر للحصول على التنبؤ.';
Blockly.Msg['VITTAIA_SENSOR_ACC'] = 'مستشعر التسارع';
Blockly.Msg['VITTAIA_DETECT_CLASS_TITLE'] = '%1 إذا تم اكتشاف الفئة %2 %3 فقم بـ';
Blockly.Msg['VITTAIA_DETECT_CLASS_TOOLTIP'] = 'يسمح باكتشاف فئة كائن.';
Blockly.Msg['VITTAIA_IS'] = 'هي';
Blockly.Msg['VITTAIA_ISNOT'] = 'ليست';
Blockly.Msg['VITTAIA_GET_HIGHEST_PROBABILITY_CLASS_TITLE'] = '%1 الفئة المكتشفة';
Blockly.Msg['VITTAIA_GET_HIGHEST_PROBABILITY_CLASS_TOOLTIP'] = 'يسمح بالحصول على الفئة ذات أعلى احتمال.';