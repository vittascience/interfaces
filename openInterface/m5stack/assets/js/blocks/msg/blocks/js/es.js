/**
 * @fileoverview English messages for M5Stack. (EN)
 */
'use strict';
//Screen
Blockly.Msg['SCREEN_SET_BACKGROUND_COLOR_PALETTE_TITLE'] = '[Pantalla] establece el color de fondo a %1';
Blockly.Msg['SCREEN_SET_BACKGROUND_COLOR_PALETTE_TOOLTIP'] = 'Permite aplicar un color, elegido de la paleta, a toda la pantalla del M5Stack';
Blockly.Msg['SCREEN_SET_BACKGROUND_COLOR_RGB_TITLE'] = '[Pantalla] establecer el color de fondo a R %1 G %2 B %3';
Blockly.Msg['SCREEN_SET_BACKGROUND_COLOR_RGB_TOOLTIP'] = 'Permite aplicar un color a toda la pantalla de M5Stack especificando valores RGB (0-255)';
// Screen - draw - title
Blockly.Msg['SCREEN_DRAW_M5TITLE_DEFINE_TITLE'] = '[Dibujo - título] id %1 definir título %2 posición %3';
Blockly.Msg['SCREEN_DRAW_M5TITLE_DEFINE_TOOLTIP'] = 'Permite añadir un título a la parte superior de la pantalla de M5Stack';
Blockly.Msg['SCREEN_DRAW_M5TITLE_SETFGCOLOR_TITLE'] = '[Dibujo - título] id %1 cambiar el color del título a %2';
Blockly.Msg['SCREEN_DRAW_M5TITLE_SETFGCOLOR_TOOLTIP'] = 'Permite cambiar el color del título';
Blockly.Msg['SCREEN_DRAW_M5TITLE_SETBGCOLOR_TITLE'] = '[Dibujo - título] id %1 cambiar el color de fondo a %2';
Blockly.Msg['SCREEN_DRAW_M5TITLE_SETBGCOLOR_TOOLTIP'] = 'Permite cambiar el color de fondo del título';
Blockly.Msg['SCREEN_DRAW_M5TITLE_SETTITLE_TITLE'] = '[Dibujo - título] id %1 cambiar título a %2';
Blockly.Msg['SCREEN_DRAW_M5TITLE_SETTITLE_TOOLTIP'] = 'Permite cambiar el texto del título';
Blockly.Msg['SCREEN_DRAW_M5TITLE_CONTROLDISPLAY_TITLE'] = '[Dibujo - título] id %1 control de visualización en estado %2';
Blockly.Msg['SCREEN_DRAW_M5TITLE_CONTROLDISPLAY_TOOLTIP'] = 'Permite mostrar u ocultar el título';
// Screen - draw - label
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_DEFINE_TITLE'] = '[Drawing - label] id %1 define text %2 at x %3 y %4';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_DEFINE_TOOLTIP'] = 'Allows you to add a text on the M5Stack screen from x (0-250) y (0-300).';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_SETCOLOR_TITLE'] = '[Drawing - label] id %1 change text color to %2';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_SETCOLOR_TOOLTIP'] = 'Allows you to change the color of the text label.';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_SETPOSITION_TITLE'] = '[Drawing - label] id %1 change position to x %2 y %3';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_SETPOSITION_TOOLTIP'] = 'Allows you to change the text label position.';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_SETFONT_TITLE'] = '[Drawing - label] id %1 change font to %2';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_SETFONT_TOOLTIP'] = 'Allows you to change the text font.';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_SETTEXT_TITLE'] = '[Drawing - label] id %1 change text to %2';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_SETTEXT_TOOLTIP'] = 'Allows you to change the label text.';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_SETROTATE_TITLE'] = '[Drawing - label] id %1 change rotation to angle %2 (°)';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_SETROTATE_TOOLTIP'] = 'Allows you to change the label rotation.';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_CONTROLDISPLAY_TITLE'] = '[Drawing - label] id %1 control display at state %2';
Blockly.Msg['SCREEN_DRAW_M5TEXTBOX_CONTROLDISPLAY_TOOLTIP'] = 'Allows you to show or hide the text label.';
// Screen - draw - rectangle
Blockly.Msg['SCREEN_DRAW_M5RECT_DEFINE_TITLE'] = '[Drawing - rect] id %1 define rectangle at x %2 y %3';
Blockly.Msg['SCREEN_DRAW_M5RECT_DEFINE_TOOLTIP'] = 'Allows you to add a rectangle on the M5Stack screen from x (0-250) y (0-300).';
Blockly.Msg['SCREEN_DRAW_M5RECT_SETSIZE_TITLE'] = '[Drawing - rect] id %1 change rectangle size to width %2 height %3';
Blockly.Msg['SCREEN_DRAW_M5RECT_SETSIZE_TOOLTIP'] = 'Allows you to change the size of the rectangle.';
Blockly.Msg['SCREEN_DRAW_M5RECT_SETBGCOLOR_TITLE'] = '[Drawing - rect] id %1 change fill color to %2';
Blockly.Msg['SCREEN_DRAW_M5RECT_SETBGCOLOR_TOOLTIP'] = 'Allows you to change the fill color of the rectangle.';
Blockly.Msg['SCREEN_DRAW_M5RECT_SETBORDERCOLOR_TITLE'] = '[Drawing - rect] id %1 change border color to %2';
Blockly.Msg['SCREEN_DRAW_M5RECT_SETBORDERCOLOR_TOOLTIP'] = 'Allows you to change the border color of the rectangle.';
Blockly.Msg['SCREEN_DRAW_M5RECT_SETPOSITION_TITLE'] = '[Drawing - rect] id %1 change position to x %2 y %3';
Blockly.Msg['SCREEN_DRAW_M5RECT_SETPOSITION_TOOLTIP'] = 'Allows you to change the rectangle position.';
Blockly.Msg['SCREEN_DRAW_M5RECT_CONTROLDISPLAY_TITLE'] = '[Drawing - rect] id %1 control display at state %2';
Blockly.Msg['SCREEN_DRAW_M5RECT_CONTROLDISPLAY_TOOLTIP'] = 'Allows you to show or hide the rectangle.';
// Screen - draw - circle
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_DEFINE_TITLE'] = '[Dibujo - círculo] id %1 definir círculo en x %2 y %3';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_DEFINE_TOOLTIP'] = 'Permite añadir un círculo en la pantalla M5Stack desde x (0-250) y (0-300)';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_SETSIZE_TITLE'] = '[Dibujo - círculo] id %1 cambiar el tamaño del círculo al radio %2';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_SETSIZE_TOOLTIP'] = 'Permite cambiar el radio del círculo';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_SETBGCOLOR_TITLE'] = '[Dibujo - círculo] id %1 cambiar color de relleno a %2';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_SETBGCOLOR_TOOLTIP'] = 'Permite cambiar el color de relleno del círculo';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_SETBORDERCOLOR_TITLE'] = '[Dibujo - círculo] id %1 cambiar el color del borde a %2';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_SETBORDERCOLOR_TOOLTIP'] = 'Permite cambiar el color del borde del círculo';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_SETPOSITION_TITLE'] = '[Dibujo - círculo] id %1 cambiar posición a x %2 y %3';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_SETPOSITION_TOOLTIP'] = 'Permite cambiar la posición del círculo';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_CONTROLDISPLAY_TITLE'] = '[Dibujo - círculo] id %1 control de visualización en estado %2';
Blockly.Msg['SCREEN_DRAW_M5CIRCLE_CONTROLDISPLAY_TOOLTIP'] = 'Permite mostrar u ocultar el círculo';
// Screen - draw - triangle
Blockly.Msg['SCREEN_DRAW_M5TRIANGLE_DEFINE_TITLE'] = '[Dibujo - triángulo] id %1 definir triángulo en x1 %2 y1 %3 x2 %4 y2 %5 x3 %6 y3 %7';
Blockly.Msg['SCREEN_DRAW_M5TRIANGLE_DEFINE_TOOLTIP'] = 'Permite añadir un triángulo en la pantalla M5Stack desde x (0-250) y (0-300)';
Blockly.Msg['SCREEN_DRAW_M5TRIANGLE_SETSIZE_TITLE'] = '[Dibujo - triángulo] id %1 cambia la posición del ángulo en x1 %2 y1 %3 x2 %4 y2 %5 x3 %6 y3 %7';
Blockly.Msg['SCREEN_DRAW_M5TRIANGLE_SETSIZE_TOOLTIP'] = 'Permite cambiar las 3 posiciones de ángulo del triángulo';
Blockly.Msg['SCREEN_DRAW_M5TRIANGLE_SETBGCOLOR_TITLE'] = '[Dibujo - triángulo] id %1 cambiar color de relleno a %2';
Blockly.Msg['SCREEN_DRAW_M5TRIANGLE_SETBGCOLOR_TOOLTIP'] = 'Permite cambiar el color de relleno del triángulo';
Blockly.Msg['SCREEN_DRAW_M5TRIANGLE_SETBORDERCOLOR_TITLE'] = '[Dibujo - triángulo] id %1 cambiar el color del borde a %2';
Blockly.Msg['SCREEN_DRAW_M5TRIANGLE_SETBORDERCOLOR_TOOLTIP'] = 'Permite cambiar el color del borde del triángulo';
Blockly.Msg['SCREEN_DRAW_M5TRIANGLE_CONTROLDISPLAY_TITLE'] = '[Dibujo - triángulo] id %1 control de visualización en estado %2';
Blockly.Msg['SCREEN_DRAW_M5TRIANGLE_CONTROLDISPLAY_TOOLTIP'] = 'Permite mostrar u ocultar el triángulo';
// Screen - draw - line
Blockly.Msg['SCREEN_DRAW_M5LINE_DEFINE_TITLE'] = '[Dibujo - línea] id %1 definir línea en x1 %2 y1 %3 x2 %4 y2 %5 tipo %6';
Blockly.Msg['SCREEN_DRAW_M5LINE_DEFINE_TOOLTIP'] = 'Permite añadir una línea en la pantalla M5Stack desde x (0-250) y (0-300)';
Blockly.Msg['SCREEN_DRAW_M5LINE_SETSIZE_TITLE'] = '[Dibujo - línea] id %1 cambiar posición de puntos en x1 %2 y1 %3 x2 %4 y2 %5';
Blockly.Msg['SCREEN_DRAW_M5LINE_SETSIZE_TOOLTIP'] = 'Permite cambiar las 3 posiciones de los ángulos de la línea';
Blockly.Msg['SCREEN_DRAW_M5LINE_SETCOLOR_TITLE'] = '[Dibujo - línea] id %1 cambiar el color de la línea a %2';
Blockly.Msg['SCREEN_DRAW_M5LINE_SETCOLOR_TOOLTIP'] = 'Permite cambiar el color de la línea';
Blockly.Msg['SCREEN_DRAW_M5LINE_CONTROLDISPLAY_TITLE'] = '[Dibujo - línea] id %1 control de visualización en estado %2';
Blockly.Msg['SCREEN_DRAW_M5LINE_CONTROLDISPLAY_TOOLTIP'] = 'Permite mostrar u ocultar la línea';
// Input/Output - Esp32
Blockly.Msg['IO_WAIT_TITLE'] = 'espera %1 %2';
Blockly.Msg['IO_WAIT_TOOLTIP'] = 'Detener la ejecución del código (duración en segundos o milisegundos)';
Blockly.Msg['IO_WAIT_SECOND'] = 'segundo(s)';
Blockly.Msg['IO_WAIT_MILLISECOND'] = 'milisegundo(s)';
Blockly.Msg['IO_WAIT_MICROSECOND'] = 'microsegundo(s)';
Blockly.Msg['IO_WAIT_UNTIL_TITLE'] = 'espera hasta %1';
Blockly.Msg['IO_WAIT_UNTIL_TOOLTIP'] = 'Detener la ejecución del código hasta que se cumpla la condición';
Blockly.Msg['IO_INITCHRONOMETER_TITLE'] = 'inicializar el cronómetro';
Blockly.Msg['IO_INITCHRONOMETER_TOOLTIP'] = 'Permite inicializar el cronómetro (en segundos)';
Blockly.Msg['IO_GETCHRONOMETER_TITLE'] = 'Obtener cronómetro en %1';
Blockly.Msg['IO_GETCHRONOMETER_TOOLTIP'] = 'Devuelve el valor del cronómetro desde la inicialización en segundos o milisegundos';
Blockly.Msg['IO_M5STACK_ON_BUTTON_PRESSED_EVENT_TITLE'] = 'si botón %1 %2 entonces';
Blockly.Msg['IO_M5STACK_ON_BUTTON_PRESSED_EVENT_TOOLTIP'] = 'Permite crear un evento en los botones A, B o C. Este bloque ejecuta instrucciones en cualquier momento en cuanto se detecta el evento';
Blockly.Msg['IO_WAS_PRESSED'] = 'fue presionado';
Blockly.Msg['IO_WAS_RELEASED'] = 'fue liberado';
Blockly.Msg['IO_WAS_LONG_PRESSED'] = 'fue largamente presionado';
Blockly.Msg['IO_WAS_DOUBLE_PRESSED'] = 'se pulsó dos veces';
Blockly.Msg['IO_M5STACK_GET_BUTTON_STATE_TITLE'] = 'botón %1 %2';
Blockly.Msg['IO_M5STACK_GET_BUTTON_STATE_TOOLTIP'] = 'Devuelve el estado actual del evento (pulsado o liberado) de los botones A, B o C';
Blockly.Msg['IO_IS_PRESSED'] = 'está pulsado';
Blockly.Msg['IO_IS_RELEASED'] = 'está liberado';
Blockly.Msg['IO_M5STACK_IS_CHARGING_TITLE'] = '¿[batería] se está cargando?';
Blockly.Msg['IO_M5STACK_IS_CHARGING_TOOLTIP'] = 'Devuelve \'True\' si la batería de la M5Stack se está cargando';
Blockly.Msg['IO_M5STACK_IS_CHARGE_FULL_TITLE'] = '[la batería] está cargada';
Blockly.Msg['IO_M5STACK_IS_CHARGE_FULL_TOOLTIP'] = 'Devuelve \'True\' si la batería de la M5Stack está completamente cargada';
Blockly.Msg['IO_M5STACK_SET_CHARGE_TITLE'] = '[batería] está controlando la carga en %1';
Blockly.Msg['IO_M5STACK_SET_CHARGE_TOOLTIP'] = 'Permite activar o desactivar la carga de la batería del M5Stack';
Blockly.Msg['IO_M5STACK_GET_BATTERY_LEVEL_TITLE'] = '[batería] nivel de batería (%)';
Blockly.Msg['IO_M5STACK_GET_BATTERY_LEVEL_TOOLTIP'] = 'Devuelve el nivel de la batería de (0-100) en %';
// Input/Output - External modules
Blockly.Msg['IO_GROVEKEYPAD_GETNUMBER_TITLE'] = '[Teclado numérico táctil] obtiene el número en los pines RX %1 TX %2';
Blockly.Msg['IO_GROVEKEYPAD_GETNUMBER_TOOLTIP'] = IMG_MODULE_KEYPAD + Blockly.Tooltip.SEP + 'Habilitar para obtener el número tocado del módulo de teclado numérico en los pines RX y TX. Cuando conecte el dispositivo, asegúrese de "cruzar" los cables. El pin TX del ESP32 tiene que estar conectado con el pin RX del dispositivo, y el pin RX con el pin TX del dispositivo';
Blockly.Msg['IO_GROVEJOYSTICK_GETAXIS_TITLE'] = '[Módulo Joystick] valor del eje del joystick %1 en los pines A0 %2 A1 %3';
Blockly.Msg['IO_GROVEJOYSTICK_GETAXIS_TOOLTIP'] = IMG_MODULE_JOYSTICK + Blockly.Tooltip.SEP + 'Devuelve el valor del eje del joystick de Grove (de 0 a 4095) en los pines analógicos p34 a p36, o p39 (como A2 a A4 en shield Grove)..';
Blockly.Msg['IO_GROVECOLOREDBUTTON_GET_TITLE'] = '[Módulo de botones de colores] estado en el pin SIG2 %1';
Blockly.Msg['IO_GROVECOLOREDBUTTON_GET_TOOLTIP'] = IMG_MODULE_LED_BUTTON + Blockly.Tooltip.SEP + 'Devuelve el estado del botón de color Grove (0 o 1) en los pines digitales';
Blockly.Msg['IO_GROVECOLOREDBUTTON_SETLED_TITLE'] = '[Módulo de botones de color] controla el LED al estado %1 en el pin SIG1 %2';
Blockly.Msg['IO_GROVECOLOREDBUTTON_SETLED_TOOLTIP'] = IMG_MODULE_LED_BUTTON + Blockly.Tooltip.SEP + 'Habilitar para encender o apagar el LED Button Grove (0 o 1) en los pines digitales';
Blockly.Msg['IO_GETGROVEROTARYANGLE_TITLE'] = '[Módulo de ángulo rotativo] ángulo en el pin %1';
Blockly.Msg['IO_GETGROVEROTARYANGLE_TOOLTIP'] = IMG_MODULE_ROTARY_ANGLE + Blockly.Tooltip.SEP + 'Devuelve la posición del ángulo rotativo del Grove (de 0 a 4095) en los pines analógicos p34 a p36, o p39 (como A2 a A4 en el Grove del escudo)';
Blockly.Msg['IO_GETGROVESLIDEPOTENTIOMETER_TITLE'] = '[Potenciómetro de deslizamiento] valor de posición en el pin %1';
Blockly.Msg['IO_GETGROVESLIDEPOTENTIOMETER_TOOLTIP'] = IMG_MODULE_SLIDE_POT + Blockly.Tooltip.SEP + 'Devuelve el valor de la posición del potenciómetro de deslizamiento de la ranura (de 0 a 4095) en los pines analógicos p34 a p36, o p39 (como A2 a A4 en el escudo Grove)..';
Blockly.Msg['IO_GETGROVETACTILE_TITLE'] = '[Sensor táctil] estado táctil en el pin %1 ';
Blockly.Msg['IO_GETGROVETACTILE_TOOLTIP'] = IMG_MODULE_TOUCH + Blockly.Tooltip.SEP + 'Devuelve el estado del sensor táctil de Grove (0 o 1) en los pines digitales';
Blockly.Msg['IO_GETGROVEBUTTON_TITLE'] = '[Módulo de botones] estado del botón en el pin %1 ';
Blockly.Msg['IO_GETGROVEBUTTON_TOOLTIP'] = IMG_MODULE_BUTTON + Blockly.Tooltip.SEP + 'Devuelve el estado del botón Grove (0 o 1) en los pines digitales';
Blockly.Msg['IO_GETGROVESWITCH_TITLE'] = '[Módulo de conmutación] estado de conmutación en el pin %1 ';
Blockly.Msg['IO_GETGROVESWITCH_TOOLTIP'] = IMG_MODULE_SWITCH + Blockly.Tooltip.SEP + 'Devuelve el estado de conmutación de la ranura (0 o 1) en los pines digitales';
// Input/Output - Pins
Blockly.Msg['IO_DIGITAL_SIGNAL_TITLE'] = '%1';
Blockly.Msg['IO_DIGITAL_SIGNAL_HIGH'] = 'ALTO (1)';
Blockly.Msg['IO_DIGITAL_SIGNAL_LOW'] = 'BAJO (0)';
Blockly.Msg['IO_DIGITAL_SIGNAL_TOOLTIP'] = 'Devuelve un valor booleano (1 si es HIGH o 0 si es LOW)';
Blockly.Msg['IO_READDIGITALPIN_TITLE'] = 'leer pin digital %1';
Blockly.Msg['IO_READDIGITALPIN_TOOLTIP'] = 'Habilitar para leer el valor digital de los pines (0 o 1)';
Blockly.Msg['IO_WRITEDIGITALPIN_TITLE'] = 'Escribe el estado %1 en el pin digital %2';
Blockly.Msg['IO_WRITEDIGITALPIN_TOOLTIP'] = 'Habilitar para escribir el valor (0 o 1) en el pin digital';
Blockly.Msg['IO_READANALOGPIN_TITLE'] = 'leer pin analógico %1';
Blockly.Msg['IO_READANALOGPIN_TOOLTIP'] = 'Habilita la lectura del valor analógico de los pines (0-1023) entre 0 y 3,6V';
Blockly.Msg['IO_WRITEPWMPIN_TITLE'] = 'escribe el valor %1 en el pin PWM %2';
Blockly.Msg['IO_WRITEPWMPIN_TOOLTIP'] = 'Permite aplicar la señal PWM con una frecuencia fija de 10kHz. Puede cambiar el valor de 0 a 1023. 512 será el 50% del ciclo de trabajo, como alrededor de 1,66V';
Blockly.Msg['IO_WRITEANALOGPIN_TITLE'] = 'escribe el valor %1 en el pin analógico %2 (DAC)';
Blockly.Msg['IO_WRITEANALOGPIN_TOOLTIP'] = 'Permite escribir en el pin analógico el valor (0-255) para los pines DAC (p25/p26). Esp32 utiliza un convertidor de digital a analógico (DAC) para establecer la tensión entre 0 y 3,3V';
Blockly.Msg['IO_SETPWM_TITLE'] = 'aplica una señal cuadrada de frecuencia %1 (Hz) en el pin %2';
Blockly.Msg['IO_SETPWM_TOOLTIP'] = 'Habilitar para aplicar una señal cuadrada PWM con un 50% de ciclo de trabajo. Se puede cambiar la frecuencia de la señal';
Blockly.Msg['IO_STOPPWM_TITLE'] = 'Detener la señal PWM del pin %1';
Blockly.Msg['IO_STOPPWM_TOOLTIP'] = 'Habilitar para detener la señal PWM aplicada de un pin';
Blockly.Msg['IO_GETVOLTAGE_TITLE'] = 'Convertir %1 en tensión con resolución %2';
Blockly.Msg['IO_GETVOLTAGE_TOOLTIP'] = 'Permite convertir el valor analógico en voltaje con resolución (10 bits: 1024, 12 bits: 4096, 9 bits: 512, 11 bits: 2048) y máximo de 3,6V';
//Communication - Internal Bluetooth
Blockly.Msg['COMMUNICATION_START_BT_TITLE'] = '[ESP32 Bluetooth UART] initialize bluetooth %1';
Blockly.Msg['COMMUNICATION_START_BT_TOOLTIP'] = 'Initialize Bluetooth service on the ESP32 with given name.';
Blockly.Msg['COMMUNICATION_SEND_BT_TITLE'] = '[ESP32 Bluetooth UART] send data %1';
Blockly.Msg['COMMUNICATION_SEND_BT_TOOLTIP'] = 'Send data via the ESP32\'s Bluetooth service.';
Blockly.Msg['COMMUNICATION_BLE_READ_DATA_TITLE'] = '[Bluetooth] on data reception in %1 then ';
Blockly.Msg['COMMUNICATION_BLE_READ_DATA_TOOLTIP'] = 'Executes instructions on data reception via Bluetooth (BLE).';
Blockly.Msg['COMMUNICATION_FIZZIQ_BT_TITLE'] = '[Fizziq App] send %1 %2';
Blockly.Msg['COMMUNICATION_FIZZIQ_BT_TOOLTIP'] = IMG_MODULE_FIZZIQ + Blockly.Tooltip.SEP + 'Send data via the ESP32\'s Bluetooth service to Fizziq App.';
Blockly.Msg['FIZZ_TEMP'] = 'Temperature';
Blockly.Msg['FIZZ_HUM'] = 'Moisture';
Blockly.Msg['FIZZ_VOLTAGE'] = 'Voltage';
Blockly.Msg['FIZZ_WEIGHT'] = 'Weight';
Blockly.Msg['FIZZ_PRESSURE'] = 'Pressure';
Blockly.Msg['FIZZ_CONCENTRATION'] = 'Concentration';
Blockly.Msg['FIZZ_MAGNETIC'] = 'Magnetic field';
Blockly.Msg['FIZZ_BRIGHTNESS'] = 'Brightness';
Blockly.Msg['FIZZ_ACCELERATION'] = 'Acceleration';
Blockly.Msg['FIZZ_COMPASS'] = 'Compass';
// Communication - Serial connection
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_TITLE'] = 'write on serial port %1';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_TOOLTIP'] = 'Write a string on serial port.';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_WITH'] = 'with';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_NEWLINES'] = 'newline(s)';
Blockly.Msg['COMMUNICATION_SERIAL_ONDATARECEIVED_TITLE then'] = 'on serial data received in %1 then';
Blockly.Msg['COMMUNICATION_SERIAL_ONDATARECEIVED_TOOLTIP'] = 'Allows you to execute instructions if data is received by serial port in the \'serialData\' variable.';
Blockly.Msg['COMMUNICATION_COMPUTER_PLAYNOTE_TITLE'] = 'play music %1 in the serial port';
Blockly.Msg['COMMUNICATION_COMPUTER_PLAYNOTE_TOOLTIP'] = 'Play selected note until execution of "Stop music" block.';
Blockly.Msg['COMMUNICATION_COMPUTER_SETFREQUENCY_TITLE'] = 'play frequency %1 (Hz) on the computer';
Blockly.Msg['COMMUNICATION_COMPUTER_SETFREQUENCY_TOOLTIP'] = 'This block allows to play a given frequency on the computer';
Blockly.Msg['COMMUNICATION_COMPUTER_STOPMUSIC_TITLE'] = 'stop music of serial port';
Blockly.Msg['COMMUNICATION_COMPUTER_STOPMUSIC_TOOLTIP'] = 'Stop the current note of serial port.';
Blockly.Msg['COMMUNICATION_WRITEGRAPH_TITLE'] = 'write graph';
Blockly.Msg['COMMUNICATION_WRITEGRAPH_TOOLTIP'] = 'This block makes it possible to write (digital) data that will be visible in the plotter. It can be used with one or more blocks in "Name" and "Data" format. Click on icon \'Graphic mode\' to display graphics.';
Blockly.Msg['COMMUNICATION_DATA'] = 'Data';
Blockly.Msg['COMMUNICATION_PRINT_DATAS_TITLE'] = 'Name %1 Data %2';
Blockly.Msg['COMMUNICATION_PRINT_DATAS_TOOLTIP'] = 'This block is to be used in the "Write in graphic" block. It must contain the name of the (text) value to display and the value in question.';
// Communication - Data logging
Blockly.Msg['COMMUNICATION_OPENLOG_WRITE_TITLE'] = '[Openlog] write in the SD card %1 baudrate %2 on pins RXI %3 TXO %4 %5 Datas %6';
Blockly.Msg['COMMUNICATION_OPENLOG_WRITE_TOOLTIP'] = IMG_MODULE_OPENLOG + Blockly.Tooltip.SEP + 'Block enables writing data in the SD card of Openlog module.';
Blockly.Msg['COMMUNICATION_WRITE_SD_TITLE'] = '[SD M5Stack] escribir en la tarjeta SD con el archivo %1 los datos %2';
Blockly.Msg['COMMUNICATION_WRITE_SD_TOOLTIP'] = 'Permite escribir datos en la tarjeta micro SD de M5Stack.';
// Communication - Wireless
Blockly.Msg['COMMUNICATION_BLUETOOTH_SENDDATA_TITLE'] = '[Bluetooth] send on pins RX %1 TX %2 message %3';
Blockly.Msg['COMMUNICATION_BLUETOOTH_SENDDATA_TOOLTIP'] = IMG_MODULE_HC05 + Blockly.Tooltip.SEP + 'Enable to send any data by bluetooth HC05 module on pins RX/TX.';
Blockly.Msg['COMMUNICATION_BLUETOOTH_ONDATARECEIVED_TITLE'] = '[Bluetooth] on message received RX %1 TX %2 in %3 then';
Blockly.Msg['COMMUNICATION_BLUETOOTH_ONDATARECEIVED_TOOLTIP'] = IMG_MODULE_HC05 + Blockly.Tooltip.SEP + 'Allows you to execute instructions on data received by Bluetooth HC05 module in the \'bluetoothData\' variable on pins TX/RX.';
// Communication - Tracking modules
Blockly.Msg['COMMUNICATION_GPS_M5_GETINFORMATIONS_TITLE'] = '[Module GPS M5] get %1';
Blockly.Msg['COMMUNICATION_GPS_M5_GETINFORMATIONS_TOOLTIP'] = '';
Blockly.Msg['COMMUNICATION_GPS_M5_INFO_FRAME'] = 'complete frame';
Blockly.Msg['COMMUNICATION_GPS_M5_INFO_TIME'] = 'clock(h, m, s)';
Blockly.Msg['COMMUNICATION_GPS_M5_INFO_LATITUDE'] = 'latitude (°)';
Blockly.Msg['COMMUNICATION_GPS_M5_INFO_LONGITUDE'] = 'longitude (°)';
Blockly.Msg['COMMUNICATION_GPS_M5_INFO_SATELLITE'] = 'number of satellites used';
Blockly.Msg['COMMUNICATION_GPS_M5_INFO_SPEED'] = 'speed';
Blockly.Msg['COMMUNICATION_GPS_M5_INFO_COURSE'] = 'the cap';
Blockly.Msg['COMMUNICATION_GPS_INFO_TYPE'] = 'frame type';
Blockly.Msg['COMMUNICATION_GPS_INFO_CLOCK'] = 'clock (h, m, s)';
Blockly.Msg['COMMUNICATION_GPS_INFO_LATITUDE'] = 'latitude (°)';
Blockly.Msg['COMMUNICATION_GPS_INFO_LONGITUDE'] = 'longitude (°)';
Blockly.Msg['COMMUNICATION_GPS_INFO_SATELLITE'] = 'number of satellites used';
Blockly.Msg['COMMUNICATION_GPS_INFO_ALTITUDE'] = 'altitude (m)';
Blockly.Msg['COMMUNICATION_GPS_INFO_ALL_FRAME'] = 'all frame';
Blockly.Msg['COMMUNICATION_GPS_GET_NMEA_TITLE'] = '[GPS] NMEA frames on pins RX %1 TX %2';
Blockly.Msg['COMMUNICATION_GPS_GET_NMEA_TOOLTIP'] = IMG_MODULE_GPS + Blockly.Tooltip.SEP + 'Returns the list of NMEA frames read with the Grove SIM28 or Air530 GPS module on the RX/TX pins. The wires do not need to be reversed between the module pins and those indicated in the block. The inversion is done automatically in the python code.\nWarning: If you use the console to display GPS data, connect your card to the interface before sending the program by clicking on the button [>_ REPL]. Then transfer your program using the button [Download .hex].';
Blockly.Msg['COMMUNICATION_GPS_GGA_GETINFORMATIONS_TITLE'] = '[GPS] get %3 on RX %1 TX %2 pins';
Blockly.Msg['COMMUNICATION_GPS_GGA_GETINFORMATIONS_TOOLTIP'] = IMG_MODULE_GPS + Blockly.Tooltip.SEP + 'Returns the data selected among (frame type, clock, latitude, longitude, altitude) analyzed from the NMEA frame (GNGGA or GPGGA) read with the Grove SIM28 or Air530 GPS module on the RX/TX pins. The wires do not do not need to be reversed between the pins of the module and those indicated in the block. The reversal is done automatically in the python code.\nWarning: If you use the console to display the GPS data, connect your card to the interface before sending the program by clicking on the [>_ REPL] button. Then, transfer your program using the button [Download .hex].';
Blockly.Msg['COMMUNICATION_RTC_MODULE_PCF85063TP'] = 'High Precision (0x51)';
Blockly.Msg['COMMUNICATION_RTC_MODULE_DS1307'] = 'v1.2 (0x68)';
Blockly.Msg['COMMUNICATION_GROVERTC_SETDATE_TITLE'] = '[Clock RTC %1] initialize at %2 date %3';
Blockly.Msg['COMMUNICATION_GROVERTC_SETDATE_TOOLTIP'] = IMG_MODULE_RTC + Blockly.Tooltip.SEP + 'Allows you to initialize the date with the Grove High Precision RTC clock module (PCF85063TP) or RTC v1.2 (DS1307) so that you can read the exact date and time using the \'Read clock module\' block. Place in the \'on start\' block. Connect module on I2C port. Warning: To work, the DS1307 module must have a small flat battery.';
Blockly.Msg['DAY_MONDAY'] = 'monday';
Blockly.Msg['DAY_TUESDAY'] = 'tuesday';
Blockly.Msg['DAY_WEDNESDAY'] = 'wednesday';
Blockly.Msg['DAY_THURSDAY'] = 'thursday';
Blockly.Msg['DAY_FRIDAY'] = 'friday';
Blockly.Msg['DAY_SATURDAY'] = 'saturday';
Blockly.Msg['DAY_SUNDAY'] = 'sunday';
Blockly.Msg['COMMUNICATION_GROVERTC_SETHOUR_TITLE'] = '[Clock RTC %1] initialize at hour %2 minute %3 second %4';
Blockly.Msg['COMMUNICATION_GROVERTC_SETHOUR_TOOLTIP'] = IMG_MODULE_RTC + Blockly.Tooltip.SEP + 'Allows you to initialize the time the Grove High Precision RTC clock module (PCF85063TP) or RTC v1.2 (DS1307) so that you can read the exact date and time using the \'Read clock module\' block. Place in the \'on start\' block. Connect the module on I2C port. Warning: To work, the DS1307 module must have a small flat battery.';
Blockly.Msg['COMMUNICATION_GROVERTC_READTIME_TITLE'] = '[Clock RTC %1] read %2';
Blockly.Msg['COMMUNICATION_GROVERTC_READTIME_TOOLTIP'] = IMG_MODULE_RTC + Blockly.Tooltip.SEP + 'Read the date and time (choose from the drop-down menu) from Grove High Precision RTC clock module (PCF85063TP) or RTC v1.2 (DS1307). To obtain a correct result, first use the two blocks \'Initialize the clock module\'. Connect module on I2C port. Warning: To work, the DS1307 module must have a small flat battery.';
Blockly.Msg['CLOCK_ALL_DATA'] = 'time';
Blockly.Msg['CLOCK_YEAR'] = 'year';
Blockly.Msg['CLOCK_MONTH'] = 'month';
Blockly.Msg['CLOCK_MONTH_DAY'] = 'day of month';
Blockly.Msg['CLOCK_WEEK_DAY'] = 'day of week';
Blockly.Msg['CLOCK_HOUR'] = 'hour';
Blockly.Msg['CLOCK_MINUTE'] = 'minute';
Blockly.Msg['CLOCK_SECOND'] = 'second';
// Communication - UART
Blockly.Msg['COMMUNICATION_UART_INIT_TITLE'] = '[uart %1] init serial connection to RX %2 TX %3 Baudrate %4';
Blockly.Msg['COMMUNICATION_UART_INIT_TOOLTIP'] = 'Allows you to set the serial connection of the ESP32 board to the UART port (1 or 2). Port 0 is reserved for REPL.';
Blockly.Msg['COMMUNICATION_UART_WRITE_TITLE'] = '[uart %1] write data %2';
Blockly.Msg['COMMUNICATION_UART_WRITE_TOOLTIP'] = 'Allows writing data to UART port (1 or 2). By default the pins are as: UART 1 (tx=10, rx=9) and UART 2 ( tx=17, rx=16) Otherwise, use the block \'Set serial connection to RX TX Baudrate...\'.';
Blockly.Msg['COMMUNICATION_UART_READ_TITLE'] = '[uart %1] read data';
Blockly.Msg['COMMUNICATION_UART_READ_TOOLTIP'] = 'Read data from UART port (1 or 2). By default the pins are as: UART 1 (tx=10, rx=9) and UART 2 (tx =17, rx=16).Otherwise, use the block \'Set serial connection to RX TX Baudrate...\'.';
Blockly.Msg['COMMUNICATION_UART_READ_SIZE'] = 'data size';
Blockly.Msg['COMMUNICATION_UART_DATA_AVAILABLE_TITLE'] = '[uart %1] data available';
Blockly.Msg['COMMUNICATION_UART_DATA_AVAILABLE_TOOLTIP'] = 'Returns the size of data available on the UART port (1 or 2). By default, the pins are as: UART 1 (tx=10, rx=9) and UART 2 ( tx=17, rx=16). Otherwise, use the \'Set serial connection to RX TX Baudrate...\' block.';
// Display - Screen
Blockly.Msg['DISPLAY_LCD_SETTEXT_TITLE'] = '[LCD] mostrar texto %1 en la línea %2 posición %3';
Blockly.Msg['DISPLAY_LCD_SETTEXT_TOOLTIP'] = IMG_MODULE_LCD_3V3 + Blockly.Tooltip.SEP + 'Mostrar texto en la pantalla lcd 1602 de Grove. Conecte el lcd en el puerto I2C';
Blockly.Msg['DISPLAY_LCD_CLEAR_TITLE'] = '[LCD] limpiar pantalla';
Blockly.Msg['DISPLAY_LCD_CLEAR_TOOLTIP'] = IMG_MODULE_LCD_3V3 + Blockly.Tooltip.SEP + 'Habilitar para borrar todo el texto del lcd. Conecte el lcd en el puerto I2C';
Blockly.Msg['DISPLAY_OLED_ADDTEXT_TITLE'] = '[OLED] mostrar texto %1 en la posición x %2 y %3';
Blockly.Msg['DISPLAY_OLED_ADDTEXT_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Activar la escritura de texto en la pantalla OLED (128x64 px). Conecte la pantalla OLED en el puerto I2C';
Blockly.Msg['DISPLAY_OLED_SETPIXEL_TITLE'] = '[OLED] controla el píxel x %1 y %2 al estado %3';
Blockly.Msg['DISPLAY_OLED_SETPIXEL_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Habilitar para controlar cada píxel de la pantalla OLED (128x64 px). Conecte la pantalla OLED en el puerto I2C';
Blockly.Msg['DISPLAY_OLED_DRAWLINE_TITLE'] = '[OLED] dibuja una línea desde (%1, %2) hasta (%3, %4)';
Blockly.Msg['DISPLAY_OLED_DRAWLINE_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Permite dibujar una línea entre dos puntos en la pantalla OLED de Grove (128x64 px). Conecte la pantalla OLED en el puerto I2C';
Blockly.Msg['DISPLAY_OLED_SETBACKGROUND_TITLE'] = '[OLED] establecer fondo a %1';
Blockly.Msg['DISPLAY_OLED_WHITE'] = 'blanco';
Blockly.Msg['DISPLAY_OLED_BLACK'] = 'negro';
Blockly.Msg['DISPLAY_OLED_SETBACKGROUND_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Habilitar para invertir la pantalla OLED de Grove. Conecte la pantalla OLED en el puerto I2C';
Blockly.Msg['DISPLAY_OLED_CLEARSCREEN_TITLE'] = '[OLED] limpiar pantalla';
Blockly.Msg['DISPLAY_OLED_CLEARSCREEN_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Habilitar para borrar toda la pantalla OLED de Grove. Conecte la pantalla OLED en el puerto I2C';
Blockly.Msg['DISPLAY_OLED_DRAWICON_TITLE'] = '[OLED] show icon %1 at position x %2 y %3';
Blockly.Msg['DISPLAY_OLED_DRAWICON_TOOLTIP'] = IMG_MODULE_OLED + Blockly.Tooltip.SEP + 'Enable to show an icon from ESP32 Image library, at position (x,y) on the Grove OLED screen. Connect the OLED display on I2C port.';
// Display - Neopixel
Blockly.Msg['DISPLAY_NEOPIXEL_DEFINE_TITLE'] = '[Neopixel] define %1 LED en el pin %2';
Blockly.Msg['DISPLAY_NEOPIXEL_DEFINE_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Permite definir el número de LED del neopixel. Este bloque debe utilizarse en la configuración';
Blockly.Msg['DISPLAY_NEOPIXEL_LEDCONTROL_TITLE'] = '[Neopixel] establece el LED %1 en R %2 G %3 B %4 en el pin %5';
Blockly.Msg['DISPLAY_NEOPIXEL_LEDCONTROL_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Permite controlar cada color de LED de los neopixels como (R,G,B) de 0 a 255. Utilizar P15 para ajustar el neopixel Maqueen';
Blockly.Msg['DISPLAY_NEOPIXEL_SETPALETTECOLOR_TITLE'] = '[Neopixel] establece el LED %1 a %2 en el pin %3';
Blockly.Msg['DISPLAY_NEOPIXEL_SETPALETTECOLOR_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Habilitar para controlar cada color del LED del neopixel. Utilizar P15 para ajustar el neopixel Maqueen';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDRGB_TITLE'] = '[Neopixel] establece todos los LED al color R %1 G %2 B %3 en el pin %4';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDRGB_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Permite controlar todos los LED del neopixel al valor de color elegido como (R,G,B) de 0 a 255. Utilice P15 para ajustar el neopixel Maqueen';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDCOLOR_TITLE'] = '[Neopixel] establece todos los LED al color %1 en el pin %2';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDCOLOR_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Habilitar para controlar todos los LED del neopixel al valor de color elegido. Utilizar P15 para ajustar el neopixel Maqueen';
Blockly.Msg['DISPLAY_NEOPIXEL_RAINBOW_TITLE'] = '[Neopixel] establece un arco iris en el pin %1';
Blockly.Msg['DISPLAY_NEOPIXEL_RAINBOW_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Habilitar para mostrar un arco iris en el módulo neopixel, establecer el pin y el número de LED';
// Display - LED modules
Blockly.Msg['DISPLAY_SETGROVELED_TITLE'] = '[LED] controla el LED al estado %1 en el pin %2';
Blockly.Msg['DISPLAY_SETGROVELED_TOOLTIP'] = IMG_MODULE_LED + Blockly.Tooltip.SEP + 'Habilitar para encender o apagar el kit de LED Grove (0 o 1) en los pines digitales';
Blockly.Msg['DISPLAY_SETLEDINTENSITY_TITLE'] = '[LED] establece la intensidad del LED a %1 (%) en el pin %2';
Blockly.Msg['DISPLAY_SETLEDINTENSITY_TOOLTIP'] = IMG_MODULE_LED_PWM + Blockly.Tooltip.SEP + 'Habilitar para establecer la intensidad del LED de 0 a 100% en los pines PWM';
Blockly.Msg['DISPLAY_SET_VARIABLE_COLOR_LED_TITLE'] = '[LED de color variable] establece la intensidad a %1 (%) en el pin %2';
Blockly.Msg['DISPLAY_SET_VARIABLE_COLOR_LED_TOOLTIP'] = IMG_MODULE_LED_VARIABLE_COLOR + Blockly.Tooltip.SEP + 'Habilitar para establecer la intensidad del LED de 0 a 100 (%) en los pines PWM. Cuando se utiliza el módulo por primera vez, RGB se establecen en 0. Utilice un destornillador en R, G o B detrás del módulo para controlar el color del LED.';
Blockly.Msg['DISPLAY_4DIGIT_SETNUMBER_TITLE'] = '[Módulo de 4 dígitos] mostrar %1 %2 en los pines CLK %3 DIO %4';
Blockly.Msg['DISPLAY_4DIGIT_SETNUMBER_TOOLTIP'] = IMG_MODULE_4DIGITDISPLAY + Blockly.Tooltip.SEP + 'Habilitar para mostrar los números o la temperatura en la pantalla de 4 dígitos del módulo (TM1637) en los pines digitales';
Blockly.Msg['DISPLAY_4DIGIT_SETCLOCK_TITLE'] = '[Módulo de 4 dígitos] mostrar reloj en los pines CLK %1 DIO %2';
Blockly.Msg['DISPLAY_4DIGIT_SETCLOCK_TOOLTIP'] = IMG_MODULE_4DIGITDISPLAY + Blockly.Tooltip.SEP + 'Habilitar para mostrar el reloj en la pantalla de 4 dígitos de Grove (TM1637) en los pines digitales. Atención, obtener el reloj real sólo es posible si el ESP32 permanece en modo de encendido';
Blockly.Msg['DISPLAY_4DIGIT_NUMBER'] = 'número';
Blockly.Msg['DISPLAY_4DIGIT_TEMPERATURE'] = 'temperatura';
Blockly.Msg['DISPLAY_MY9221_SET_LEVEL_TITLE'] = '[Módulo de barras LED] establece el nivel de %1 en los pines DI %2 DCKI %3';
Blockly.Msg['DISPLAY_MY9221_SET_LEVEL_TOOLTIP'] = IMG_MODULE_LED_BAR + Blockly.Tooltip.SEP + 'Habilitar para mostrar el nivel del valor de entrada en la pantalla de la barra de LEDs de Grove (MY9221) en los pines digitales';
Blockly.Msg['DISPLAY_MY9221_REVERSE_TITLE'] = '[Módulo de barras LED] invierte la pantalla %1 DI pins %2 DCKI %3';
Blockly.Msg['DISPLAY_MY9221_REVERSE_TOOLTIP'] = IMG_MODULE_LED_BAR + Blockly.Tooltip.SEP + 'Permite invertir los 10 LEDs del módulo MY9221 con los pines digitales P0 a P20';
// Display - Chainable LED
Blockly.Msg['DISPLAY_CHAINABLERGBLED_DEFINE_TITLE'] = '[LED encadenable] definir %1 LED en pines CIN %2 DIN %3';
Blockly.Msg['DISPLAY_CHAINABLERGBLED_DEFINE_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Habilitar para definir el LED RGB encadenable con el número de LED en los pines digitales D0 hasta D13';
Blockly.Msg['DISPLAY_CHAINABLE_RGBLED_TITLE'] = '[LED encadenable] establece el LED %1 en R %2 G %3 B %4 en los pines CIN %5 DIN %6';
Blockly.Msg['DISPLAY_CHAINABLE_RGBLED_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Bloque que controla el color del LED RGB, da un valor entre 0 y 255 para el rojo, el verde y el azul';
Blockly.Msg['DISPLAY_CHAINABLE_PALETTERGBLED_TITLE'] = '[LED encadenable] establece el LED %1 en %2 en los pines CIN %3 DIN %4';
Blockly.Msg['DISPLAY_CHAINABLE_PALETTERGBLED_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Bloque que controla el color del LED RGB, elija un color de la paleta dada';
Blockly.Msg['DISPLAY_CHAINABLE_ALLRGBLED_TITLE'] = '[LED encadenable] establece todos los LED en R %1 G %2 B %3 en los pines CIN %4 DIN %5';
Blockly.Msg['DISPLAY_CHAINABLE_ALLRGBLED_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Bloque que controla el color de todos los LED RGB, da un valor entre 0 y 255 para el rojo, el verde y el azul';
Blockly.Msg['DISPLAY_CHAINABLE_PALETTEALLRGBLED_TITLE'] = '[LED encadenable] establece todos los LED en %1 en los pines CIN %2 DIN %3';
Blockly.Msg['DISPLAY_CHAINABLE_PALETTEALLRGBLED_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Bloque que controla el color de todos los LED, elija un color en la paleta dada';
Blockly.Msg['DISPLAY_CHAINABLE_RESETALLRGBLED_TITLE'] = '[LED encadenable] Apaga todos los LED en los pines CIN %1 DIN %2';
Blockly.Msg['DISPLAY_CHAINABLE_RESETALLRGBLED_TOOLTIP'] = IMG_MODULE_LED_RGB + Blockly.Tooltip.SEP + 'Bloqueo del apagado de todos los LED';
// Sensors - M5Stack
Blockly.Msg['SENSORS_READ_HALL_SENSOR_TITLE'] = 'Leer sensor hall';
Blockly.Msg['SENSORS_READ_HALL_SENSOR_TOOLTIP'] = 'Devuelve el valor del sensor hall de la placa';
Blockly.Msg['SENSORS_READ_PROCESSOR_TEMP_TITLE'] = 'Lee la temperatura del procesador en %1';
Blockly.Msg['SENSORS_READ_PROCESSOR_TEMP_TOOLTIP'] = 'Devuelve la temperatura de la placa del procesador';
// Sensors - Gas
Blockly.Msg['SENSORS_SGP30_READDATA_TITLE'] = '[Sensor SGP30] gas %1';
Blockly.Msg['SENSORS_SGP30_READDATA_TOOLTIP'] = IMG_MODULE_SGP30 + Blockly.Tooltip.SEP + 'Devuelve la cantidad de CO2 (en ppm) o TVOC (en ppb) en el aire del sensor sgp30. Conecte el sensor en el puerto I2C';
Blockly.Msg['SENSORS_SGP30_CO2'] = 'dióxido de carbono (CO2) (ppm)';
Blockly.Msg['SENSORS_SGP30_TVOC'] = 'compuestos orgánicos volátiles (TVOC) (ppb)';
Blockly.Msg['SENSORS_MULTICHANNEL_GETGAS_TITLE'] = '[Sensor de gas multicanal] gas %1 (ppm)';
Blockly.Msg['SENSORS_MULTICHANNEL_GETGAS_TOOLTIP'] = IMG_MODULE_MULTICHANNEL + Blockly.Tooltip.SEP + 'Devuelve la cantidad de gas elegida en el aire (en ppm) del sensor de gas multicanal de Grove. Conecte el sensor en el puerto I2C';
Blockly.Msg['SENSORS_MULTICHANNELV2_GETGAS_TITLE'] = '[Sensor de gas multicanal v2] gas %1 (V)';
Blockly.Msg['SENSORS_MULTICHANNELV2_GETGAS_TOOLTIP'] = IMG_MODULE_MULTICHANNEL_V2 + Blockly.Tooltip.SEP + 'Devuelve la cantidad de gas elegida en el aire (en V) del sensor multicanal de gas V2. Conecte el sensor en el puerto I2C';
Blockly.Msg['GAS_CO'] = 'monóxido de carbono (CO)';
Blockly.Msg['GAS_NO2'] = 'dióxido de nitrógeno (NO2)';
Blockly.Msg['GAS_C2H5OH'] = 'etanol (C2H5OH)';
Blockly.Msg['GAS_H2'] = 'dihidrógeno (H2)';
Blockly.Msg['GAS_NH3'] = 'amoníaco (NH3)';
Blockly.Msg['GAS_CH4'] = 'metano (CH4)';
Blockly.Msg['GAS_C3H8'] = 'propano (C3H8)';
Blockly.Msg['GAS_C4H10'] = 'isopropano (C4H10)';
Blockly.Msg['GAS_VOC'] = 'compuestos orgánicos volátiles (COV)';
Blockly.Msg['SENSORS_O2_GAS_READDATA_TITLE'] = '[Sensor de gas oxígeno] O2 (%) en el pin %1';
Blockly.Msg['SENSORS_O2_GAS_READDATA_TOOLTIP'] = IMG_MODULE_O2 + Blockly.Tooltip.SEP + 'Devuelve la concentración de O2 (en %) del sensor de O2 del Grove en los pines analógicos p34 a p36, o p39 (como A2 a A4 en el Grove del escudo)';
Blockly.Msg['SENSORS_SCD30_READDATA_TITLE'] = '[Sensor SCD30] %1';
Blockly.Msg['SENSORS_SCD30_READDATA_TOOLTIP'] = IMG_MODULE_SCD30 + Blockly.Tooltip.SEP + 'Devuelve la concentración de CO2 (en ppm), la humedad (en %) o la temperatura en Celsius (°C), Fahrenheit (°F) o Kelvin (K) del sensor SCD30 de Grove. Conecte el sensor en el puerto I2C';
Blockly.Msg['SENSORS_SCD30_CO2'] = 'dióxido de carbono (CO2) (ppm)';
Blockly.Msg['SENSORS_SCD30_TEMP'] = 'temperatura';
Blockly.Msg['SENSORS_SCD30_HUM'] = 'humedad (%)';
Blockly.Msg['SENSORS_SCD30_FORCED_CALIBRATION_TITLE'] = '[Sensor SCD30] forzar recalibración a %1 (ppm)';
Blockly.Msg['SENSORS_SCD30_FORCED_CALIBRATION_TOOLTIP'] = IMG_MODULE_SCD30 + Blockly.Tooltip.SEP + 'Forzar la calibración del sensor SCD30 al valor dado (en ppm). Salga al exterior (donde la concentración sea de aproximadamente 420 ppm, es decir, aire limpio), reinicie la placa y espere 2 minutos. Consejo: Utilice los botones SW1, SW2 o SW3 de la placa STM32 NUCLEO para controlar el inicio de la calibración. De lo contrario, al volver a conectar la placa, el programa se lanza y vuelve a realizar una calibración no solicitada';
Blockly.Msg['SENSORS_AIR_QUALITY_GETVALUE_TITLE'] = '[Sensor de calidad del aire] valor en el pin %1';
Blockly.Msg['SENSORS_AIR_QUALITY_GETVALUE_TOOLTIP'] = IMG_MODULE_AIR_QUALITY + Blockly.Tooltip.SEP + 'Devuelve el valor de la calidad del aire (de 0 a 4095) en los pines analógicos p34 a p36, o p39 (como A2 a A4 en el escudo Grove)';
Blockly.Msg['SENSORS_HM330X_GETPARTICULE_TITLE'] = '[Sensor HM330X] concentración de partículas %1 (µg/m3)';
Blockly.Msg['SENSORS_HM330X_GETPARTICULE_TOOLTIP'] = IMG_MODULE_HM330X + Blockly.Tooltip.SEP + 'Detecta la densidad de partículas en el aire con el sensor HM330X. Conecte el sensor en el puerto I2C';
Blockly.Msg['SENSORS_HM330X_ATM_PM1'] = 'PM1.0';
Blockly.Msg['SENSORS_HM330X_ATM_PM2_5'] = 'PM2.5';
Blockly.Msg['SENSORS_HM330X_ATM_PM10'] = 'PM10.0';
// Sensors - Climate
Blockly.Msg['SENSORS_TEMPERATURE'] = 'temperatura';
Blockly.Msg['SENSORS_HUMIDITY'] = 'humedad (%)';
Blockly.Msg['SENSORS_TEMPERATURE_IN'] = 'en';
Blockly.Msg['SENSORS_BMP280_READDATA_TITLE'] = '[Sensor BMP280 %1] %2';
Blockly.Msg['SENSORS_BMP280_READDATA_TOOLTIP'] = IMG_MODULE_BMP280 + Blockly.Tooltip.SEP + 'Devuelve la temperatura ambiente en grados Celius (°C), Fahrenheit (°F) o Kelvin (K), presión (en Pa). La altitud se inicializa en 0 cuando el programa se pone en marcha. Utiliza el sensor de barómetro Grove (dirección: 0x77, color: azul) o el sensor HW-611 280 (dirección: 0x76, color: púrpura). Conecte el sensor en el puerto I2C';
Blockly.Msg['SENSORS_BMP280_TEMP'] = 'temperatura';
Blockly.Msg['SENSORS_BMP280_PRESS'] = 'presión (Pa)';
Blockly.Msg['SENSORS_BMP280_ALT'] = 'altitud (m)';
Blockly.Msg['SENSORS_BME280_READDATA_TITLE'] = '[Sensor BME280] %1';
Blockly.Msg['SENSORS_BME280_READDATA_TOOLTIP'] = IMG_MODULE_ENVIRO_BIT + Blockly.Tooltip.SEP + 'Devuelve la temperatura ambiente en grados Celius (°C) de -40 à 85 °C, Fahrenheit (°F) o Kelvin (K), la humedad (en %), la pression (in Pascal) o la altitud (en m) con el enesor BME280 .';
Blockly.Msg['SENSORS_BME280_TEMP'] = 'temperatura';
Blockly.Msg['SENSORS_BME280_HUM'] = 'humedad (%)';
Blockly.Msg['SENSORS_BME280_PRESS'] = 'pression (Pa)';
Blockly.Msg['SENSORS_BME280_ALT'] = 'altitude (m)';
Blockly.Msg['SENSORS_GETGROVEHIGHTEMP_TITLE'] = 'temperatura del sensor H.T° en %1 en los pines A0 %2 A1 %3';
Blockly.Msg['SENSORS_GETGROVEHIGHTEMP_TOOLTIP'] = IMG_MODULE_HIGH_TEMPERATURE + Blockly.Tooltip.SEP + 'Devuelve la temperatura del termopar entre 50 y 600 °C con el sensor de alta temperatura de Grove. Conecte el sensor en los pines analógicos';
Blockly.Msg['SENSORS_GETGROVEMOISTURE_TITLE'] = '[Sensor de humedad] humedad en el pin %1';
Blockly.Msg['SENSORS_GETGROVEMOISTURE_TOOLTIP'] = IMG_MODULE_MOISTURE + Blockly.Tooltip.SEP + 'Devuelve la medición de la humedad (de 0 a 4095) del sensor de humedad de la arboleda en los pines IO34, 35 , 36 y 39';
Blockly.Msg['SENSORS_GETGROVETEMPERATURE_TITLE'] = '[Sensor de temperatura] temperatura en %1 en el pin %2';
Blockly.Msg['SENSORS_GETGROVETEMPERATURE_TOOLTIP'] = IMG_MODULE_TEMPERATURE + Blockly.Tooltip.SEP + 'Devuelve el valor del sensor de temperatura del Grove en grados Celius (°C), Fahrenheit (°F) o Kelvin (K) en los pines analógicos p34 a p36, o p39 (como A2 a A4 en el shield Grove)';
Blockly.Msg['SENSORS_DS18B20_GETTEMPERATURE_TITLE'] = '[Sensor DS18B20] temperatura en %1 en el pin %2';
Blockly.Msg['SENSORS_DS18B20_GETTEMPERATURE_TOOLTIP'] = IMG_MODULE_DS18B20 + Blockly.Tooltip.SEP + 'Devuelve el valor del sensor de temperatura impermeable DS18B20 en grados Celius (°C), Fahrenheit (°F) o Kelvin (K) en los pines digitales';
Blockly.Msg['SENSORS_DHT11_READDATA_TITLE'] = '[Sensor DHT11] %1 en el pin %2';
Blockly.Msg['SENSORS_DHT11_READDATA_TOOLTIP'] = IMG_MODULE_DHT11 + Blockly.Tooltip.SEP + 'Devuelve la temperatura en grados Celius (°C), Fahrenheit (°F) o Kelvin (K), o la humedad del aire (en %) del sensor dht11 en los pines digitales';
Blockly.Msg['SENSORS_DHT22_READDATA_TITLE'] = '[Sensor DHT22] %1 en el pin %2';
Blockly.Msg['SENSORS_DHT22_READDATA_TOOLTIP'] = IMG_MODULE_DHT22 + Blockly.Tooltip.SEP + 'Devuelve la temperatura en grados Celius (°C), Fahrenheit (°F) o Kelvin (K), o la humedad del aire (en %) con buena precisión del sensor dht22 en los pines digitales';
Blockly.Msg['SENSORS_TH02_READDATA_TITLE'] = '[Sensor TH02] %1';
Blockly.Msg['SENSORS_TH02_READDATA_TOOLTIP'] = IMG_MODULE_TH02 + Blockly.Tooltip.SEP + 'Devuelve la temperatura en grados Celsius (°C), Fahrenheit (°F) o Kelvin (K), o la humedad del aire (en %) del sensor TH02. Conecte el sensor en el puerto I2C';
Blockly.Msg['SENSORS_SHT31_READDATA_TITLE'] = '[Sensor SHT31] %1';
Blockly.Msg['SENSORS_SHT31_READDATA_TOOLTIP'] = IMG_MODULE_SHT31 + Blockly.Tooltip.SEP + 'Devuelve la temperatura en grados Celsius (°C), Fahrenheit (°F) o Kelvin (K), o la humedad del aire (en %) del sensor SHT31. Conecte el sensor en el puerto I2C';
Blockly.Msg['SENSORS_GETGROVEWATER_TITLE'] = '[Sensor de agua] cantidad de agua en el pin %1';
Blockly.Msg['SENSORS_GETGROVEWATER_TOOLTIP'] = IMG_MODULE_WATER + Blockly.Tooltip.SEP + 'Devuelve la cantidad de agua (de 0 a 255) del sensor de agua de la arboleda en los pines analógicos p34 a p36, o p39 (como A2 a A4 en la arboleda del escudo).';
Blockly.Msg['SENSORS_GETRAINGAUGE_TITLE'] = '[Sensor de pluviómetro] valor de estado en el pin %1';
Blockly.Msg['SENSORS_GETRAINGAUGE_TOOLTIP'] = IMG_MODULE_RAIN_GAUGE + Blockly.Tooltip.SEP + 'Devuelve el estado del pluviómetro (1 si está lloviendo o 0 en caso contrario) en los pines digitales';
Blockly.Msg['SENSORS_GETANEMOMETER_TITLE'] = '[Anemómetro] valor del estado en el pin %1';
Blockly.Msg['SENSORS_GETANEMOMETER_TOOLTIP'] = IMG_MODULE_ANEMOMETER + Blockly.Tooltip.SEP + 'Devuelve el estado del anemómetro de la ranura (dos veces el estado ALTO en cada rotación) en los pines digitales';
// Sensors - Sound & Light
Blockly.Msg['SENSORS_GETGROVELIGHT_TITLE'] = '[Sensor de luz] nivel de luz en el pin %1';
Blockly.Msg['SENSORS_GETGROVELIGHT_TOOLTIP'] = IMG_MODULE_LIGHT + Blockly.Tooltip.SEP + 'Devuelve el valor del sensor de luz de Grove (de 0 a 4095) en los pines analógicos p34 a p36, o p39 (como A2 a A4 en el shield Grove)';
Blockly.Msg['SENSORS_SI1145_GETLIGHT_TITLE'] = '[Sensor SI1145] obtener luz %1';
Blockly.Msg['SENSORS_SI1145_GETLIGHT_TOOLTIP'] = IMG_MODULE_SI1145 + Blockly.Tooltip.SEP + 'Devuelve el índice de luz ultravioleta, luz IR (en lumen) o luz visible (en lumen) del sensor si1145. Funciona con el sensor de luz solar Grove o el sensor GY1145. Conecte el sensor en el puerto I2C';
Blockly.Msg['SENSORS_SI1145_UV'] = 'Índice UV';
Blockly.Msg['SENSORS_SI1145_VISIBLE'] = 'visible (lumen)';
Blockly.Msg['SENSORS_SI1145_IR'] = 'infrarrojo (lumen)';
Blockly.Msg['SENSORS_GETUVINDEX_TITLE'] = '[Sensor Ultravioleta] Índice UV en el pin %1';
Blockly.Msg['SENSORS_GETUVINDEX_TOOLTIP'] = IMG_MODULE_UV + Blockly.Tooltip.SEP + 'Devuelve el índice UV, para ondas entre 240 nm y 380 nm, con el sensor UV Grove en los pines analógicos p34 a p36, o p39 (como A2 a A4 en el escudo Grove)';
Blockly.Msg['SENSORS_GROVECOLOR_GETDATA_TITLE'] = '[Sensor de color] %1';
Blockly.Msg['SENSORS_GROVECOLOR_GETDATA_TOOLTIP'] = IMG_MODULE_I2C_COLOR + Blockly.Tooltip.SEP + 'Permite leer el nivel de uno de los tres colores primarios con el sensor de color de Grove, devuelve un nivel entre 0 y 255';
Blockly.Msg['SENSORS_GETGROVESOUND_TITLE'] = '[Sensor de sonido] nivel de sonido (dB) en el pin %1 ';
Blockly.Msg['SENSORS_GETGROVESOUND_TOOLTIP'] = IMG_MODULE_SOUND_LOUDNESS + Blockly.Tooltip.SEP + 'Devuelve el valor del sensor de sonido de Grove (de 0 a 1023 convertido en dB) en los pines analógicos p34 a p36, o p39 (como A2 a A4 en el escudo Grove)';
// Sensors - Distance & Motion
Blockly.Msg['SENSORS_GETGROVEULTRASONIC_TITLE'] = '[Sensor Ultrasónico %1] obtener %2';
Blockly.Msg['SENSORS_GETGROVEULTRASONIC_TOOLTIP'] = IMG_MODULE_ULTRASONIC + Blockly.Tooltip.SEP + 'Devuelve la medida de la distancia (en centímetros) del sensor ultrasónico del ranger en los pines digitales. Atención, si es un sensor de ranger, TRIG y ECHO están conectados a SIG';
Blockly.Msg['SENSORS_ULTRASONIC_DISTANCE'] = 'distancia (cm)';
Blockly.Msg['SENSORS_ULTRASONIC_DURATION'] = 'duración del viaje de ida y vuelta (µs)';
Blockly.Msg['SENSORS_GETGESTURE_TITLE'] = 'tipo de gesto del sensor';
Blockly.Msg['SENSORS_GETGESTURE_TOOLTIP'] = IMG_MODULE_GESTURE + Blockly.Tooltip.SEP + 'Devuelve el tipo de gesto (\'derecha\', \'izquierda\', \'arriba\', \'abajo\', \'hacia delante\', \'hacia atrás\', \'en el sentido de las agujas del reloj\', \'en sentido contrario\') del sensor de gestos Grove. Conecte el sensor en el puerto I2C';
Blockly.Msg['SENSORS_ONGESTUREDETECTED_TITLE'] = '[Sensor de gestos] en el gesto %1 detectado entonces';
Blockly.Msg['SENSORS_ONGESTUREDETECTED_TOOLTIP'] = IMG_MODULE_GESTURE + Blockly.Tooltip.SEP + 'Ejecutar las instrucciones si el id de gesto seleccionado es detectado por el sensor de gestos de Grove. Conecte el sensor en el puerto I2C';
Blockly.Msg['SENSORS_GESTURE_RIGHT'] = 'derecho';
Blockly.Msg['SENSORS_GESTURE_LEFT'] = 'izquierda';
Blockly.Msg['SENSORS_GESTURE_UP'] = 'arriba';
Blockly.Msg['SENSORS_GESTURE_DOWN'] = 'abajo';
Blockly.Msg['SENSORS_GESTURE_FORWARD'] = 'hacia adelante';
Blockly.Msg['SENSORS_GESTURE_BACKWARD'] = 'hacia atrás';
Blockly.Msg['SENSORS_GESTURE_CLOCKWISE'] = 'en el sentido de las agujas del reloj';
Blockly.Msg['SENSORS_GESTURE_ANTICLOCKWISE'] = 'en sentido contrario a las agujas del reloj';
Blockly.Msg['SENSORS_GESTURE_WAVE'] = 'onda';
Blockly.Msg['SENSORS_GETGROVELINEFINDER_TITLE'] = '[Sensor del buscador de líneas] estado del buscador de líneas en el pin %1';
Blockly.Msg['SENSORS_GETGROVELINEFINDER_TOOLTIP'] = IMG_MODULE_LINE_FINDER + Blockly.Tooltip.SEP + 'Devuelve el estado del sensor táctil de ranura (0 o 1) en los pines digitales';
Blockly.Msg['SENSORS_GETGROVEMOTION_TITLE'] = '[Sensor de movimiento PIR] valor del estado de movimiento en el pin %1';
Blockly.Msg['SENSORS_GETGROVEMOTION_TOOLTIP'] = IMG_MODULE_MOTION + Blockly.Tooltip.SEP + 'Devuelve el estado de movimiento del PIR (0 si hay movimiento o 1 en caso contrario) en los pines digitales';
Blockly.Msg['SENSORS_GETPIEZOVIBRATION_TITLE'] = '[Sensor de vibración piezoeléctrico] valor del estado en el pin %1';
Blockly.Msg['SENSORS_GETPIEZOVIBRATION_TOOLTIP'] = IMG_MODULE_VIBRATIONS + Blockly.Tooltip.SEP + 'Devuelve el estado de vibración (0 o 1) del sensor piezoeléctrico de vibración en los pines digitales';
Blockly.Msg['SENSORS_GETGROVETILT_TITLE'] = '[Módulo de inclinación] estado de inclinación en el pin %1';
Blockly.Msg['SENSORS_GETGROVETILT_TOOLTIP'] = IMG_MODULE_TILT + Blockly.Tooltip.SEP + 'Devuelve el estado de inclinación de la arboleda (0 o 1) en los pines digitales';
// Other sensors
Blockly.Msg['SENSORS_GETGROVEBUTTON_TITLE'] = '[Módulo de botones] botón %1 en el pin %2';
Blockly.Msg['SENSORS_GETGROVEBUTTON_TOOLTIP'] = IMG_MODULE_BUTTON + Blockly.Tooltip.SEP + 'Devuelve el valor numérico del botón Grove (0/1 o 0V/3.3V) en los pines digitales';
Blockly.Msg['SENSORS_GETGROVEBUTTON_VOLTAGE'] = 'voltaje';
Blockly.Msg['SENSORS_GETGROVEBUTTON_STATE'] = 'estado';
// Actuators
Blockly.Msg['ACTUATORS_SERVO_SETANGLE_TITLE'] = '[Actuador] ángulo de control en %1 en el husillo %2';
Blockly.Msg['ACTUATORS_SERVO_SETANGLE_TOOLTIP'] = IMG_MODULE_SERVO + Blockly.Tooltip.SEP + 'Permite controlar el ángulo de un servomotor (de 0 a 180) en los pines digitales. Tenga en cuenta que el conjunto debe ser alimentado por una batería para proporcionar suficiente corriente al servomotor';
Blockly.Msg['ACTUATORS_CONTINUOUS_SERVO_SETSPEED_TITLE'] = '[Continuous servo] control speed at %1 (%) direction %2 on spindle %3';
Blockly.Msg['ACTUATORS_CONTINUOUS_SERVO_SETSPEED_TOOLTIP'] = IMG_MODULE_CONTINUOUS_SERVO + Blockly.Tooltip.SEP + 'Permite controlar la velocidad (de 0 a 100%) de un servomotor continuo en los pines PWM';
Blockly.Msg['ACTUATORS_MOTOR_SETPOWER_TITLE'] = '[Motor] controla la potencia en %1 en el pin %2';
Blockly.Msg['ACTUATORS_MOTOR_SETPOWER_TOOLTIP'] = IMG_MODULE_MOTOR + Blockly.Tooltip.SEP + 'Permite controlar la potencia de un motor (de 0 a 1023) en los pines digitales. Tenga cuidado, el conjunto debe ser alimentado por una batería para proporcionar suficiente corriente al motor';
Blockly.Msg['ACTUATORS_GROVERELAY_CONTROL_TITLE'] = '[Módulo de relé] controla el relé en estado %1 en el pin %2';
Blockly.Msg['ACTUATORS_GROVERELAY_CONTROL_TOOLTIP'] = IMG_MODULE_RELAY + Blockly.Tooltip.SEP + 'Permite controlar el valor del relé (0 o 1) en los pines digitales';
Blockly.Msg['ACTUATORS_GROVEVIBRATIONMOTOR_CONTROL_TITLE'] = '[Motor de vibración] controla el motor en el estado %1 en el pin %2';
Blockly.Msg['ACTUATORS_GROVEVIBRATIONMOTOR_CONTROL_TOOLTIP'] = IMG_MODULE_VIBRATION_MOTOR + Blockly.Tooltip.SEP + 'Activa o desactiva el motor de vibración del surco (0 o 1) en los pines digitales';
// Actuators - Music
Blockly.Msg['ACTUATORS_MUSIC_PLAYMUSIC_TITLE'] = '[Zumbador/altavoz] reproducir música %1 en %2';
Blockly.Msg['ACTUATORS_MUSIC_PLAYMUSIC_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Activar la reproducción de la música elegida en el módulo zumbador Grove (o altavoz) en los pines digitales';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_NOTES_TITLE'] = '[Buzzer/Speaker] reproducir notas en';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_NOTES_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Activar la reproducción de notas en el módulo Grove buzzer (o altavoz) en los pines digitales';
Blockly.Msg['ACTUATORS_MUSIC_NOTE_TITLE'] = 'nota %1 en la octava %2 con duración %3';
Blockly.Msg['ACTUATORS_MUSIC_NOTE_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Define una nota con octava y duración';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_FREQUENCY_TITLE'] = '[Zumbador/Parlante] reproducir frecuencia %1 durante %2 (ms) en %3';
Blockly.Msg['ACTUATORS_MUSIC_PLAY_FREQUENCY_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Activar la reproducción de la frecuencia entera en el módulo zumbador (o altavoz) Grove en los pines digitales';
Blockly.Msg['ACTUATORS_MUSIC_STOP_TITLE'] = '[Zumbador/Parlante] detener la música en %1';
Blockly.Msg['ACTUATORS_MUSIC_STOP_TOOLTIP'] = IMG_MODULE_BUZZER_SPEAKER + Blockly.Tooltip.SEP + 'Activar para detener la música del módulo zumbador (o altavoz) Grove en los pines digitales';
// Notes
Blockly.Msg['NOTE_C'] = 'C';
Blockly.Msg['NOTE_C_SHARP'] = 'C#';
Blockly.Msg['NOTE_D'] = 'D';
Blockly.Msg['NOTE_D_SHARP'] = 'D#';
Blockly.Msg['NOTE_E'] = 'E';
Blockly.Msg['NOTE_F'] = 'F';
Blockly.Msg['NOTE_F_SHARP'] = 'F#';
Blockly.Msg['NOTE_G'] = 'G';
Blockly.Msg['NOTE_G_SHARP'] = 'G#';
Blockly.Msg['NOTE_A'] = 'A';
Blockly.Msg['NOTE_A_SHARP'] = 'A#';
Blockly.Msg['NOTE_B'] = 'B';
Blockly.Msg['MUSIC_SILENCE'] = 'Silencio';