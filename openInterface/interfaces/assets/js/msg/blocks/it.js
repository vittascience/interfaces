/**
 * @fileoverview Common italian messages for interfaces. (IT)
 */

'use strict';

Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "variabile";
Blockly.Msg["UNNAMED_KEY"] = "senza nome";
Blockly.Msg["TODAY"] = "Oggi";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";

// Workspace.
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Dì qualcosa...";
Blockly.Msg["WORKSPACE_ARIA_LABEL"] = "Area di lavoro di Blockly";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "I blocchi compressi contengono avvertimenti.";

// Context menus.
Blockly.Msg["DUPLICATE_BLOCK"] = "Duplica";
Blockly.Msg["ADD_COMMENT"] = "Aggiungi un commento";
Blockly.Msg["REMOVE_COMMENT"] = "Elimina un commento";
Blockly.Msg["DUPLICATE_COMMENT"] = "Duplica il commento";
Blockly.Msg["EXTERNAL_INPUTS"] = "Input esterni";
Blockly.Msg["INLINE_INPUTS"] = "Input in linea";
Blockly.Msg["DELETE_BLOCK"] = "Elimina il blocco";
Blockly.Msg["DELETE_X_BLOCKS"] = "Elimina %1 blocchi";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Eliminare questi %1 blocchi ?";
Blockly.Msg["CLEAN_UP"] = "Pulisci i blocchi";
Blockly.Msg["COLLAPSE_BLOCK"] = "Comprimi il blocco";
Blockly.Msg["COLLAPSE_ALL"] = "Comprimi i blocchi";
Blockly.Msg["EXPAND_BLOCK"] = "Espandi il blocco";
Blockly.Msg["EXPAND_ALL"] = "Espandi i blocchi";
Blockly.Msg["DISABLE_BLOCK"] = "Disattiva il blocco";
Blockly.Msg["ENABLE_BLOCK"] = "Attiva il blocco";
Blockly.Msg["HELP"] = "Guida";
Blockly.Msg["UNDO"] = "Annulla";
Blockly.Msg["REDO"] = "Ripeti";

// IOS.
Blockly.Msg["IOS_OK"] = "OK";
Blockly.Msg["IOS_CANCEL"] = "Annulla";
Blockly.Msg["IOS_ERROR"] = "Errore";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "INPUT";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Aggiungi un input";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Dichiarazioni consentite";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "Questa funzione ha input duplicati.";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Aggiungi una variabile";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Aggiungi";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Rinomina";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Elimina";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Nome della variabile";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "Non puoi utilizzare un nome di variabile vuoto.";

// Variable renaming.
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Modifica il valore:";
Blockly.Msg["RENAME_VARIABLE"] = "Rinomina la variabile...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Rinomina tutte le variabili \"%1\" come:";

// Variable creation.
Blockly.Msg["NEW_VARIABLE"] = "Crea una variabile...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Crea una variabile stringa...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Crea una variabile numero...";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Crea una variabile colore...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "Il nome della nuova variabile:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Nuovo tipo di variabile:";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "Una variabile con nome \"%1\" esiste già.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Una variabile con nome \"%1\" esiste già per un altro tipo: \"%2\".";

// Variable deletion.
Blockly.Msg["DELETE_VARIABLE"] = "Elimina la variabile \"%1\"";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Elimina %1 usi della variabile \"%2\" ?";
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Non è possibile cancellare la variabile \"%1\" perché fa parte della definizione della funzione \"%2\"";

// Warning text.
Blockly.Msg["LOGIC_COMPARE_WARNING"] = "Non è possibile confrontare il primo input di tipo \"%1\" \n con il secondo di tipo \"%2\"";
Blockly.Msg["LOGIC_TERNARY_WARNING"] = "Non è possibile restituire il primo input di tipo \"%1\" \n con il secondo di tipo \"%2\"";
Blockly.Msg["VARIABLES_SET_WARNING"] = "La variabile '%1' è già stata dichiarata per il tipo '%2'\n\n e questo blocco sta tentando di impostarla per il tipo '%3'."
Blockly.Msg["VARIABLES_SET_WARNING_NUMBERS"] = "Aiuto: forse usare <convert X to 'float'>\n block nell'inizializzazione variabile.";

// Start blocks.
Blockly.Msg["ON_START_TITLE"] = "All'avvio";
Blockly.Msg["ON_START_TOOLTIP"] = "Aggiungi istruzioni in questo blocco per eseguirle all'avvio della scheda STM32.";
Blockly.Msg["FOREVER_TITLE"] = "Ripeti indefinitamente";
Blockly.Msg["FOREVER_TOOLTIP"] = "Aggiungi istruzioni in questo blocco per eseguirle in un ciclo.";

// Colors
Blockly.Msg["COLOR_LEVEL_RED"] = "livello di rosso";
Blockly.Msg["COLOR_LEVEL_GREEN"] = "livello di verde";
Blockly.Msg["COLOR_LEVEL_BLUE"] = "livello di blu";

// Colour blocks.
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://fr.wikipedia.org/wiki/Couleur";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Scegli un colore dalla tavolozza.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "colore casuale";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Scegli un colore a caso.";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Crea un colore con la quantità specificata di rosso, verde e blu. I valori devono essere compresi tra 0 e 100.";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "mescola";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "colore 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "colore 2";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "rapporto";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Mescola due colori in una data proporzione (da 0,0 a 1,0).";
Blockly.Msg["COLOUR_RED"] = "rosso";
Blockly.Msg["COLOUR_GREEN"] = "verde";
Blockly.Msg["COLOUR_BLUE"] = "blu";
Blockly.Msg["COLOUR_CYAN"] = "ciano";
Blockly.Msg["COLOUR_FUCHSIA"] = "fucsia";
Blockly.Msg["COLOUR_YELLOW"] = "giallo";
Blockly.Msg["COLOUR_BLACK"] = "nero";
Blockly.Msg["COLOUR_WHITE"] = "bianco";
Blockly.Msg["COLOUR_PURPLE"] = "viola";

// Exception
Blockly.Msg["EXCEPTION_RAISE_TOOLTIP"] = "sollevare un'eccezione";
Blockly.Msg["EXCEPTION_EXCEPTION_TOOLTIP"] = "creare un'eccezione";
Blockly.Msg["EXCEPTION_TYPE_TOOLTIP"] = "Todos los tipos de excepción posibles";
Blockly.Msg["EXCEPTION_TRY_TOOLTIP"] = "Ejecuta un bloque de código y permite ejecutar un bloque de código en caso de excepción";

// Logic blocks.
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Se un valore è vero, allora esegui alcune istruzioni.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Se un valore è vero, allora esegui il primo blocco di istruzioni. Altrimenti esegui il secondo blocco di istruzioni.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Se il primo valore è vero, allora esegui il primo blocco di istruzioni. Altrimenti, se il secondo valore è vero, esegui il secondo blocco di istruzioni.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Se il primo valore è vero, allora esegui il primo blocco di istruzioni. Altrimenti, se il secondo valore è vero, esegui il secondo blocco di istruzioni. Se nessuno dei valori è vero, esegui l'ultimo blocco di istruzioni.";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "se %1 allora";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "altrimenti se";
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = "allora";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "altrimenti";
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Aggiungi, elimina o riordina le sezioni per riconfigurare questo blocco se.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Aggiungi una condizione al blocco se.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Aggiungi una condizione finale omnicomprensiva al blocco se.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = "altrimenti se";
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = "altrimenti";
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = "se %1 allora";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://fr.wikipedia.org/wiki/In%C3%A9galit%C3%A9_(math%C3%A9matiques)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Restituisci true se i due input sono uguali.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Restituisci true se i due input sono diversi.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Restituisci true se il primo input è minore del secondo.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Restituisci true se il primo input è minore o uguale al secondo.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Restituisci true se il primo input è maggiore del secondo.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Restituisci true se il primo input è maggiore o uguale al secondo.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_IS"] = "Restituisce true se la prima voce è identica alla seconda";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_ISNOT"] = "Restituisce true se la prima voce non è identica alla seconda";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_IN"] = "Restituisce true se la prima voce è presente nella seconda";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NOTIN"] = "Restituisce true se la prima voce non è presente nella seconda";
Blockly.Msg["LOGIC_COMPARE_2_TOOLTIP"] = "Restituisce true se il valore è compreso tra un minimo e un massimo.";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg["LOGIC_OPERATION_AND"] = "e";
Blockly.Msg["LOGIC_OPERATION_OR"] = "o";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Restituisci vero se i due input sono veri.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Restituisci vero se almeno uno degli input è vero.";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "vero";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "falso";
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Restituisce vero o falso.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "non %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Restituisce vero se l'input è falso. Restituisce falso se l'input è vero.";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TITLE"] = "nullo";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Restituisce valore nullo.";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "se vero";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "se falso";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Verifica la condizione in \"test\". Se questa è vera, restituisce il valore \"se vero\" ; altrimenti restituisce il valore \"se falso\".";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "http://fr.wikipedia.org/wiki/Boucle_for";
Blockly.Msg["LOGIC_ASSERT_TOOLTIP"] = "Verifica se una condizione è vera. Se la condizione è falsa, genera un errore e interrompe l'esecuzione del programma.";
Blockly.Msg["LOGIC_ASSERT_HELPURL"] = "https://en.wikipedia.org/wiki/Assertion_(software_development)";

// Loop blocks.
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "ripeti %1 volte";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Esegui alcune istruzioni più volte.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "ripeti fino a che";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "ripeti fintanto che";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Finché un valore è falso, esegui alcune istruzioni.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Fintanto che un valore è vero, esegui alcune istruzioni.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg["CONTROLS_FOR_TITLE"] = "conta con %1 da %2 a %3 per passi di %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Fai in modo che la variabile \" %1 \" assuma i valori dal numero di partenza a quello di arrivo, con il passo specificato, ed esegui le istruzioni indicate.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "per ogni elemento %1 dell'elenco %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "Per ogni elemento di un elenco, assegna il valore dell'elemento alla variabile \"%1\" e quindi esegui alcune istruzioni.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "esci dal ciclo";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "passa all'iterazione successiva del ciclo";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Esci dal ciclo esterno.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Salta il resto di questo ciclo e prosegui con l'iterazione successiva.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_PASS_TITLE"] = "non fare nulla";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_PASS_TOOLTIP"] = "Non fare nulla.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Attenzione: questo blocco può essere utilizzato solo in un ciclo.";
Blockly.Msg["CONTROLS_LISTCOMP_TITLE"] = "Crea un elenco con %1 per %2 in %3";
Blockly.Msg["CONTROLS_LISTCOMP_TOOLTIP"] = "Crea una lista di comprensione";
Blockly.Msg["CONTROLS_RANGE_TITLE_1"] = "Crea una sequenza con : fine ";
Blockly.Msg["CONTROLS_RANGE_TITLE_2"] = ", inizio ";
Blockly.Msg["CONTROLS_RANGE_TITLE_3"] = ", passo ";
Blockly.Msg["CONTROLS_RANGE_TOOLTIP"] = "Crea una sequenza di numeri";

// Math blocks.
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://fr.wikipedia.org/wiki/Nombre";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Un numero.";
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://fr.wikipedia.org/wiki/Arithmetique";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Restituisce la somma dei due numeri.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Restituisce la differenza tra i due numeri.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Restituisce il quoziente dei due numeri.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Restituisce il prodotto dei due numeri.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Restituisce il primo numero elevato alla potenza del secondo.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://fr.wikipedia.org/wiki/Racine_carree";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "radice quadrata";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "valore assoluto";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Restituisce la radice quadrata di un numero.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Restituisce il valore assoluto di un numero.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Restituisce l'opposto di un numero";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Restituisce e elevato alla potenza di un numero.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Restituisce il logaritmo naturale di un numero.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Restituisce il logaritmo decimale di un numero.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Restituisce 10 elevato alla potenza di un numero.";
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://fr.wikipedia.org/wiki/Fonction_trigonom%C3%A9trique";
Blockly.Msg["MATH_TRIG_COS"] = "cos";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";
Blockly.Msg["MATH_TRIG_TAN"] = "tan";
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Restituisce il coseno di un angolo in gradi (non in radianti).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Restituisce il seno di un angolo in gradi (non in radianti).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Restituisce la tangente di un angolo in gradi (non in radianti).";
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Restituisce l'arcocoseno di un numero.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Restituisce l'arcoseno di un numero.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Restituisce l'arcotangente di un numero.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS_RAD"] = "Restituisce il coseno di un angolo in radianti.";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN_RAD"] = "Restituisce il seno di un angolo in radianti.";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN_RAD"] = "Restituisce la tangente di un angolo in radianti.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://fr.wikipedia.org/wiki/Table_de_constantes_math%C3%A9matiques";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Restituisce una delle costanti comuniː π (3,141…), e (2,718…), φ (1,618…), radq(2) (1,414…), radq(½) (0,707…) o ∞ (infinito).";
Blockly.Msg["MATH_IS_EVEN"] = "è pari";
Blockly.Msg["MATH_IS_ODD"] = "è dispari";
Blockly.Msg["MATH_IS_PRIME"] = "è primo";
Blockly.Msg["MATH_IS_WHOLE"] = "è intero";
Blockly.Msg["MATH_IS_POSITIVE"] = "è positivo";
Blockly.Msg["MATH_IS_NEGATIVE"] = "è negativo";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "è divisibile per";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Verifica se un numero è pari, dispari, primo, intero, positivo, negativo o se è divisibile per un certo numero. Restituisce vero o falso.";
Blockly.Msg["MATH_MAP_TITLE"] = "trasforma il valore %1 da [ %2 - %3 ] a [ %4 - %5 ]";
Blockly.Msg["MATH_MAP_TOOLTIP"] = "trasforma un valore da una matrice data [min;max] in un'altra matrice [min;max]";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://fr.wikipedia.org/wiki/Arrondi_(math%C3%A9matiques)";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "arrotonda";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "arrotonda per difetto";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "arrotonda per eccesso";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Arrotonda un numero verso l'alto o verso il basso.";
Blockly.Msg["MATH_ROUND_NDIGITS_TITLE"] = "arrotonda %1 a %2 cifre decimali";
Blockly.Msg["MATH_ROUND_NDIGITS_TOOLTIP"] = "Arrotonda un numero a n cifre significative.";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://fr.wikipedia.org/wiki/Modulo_(op%C3%A9ration)";
Blockly.Msg["MATH_MODULO_TITLE"] = "resto di %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Restituisce il resto della divisione euclidea dei due numeri.";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "limita %1 tra %2 e %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Limita un numero entro i limiti indicati (inclusi).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://fr.wikipedia.org/wiki/G%C3%A9n%C3%A9rateur_de_nombres_al%C3%A9atoires";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "intero casuale tra %1 e %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Restituisci un numero intero casuale compreso tra i due limiti indicati, inclusi.";
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://fr.wikipedia.org/wiki/G%C3%A9n%C3%A9rateur_de_nombres_al%C3%A9atoires";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "frazione casuale";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Restituisci una frazione casuale compresa fra 0,0 (incluso) e 1,0 (escluso).";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://fr.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 di X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Restituisce l'arcotangente del punto (X, Y) in gradi da -180 a 180.";
Blockly.Msg["MATH_ATAN2_RAD_TOOLTIP"] = "Restituisce l'arcotangente del punto (X, Y) in radianti da -π a π.";
Blockly.Msg["MATH_MIN_MAX_TOOLTIP"] = "Restituisce il numero più piccolo o più grande tra i valori dati";
// Text blocks.
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://fr.wikipedia.org/wiki/Cha%C3%AEne_de_caract%C3%A8res";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "Una lettera, una parola o una riga di testo.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "crea il testo";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Crea un blocco di testo unendo un numero qualsiasi di elementi.";
Blockly.Msg["TEXT_NEWLINE_TITLE"] = "%1 interruzioni di riga";
Blockly.Msg["TEXT_NEWLINE_TOOLTIP"] = "Aggiungi nuove righe in un testo.";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_APPEND_TITLE"] = "aggiungi il testo %2 a %1";
Blockly.Msg["TEXT_APPEND_VARIABLE"] = "variabile";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Aggiungi testo alla variabile \"%1\".";
Blockly.Msg["TEXT_SPLIT_TITLE"] = "separa il testo %1 con %2";
Blockly.Msg["TEXT_SPLIT_TOOLTIP"] = "Restituisce l'elenco degli elementi del testo separati dal delimitatore.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_LENGTH_TITLE"] = "lunghezza di %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Restituisce il numero di lettere (inclusi gli spazi) nel testo fornito.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 è vuoto";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Restituisce vero se il testo fornito è vuoto.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "trova la prima occorrenza della stringa";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "trova l'ultima occorrenza della stringa";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "nel testo %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Restituisce l'indice della prima/ultima occorrenza della prima stringa all'interno della seconda. Restituisce %1 se la stringa non viene trovata.";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg["TEXT_CHARAT_TITLE"] = "nel testo %1 %2";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "prendi la prima lettera";
Blockly.Msg["TEXT_CHARAT_LAST"] = "prendi l'ultima lettera";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "prendi la lettera indice";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "prendi la lettera indice (dalla fine)";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "prendi una lettera a caso";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Restituisce la lettera nella posizione indicata.";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "prendi la sotto-stringa dalla prima lettera";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "prendi la sotto-stringa dalla lettera indice";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "prendi la sotto-stringa dalla lettera indice (dalla fine)";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "fimo all'ultima lettera";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "fino alla lettera indice";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "fino alla lettera indice (dalla fine)";
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "nel testo";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Restituisce una parte indicata del testo.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg["TEXT_CHANGECASE_TITLE"] = "metti %1 in %2";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "minuscole";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "Maiuscola All'inizio Di Ogni Parola";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "MAIUSCOLE";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Restituisci una copia del testo in un diverso formato maiuscole/minuscole.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg["TEXT_TRIM_TITLE"] = "rimuovi gli spazi %1 di %2";
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "da entrambi i lati";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "dal lato sinistro";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "dal lato destro";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Restituisci una copia del testo con gli spazi rimossi da una o da entrambe le estremità.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_TITLE"] = "conta occorrenze di %1 in %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Conta quante volte un dato testo appare all'interno di un altro.";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_TITLE"] = "sostituisci %1 con %2 in %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Sostituisci tutte le occorrenze di un testo con un altro.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_TITLE"] = "inverti %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Inverte l'ordine dei caratteri nel testo.";
Blockly.Msg["TEXT_COMMENT_TITLE"] = "Commento %1";
Blockly.Msg["TEXT_COMMENT_TOOLTIP"] = "Aggiungi un commento nel codice.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_PRINT_TITLE"] = "visualizza %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Visualizza il testo, il numero o un altro valore specificato.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Chiedi un numero all'utente.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Chiedi un testo all'utente.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "richiedi un numero con un messaggio";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "richiedi un testo con un messaggio";
Blockly.Msg["TEXT_COUNT_CHARACTERS_TITLE"] = "conta le occorrenze di %1 in %2";
Blockly.Msg["TEXT_COUNT_CHARACTERS_TOOLTIP"] = "Conta il numero di lettere maiuscole, minuscole, cifre o caratteri speciali in una stringa.";
Blockly.Msg["TEXT_COUNT_CHARACTERS_UPPER"] = "maiuscole";
Blockly.Msg["TEXT_COUNT_CHARACTERS_LOWER"] = "minuscole";
Blockly.Msg["TEXT_COUNT_CHARACTERS_DIGITS"] = "cifre";
Blockly.Msg["TEXT_COUNT_CHARACTERS_SPECIAL"] = "caratteri speciali";
Blockly.Msg["TEXT_RANDOM_STRING_TITLE"] = "genera una stringa di lunghezza %1";
Blockly.Msg["TEXT_RANDOM_STRING_TOOLTIP"] = "Genera una stringa contenente un mix di lettere maiuscole, minuscole, cifre o caratteri speciali. La lunghezza di questa stringa può essere modificata nel blocco.";

// Variables blocks.
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg["VARIABLES_SET"] = "imposta %1 su %2";
Blockly.Msg["VARIABLES_GLOBAL"] = "variabile globale %1";
Blockly.Msg["VARIABLES_GLOBAL_TOOLTIP"] = "Crea una variabile globale.";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Crea \"prendi %1\"";
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Imposta questa variabile in modo che sia pari al valore dell'input.";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Crea \"imposta %1\"";
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Restituisce il valore di questa variabile.";
Blockly.Msg["VARIABLES_INCREMENT_HELPURL"] = "https://fr.wikipedia.org/wiki/Idiome_de_programmation";
Blockly.Msg["VARIABLES_INCREMENT_TITLE"] = "incrementa %1 di %2";
Blockly.Msg["VARIABLES_INCREMENT_TOOLTIP"] = "Aggiungi un numero a questa variabile.";
Blockly.Msg["VARIABLES_FORCE_TYPE_TITLE"] = "converti %1 in %2";
Blockly.Msg["VARIABLES_FORCE_TYPE_CHAR"] = "carattere (str)";
Blockly.Msg["VARIABLES_FORCE_TYPE_TEXT"] = "testo (str)";
Blockly.Msg["VARIABLES_FORCE_TYPE_BOOLEAN"] = "booleano (bool)";
Blockly.Msg["VARIABLES_FORCE_TYPE_INTEGER"] = "intero (int)";
Blockly.Msg["VARIABLES_FORCE_TYPE_FLOAT"] = "virgola mobile (float)";
Blockly.Msg["VARIABLES_FORCE_TYPE_SHORT"] = "piccolo numero (short)";
Blockly.Msg["VARIABLES_FORCE_TYPE_LONG"] = "gran numero (long)";
Blockly.Msg["VARIABLES_FORCE_TYPE_TOOLTIP"] = "Permette di convertire una variabile nel tipo scelto.";
Blockly.Msg["VARIABLES_TYPEOF_TITLE"] = "tipo di %1";
Blockly.Msg["VARIABLES_TYPEOF_TOOLTIP"] = "Restituisce il tipo di questa variabile.";
Blockly.Msg["VARIABLES_TUPLE_TITLE"] = "Tupla con i valori :";
Blockly.Msg["VARIABLES_TUPLE_TOOLTIP"] = "Crea una tupla di questi valori";

// Lists blocks.
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "elenco vuoto";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Restituisce un elenco, di lunghezza pari a 0, che non contiene record";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "elenco con gli elementi";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "elenco con un numero qualsiasi di elementi";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_REPEAT_TITLE"] = "elenco con l'elemento %1 ripetuto %2 volte";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Crea un elenco costituito dal valore indicato ripetuto per il numero di volte specificato.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg["LISTS_LENGTH_TITLE"] = "lunghezza di %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Restituisce la lunghezza di un elenco.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "media dell'elenco";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "massimo dell'elenco";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "mediana dell'elenco";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "minimo dell'elenco";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "più frequenti dell'elenco";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "elemento casuale dell'elenco";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "scostamento standard dell'elenco";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "somma dell'elenco";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Restituisci la media (aritmetica) dei valori numerici contenuti nell'elenco.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Restituisci il numero più grande dell'elenco.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Restituisci il numero mediano dell'elenco.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Restituisci il numero più piccolo dell'elenco.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Restituisci una lista degli elementi più frequenti nell'elenco.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Restituisci un elemento dell'elenco a caso.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Restituisci lo scostamento standard dell'elenco.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Restituisci la somma di tutti i numeri presenti nell'elenco.";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 è vuoto?";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Restituisce vero se l'elenco è vuoto.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_TITLE"] = "inverti l'elenco %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Inverti la copia di un elenco.";
Blockly.Msg["LISTS_SHUFFLE_TITLE"] = "mescola la lista %1";
Blockly.Msg["LISTS_SHUFFLE_TOOLTIP"] = "Mescola gli elementi di una lista (senza creare una copia).";
Blockly.Msg["LISTS_INLIST"] = "nell'elenco";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "trova la prima occorrenza dell'elemento";
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "trova l'ultima occorrenza dell'elemento";
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = "nell'elenco";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Restituisce l'indice della prima/ultima occorrenza dell'elemento all'interno dell'elenco. Restituisce %1 se l'elemento non viene trovato.";
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg["LISTS_GET_INDEX_GET"] = "prendi";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "prendi ed elimina";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "elimina";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "il primo elemento";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "l'ultimo elemento";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "l'elemento";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "l'elemento indice (dalla fine)";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "un elemento casuale";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = "nell'elenco";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 è l'ultimo elemento.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 è il primo elemento.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Restituisce il primo elemento di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Restituisce l'elemento che si trova nella posizione indicata di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM_END"] = "Restituisce l'elemento nella posizione specificata in un elenco (dalla fine).";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Restituisce l'ultimo elemento di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Restituisce un elemento a caso di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Elimina e restituisce il primo elemento di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Elimina e restituisce l'elemento che si trova nella posizione indicata di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Elimina e restituisce l'ultimo elemento di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Elimina e restituisce un elemento a caso di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Elimina e restituisce il primo elemento di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Elimina l'elemento che si trova nella posizione indicata di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Elimina l'ultimo elemento di un elenco.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Elimina un elemento a caso di un elenco.";
Blockly.Msg["LISTS_APPEND_TITLE"] = "nell'elenco %1 aggiungi l'elemento %2";
Blockly.Msg["LISTS_APPEND_TOOLTIP"] = "Aggiungi un elemento alla fine dell'elenco.";
Blockly.Msg["LISTS_APPEND_HELPURL"] = "";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "come";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "imposta";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "inserisci in";
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = "nell'elenco";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserisce l'elemento all'inizio di un elenco.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserisce l'elemento nella posizione indicata di un elenco.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Aggiungi l'elemento alla fine di un elenco.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserisce l'elemento a caso in un elenco.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Imposta il primo elemento di un elenco.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Aggiorna l'elemento nella posizione indicata di un elenco.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Imposta l'ultimo elemento di un elenco.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Imposta un elemento a caso di un elenco.";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "prendi il sotto-elenco dall'inizio";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "prendi il sotto-elenco dall'elemento indice";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "prendi il sotto-elenco dall'elemento indice (dalla fine)";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "fino alla fine";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "fino all'elemento indice";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "fino all'elemento indice (dalla fine)";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = "nell'elenco";
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Crea una copia della parte specificata di un elenco.";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "crea un elenco dal testo";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "crea un testo dall'elenco";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Unisci un elenco di testi in un unico testo, separato da un delimitatore.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Dividi un testo in un elenco di testi, interrompendo ad ogni delimitatore.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "con delimitatore";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "crescente";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "decrescente";
Blockly.Msg["LISTS_SORT_TITLE"] = "ordina %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Ordina una copia di un elenco.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alfabetico, ignorando le differenze maiuscole/minuscole";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numerico";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alfabetico";

// dict blocks
// Blocchi per i dizionari
Blockly.Msg["DICTIONARIES_CREATE_EMPTY_TITLE"] = "crea un dizionario vuoto";
Blockly.Msg["DICTIONARIES_CREATE_EMPTY_TOOLTIP"] = "Inizializza un dizionario vuoto.";
Blockly.Msg["DICTIONARIES_CREATE_WITH_TITLE"] = "crea un dizionario con";
Blockly.Msg["DICTIONARIES_CREATE_WITH_TOOLTIP"] = "Inizializza un dizionario con valori.";
Blockly.Msg["DICTIONARIES_FROM_LIST_TITLE"] = "Crea un dizionario da %1";
Blockly.Msg["DICTIONARIES_FROM_LIST_TOOLTIP"] = "Crea un dizionario da una lista.";
Blockly.Msg["DICTIONARIES_LENGTH_TITLE"] = "dimensione di %1";
Blockly.Msg["DICTIONARIES_LENGTH_TOOLTIP"] = "Restituisce la dimensione del dizionario.";
Blockly.Msg["DICTIONARIES_ADD_TUPLE_TITLE"] = "aggiungi al dizionario %1 la coppia chiave-valore (%2, %3)";
Blockly.Msg["DICTIONARIES_ADD_TUPLE_TOOLTIP"] = "Aggiungi una coppia chiave-valore al dizionario. Se la chiave esiste già, il valore verrà sovrascritto.";
Blockly.Msg["DICTIONARIES_LOOP_TITLE"] = "per ogni %1 %2 nel dizionario %3";
Blockly.Msg["DICTIONARIES_LOOP_TOOLTIP"] = "Scorre le chiavi, i valori o le tuple (chiave, valore) del dizionario.";
Blockly.Msg["DICTIONARIES_LOOP_KEY"] = "chiave";
Blockly.Msg["DICTIONARIES_LOOP_VALUE"] = "valore";
Blockly.Msg["DICTIONARIES_LOOP_TUPLE"] = "tupla";
Blockly.Msg["DICTIONARIES_GET_ITEM_TITLE"] = "nel dizionario %1 ottieni il valore associato alla chiave %2";
Blockly.Msg["DICTIONARIES_GET_ITEM_TOOLTIP"] = "Restituisce il valore associato a una chiave del dizionario o None se la chiave non esiste.";
Blockly.Msg["DICTIONARIES_UPDATE_ITEM_TITLE"] = "nel dizionario %1 modifica il valore %2 associato alla chiave %3";
Blockly.Msg["DICTIONARIES_UPDATE_ITEM_TOOLTIP"] = "Modifica il valore associato alla chiave nel dizionario.";
Blockly.Msg["DICTIONARIES_INCLUDE_TITLE"] = "il %1 %2 %3 è presente nel dizionario %4";
Blockly.Msg["DICTIONARIES_INCLUDE_TOOLTIP"] = "Controlla se una chiave o un valore è presente nel dizionario.";
Blockly.Msg["DICTIONARIES_INCLUDE_IN"] = "è";
Blockly.Msg["DICTIONARIES_INCLUDE_NOT"] = "non è";
Blockly.Msg["DICTIONARIES_INCLUDE_KEY"] = "chiave";
Blockly.Msg["DICTIONARIES_INCLUDE_VALUE"] = "valore";
Blockly.Msg["DICTIONARIES_DELETE_TUPLE_TITLE"] = "elimina dal dizionario %1 la tupla associata alla chiave %2";
Blockly.Msg["DICTIONARIES_DELETE_TUPLE_TOOLTIP"] = "Rimuove una tupla dal dizionario.";
Blockly.Msg["DICTIONARIES_CLEAR_TITLE"] = "elimina tutti i dati del dizionario %1";
Blockly.Msg["DICTIONARIES_CLEAR_TOOLTIP"] = "Elimina tutte le tuple dal dizionario.";


// Procedures blocks.
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "definisci";
Blockly.Msg["DICTIONARIES_CREATE_WITH_TITLE"] = "Crea un dizionario con";
Blockly.Msg["DICTIONARIES_CREATE_WITH_TOOLTIP"] = "Inizializza un dizionario con valori";
Blockly.Msg["DICTIONARIES_FROM_LIST_TITLE"] = "Crea un dizionario da %1";
Blockly.Msg["DICTIONARIES_FROM_LIST_TOOLTIP"] = "Crea un dizionario da un elenco";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "nome_della_funzione";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "con:";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "con:";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Crea una funzione senza output.";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Descrivi questa funzione...";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = "definisci";
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = "nome_della_funzione";
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = "";
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = "Descrivi questa funzione...";
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "ritorna";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Crea una funzione con un output.";
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "consenti dichiarazioni";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Attenzione: Questa funzione ha parametri duplicati.";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://fr.wikipedia.org/wiki/Sous-programme";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Esegui la funzione \"%1\" definita dall'utente.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://fr.wikipedia.org/wiki/Sous-programme";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Esegui la funzione \"%1\" definita dall'utente e utilizza il suo risultato.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Evidenzia la definizione della funzione";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Crea \"%1\"";
Blockly.Msg["PROCEDURES_IFRETURN_TITLE"] = "se";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Se un valore è vero, allora restituisci un secondo valore.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Attenzione: questo blocco può essere usato solo all'interno di una definizione di funzione.";



// Other block
Blockly.Msg["OTHER_AST_RAW"] = "Codice non tradotto";


// COMMON BLOCKS  (python traduction)
Blockly.Msg["COMMUNICATION_SERIAL_WRITE_SEPARATOR_TITLE"] = "scrivere nella console";
Blockly.Msg["COMMUNICATION_SERIAL_WRITE_SEPARATOR_TOOLTIP"] = "Scrive i dati nella console seriale con un separatore.";


// Fotocamera - Wio lite AI
Blockly.Msg['WIO_MAKE_PREDICTION_TITLE'] = '[Wio lite] avviare una previsione';
Blockly.Msg['WIO_MAKE_PREDICTION_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Avvia una previsione utilizzando l\'immagine della fotocamera di Wio lite.';
Blockly.Msg['WIO_GET_DATA_TITLE'] = '[Wio lite] recupera tutti i dati';
Blockly.Msg['WIO_GET_DATA_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Restituisce tutti i dati di Wio lite (probabilità associate alle classi del modello).';
Blockly.Msg['WIO_GET_CLASS_DATA_BY_ID_TITLE'] = '[Wio lite] probabilità della classe n°%1';
Blockly.Msg['WIO_GET_CLASS_DATA_BY_ID_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Restituisce la probabilità associata alla classe il cui ID è indicato.';
Blockly.Msg['WIO_GET_CLASS_MAX_ID_TITLE'] = '[Wio lite] ID della classe rilevata';
Blockly.Msg['WIO_GET_CLASS_MAX_ID_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Restituisce l\'ID della classe rilevata (quella con la probabilità più alta).';
Blockly.Msg['WIO_GET_STATUS_TITLE'] = '[Wio lite] ottenere %1';
Blockly.Msg['WIO_GET_STATUS'] = 'lo stato';
Blockly.Msg['WIO_GET_VERSION'] = 'la versione';
Blockly.Msg['WIO_GET_STATUS_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Restituisce la versione o lo stato di Wio lite (0: occupato, 1: pronto, 2: risultato disponibile).';