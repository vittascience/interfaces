/**
 * @fileoverview Common english messages for interfaces. (EN)
 */

'use strict';

Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "variable";
Blockly.Msg["UNNAMED_KEY"] = "unnamed";
Blockly.Msg["TODAY"] = "Today";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";

// Workspace.
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Say something...";
Blockly.Msg["WORKSPACE_ARIA_LABEL"] = "Blockly Workspace";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";

// Context menus.
Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicate";
Blockly.Msg["ADD_COMMENT"] = "Add Comment";
Blockly.Msg["REMOVE_COMMENT"] = "Remove Comment";
Blockly.Msg["DUPLICATE_COMMENT"] = "Duplicate Comment";
Blockly.Msg["EXTERNAL_INPUTS"] = "External Inputs";
Blockly.Msg["INLINE_INPUTS"] = "Inline Inputs";
Blockly.Msg["DELETE_BLOCK"] = "Delete Block";
Blockly.Msg["DELETE_X_BLOCKS"] = "Delete %1 Blocks";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Delete all %1 blocks?";
Blockly.Msg["CLEAN_UP"] = "Clean up Blocks";
Blockly.Msg["COLLAPSE_BLOCK"] = "Collapse Block";
Blockly.Msg["COLLAPSE_ALL"] = "Collapse Blocks";
Blockly.Msg["EXPAND_BLOCK"] = "Expand Block";
Blockly.Msg["EXPAND_ALL"] = "Expand Blocks";
Blockly.Msg["DISABLE_BLOCK"] = "Disable Block";
Blockly.Msg["ENABLE_BLOCK"] = "Enable Block";
Blockly.Msg["HELP"] = "Help";
Blockly.Msg["UNDO"] = "Undo";
Blockly.Msg["REDO"] = "Redo";

// IOS.
Blockly.Msg["IOS_OK"] = "OK";
Blockly.Msg["IOS_CANCEL"] = "Cancel";
Blockly.Msg["IOS_ERROR"] = "Error";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "INPUTS";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Add Input";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Allow statements";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "This function has duplicate inputs.";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Add Variable";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Add";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Rename";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Delete";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Variable name";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "You can't use an empty variable name.";

// Variable renaming.
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Change value:";
Blockly.Msg["RENAME_VARIABLE"] = "Rename variable...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Rename all '%1' variables to:";

// Variable creation.
Blockly.Msg["NEW_VARIABLE"] = "Create variable...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Create string variable...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Create number variable...";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Create colour variable...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "New variable name:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "New variable type:";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "A variable named '%1' already exists.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "A variable named '%1' already exists for another type: '%2'.";

// Variable deletion.
Blockly.Msg["DELETE_VARIABLE"] = "Delete the '%1' variable";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Delete %1 uses of the '%2' variable?";
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";

// Warning text.
Blockly.Msg["LOGIC_COMPARE_WARNING"] = "Unable to compare first input type '%1' \nwith second input type '%2'";
Blockly.Msg["LOGIC_TERNARY_WARNING"] = "Unable to return first input type '%1' \nwith second input type '%2'";
Blockly.Msg["VARIABLES_SET_WARNING"] = "The variable '%1' has been first assigned to the '%2'\n\n type and this bloc tries to assign the type '%3'.\n";	
Blockly.Msg["VARIABLES_SET_WARNING_NUMBERS"] = "Help: Maybe you can use the block <convert X to type 'float'>\n in variable assignment.";

// Start blocks.
Blockly.Msg["ON_START_TITLE"] = "On start    ";
Blockly.Msg["ON_START_TOOLTIP"] = "Add instructions in this block to execute them when the board is powered up.";
Blockly.Msg["FOREVER_TITLE"] = "Forever    ";
Blockly.Msg["FOREVER_TOOLTIP"] = "Add instructions to this block to execute them in a loop.";

// Colors
Blockly.Msg["COLOR_LEVEL_RED"] = "level of red";
Blockly.Msg["COLOR_LEVEL_GREEN"] = "level of green";
Blockly.Msg["COLOR_LEVEL_BLUE"] = "level of blue";

// Colour blocks.
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Choose a colour from the palette.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "random colour";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Choose a colour at random.";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "blend";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "colour 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "colour 2";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "ratio";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg["COLOUR_RED"] = "red";
Blockly.Msg["COLOUR_GREEN"] = "green";
Blockly.Msg["COLOUR_BLUE"] = "blue";
Blockly.Msg["COLOUR_CYAN"] = "cyan";
Blockly.Msg["COLOUR_FUCHSIA"] = "fuchsia";
Blockly.Msg["COLOUR_YELLOW"] = "yellow";
Blockly.Msg["COLOUR_BLACK"] = "black";
Blockly.Msg["COLOUR_WHITE"] = "white";
Blockly.Msg["COLOUR_PURPLE"] = "purple";

// Exception
Blockly.Msg["EXCEPTION_RAISE_TOOLTIP"] = "raise an exception";
Blockly.Msg["EXCEPTION_EXCEPTION_TOOLTIP"] = "create an exception";
Blockly.Msg["EXCEPTION_TYPE_TOOLTIP"] = "All possible exception types";
Blockly.Msg["EXCEPTION_TRY_TOOLTIP"] = "Executes a block of code and allows a block of code to be executed in the event of an exception";

// Logic blocks.
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "if %1 then";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "else if";
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = "then";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "else";
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Returns true if both inputs equal each other.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Returns true if both inputs are not equal to each other.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Returns true if the first input is smaller than the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Returns true if the first input is smaller than or equal to the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Returns true if the first input is greater than the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Returns true if the first input is greater than or equal to the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_IS"] = "Return true if the first entry is identical to the second";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_ISNOT"] = "Return true if the first entry is not identical to the second";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_IN"] = "Return true if the first entry is present in the second";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NOTIN"] = "Return true if the first entry is not present in the second";
Blockly.Msg["LOGIC_COMPARE_2_TOOLTIP"] = "Return true if value is contained between a minimum and a maximum.";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg["LOGIC_OPERATION_AND"] = "and";
Blockly.Msg["LOGIC_OPERATION_OR"] = "or";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Returns true if both inputs are true.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Returns true if at least one of the inputs is true.";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "true";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "false";
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Returns either true or false.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "not %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TITLE"] = "null";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Returns null.";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "if true";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "if false";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg["LOGIC_ASSERT_TOOLTIP"] = "Checks whether a condition is true. If the condition is false, generates an error and interrupts execution of the program.";
Blockly.Msg["LOGIC_ASSERT_HELPURL"] = "https://en.wikipedia.org/wiki/Assertion_(software_development)";

// Loop blocks.
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "repeat %1 times";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Do some statements several times.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repeat until";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repeat while";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg["CONTROLS_FOR_TITLE"] = "count with %1 from %2 to %3 by step %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "for each item %1 in list %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out of loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration of loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_PASS_TITLE"] = "do nothing";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_PASS_TOOLTIP"] = "Do nothing.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Warning: This block may only be used within a loop.";
Blockly.Msg["CONTROLS_LISTCOMP_TITLE"] = "Create a list with %1 for %2 in %3";
Blockly.Msg["CONTROLS_LISTCOMP_TOOLTIP"] = "Create a list comprehension";
Blockly.Msg["CONTROLS_RANGE_TITLE_1"] = "Create a sequence with : end ";
Blockly.Msg["CONTROLS_RANGE_TITLE_2"] = ", start ";
Blockly.Msg["CONTROLS_RANGE_TITLE_3"] = ", step ";
Blockly.Msg["CONTROLS_RANGE_TOOLTIP"] = "Create a sequence of numbers";

// Math blocks.
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "A number.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Returns the sum of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Returns the quotient of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Returns the difference of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Returns the product of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Returns the first number raised to the power of the second number.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "square root";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absolute";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Returns the square root of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Returns the absolute value of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Returns the negation of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Returns the natural logarithm of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Returns the base 10 logarithm of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Returns e to the power of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Returns 10 to the power of a number.";
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg["MATH_TRIG_COS"] = "cos";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";
Blockly.Msg["MATH_TRIG_TAN"] = "tan";
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Returns the cosine of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Returns the sine of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Returns the tangent of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Returns the arccosine of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Returns the arcsine of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Returns the arctangent of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS_RAD"] = "Returns the cosine of an angle in radians.";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN_RAD"] = "Returns the sine of an angle in radians.";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN_RAD"] = "Returns the tangent of an angle in radians.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Returns one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg["MATH_IS_EVEN"] = "is even";
Blockly.Msg["MATH_IS_ODD"] = "is odd";
Blockly.Msg["MATH_IS_PRIME"] = "is prime";
Blockly.Msg["MATH_IS_WHOLE"] = "is whole";
Blockly.Msg["MATH_IS_POSITIVE"] = "is positive";
Blockly.Msg["MATH_IS_NEGATIVE"] = "is negative";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "is divisible by";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg["MATH_MAP_TITLE"] = "transform the value %1 of [from %2 to %3 ] in [from %4 to %5 ]";
Blockly.Msg["MATH_MAP_TOOLTIP"] = "transform a value contained in [from min to max] with [from min to max].";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "round";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "round down";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "round up";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Round a number up or down.";
Blockly.Msg["MATH_ROUND_NDIGITS_TITLE"] = "round %1 to %2 decimal place(s)";
Blockly.Msg["MATH_ROUND_NDIGITS_TOOLTIP"] = "Round a number to n significant digits.";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "remainder of %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Returns the remainder from dividing the two numbers.";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "constrain %1 low %2 high %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "random integer from %1 to %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Returns a random integer between the two specified limits, inclusive.";
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "number between 0 and 1";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Returns a random number between 0.0 (inclusive) and 1.0 (exclusive), as [0, 1[ in mathematics.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Returns the arctangent of point (X, Y) in degrees from -180 to 180.";
Blockly.Msg["MATH_ATAN2_RAD_TOOLTIP"] = "Returns the arctangent of point (X, Y) in radians from -π to π.";
Blockly.Msg["MATH_MIN_MAX_TOOLTIP"] = "Returns the smallest or largest number among the given values.";

// Text blocks.
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "A letter, word, or line of text.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Create a piece of text by joining together any number of items.";
Blockly.Msg["TEXT_NEWLINE_TITLE"] = "%1 newline.s";
Blockly.Msg["TEXT_NEWLINE_TOOLTIP"] = "Add newlines in a text.";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_APPEND_TITLE"] = "to %1 append text %2";
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";
Blockly.Msg["TEXT_SPLIT_TITLE"] = "split text %1 by %2"
Blockly.Msg["TEXT_SPLIT_TOOLTIP"] = "Returns array of string splitted by the separator.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_LENGTH_TITLE"] = "length of %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 is empty";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the provided text is empty.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "find first occurrence of text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "find last occurrence of text";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "in text %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg["TEXT_CHARAT_TITLE"] = "in text %1 %2";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "get first letter";
Blockly.Msg["TEXT_CHARAT_LAST"] = "get last letter";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "get letter at index";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "get letter at index (from end)";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "get random letter";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Returns the letter at the specified position.";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "get substring from letter at index";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "get substring from letter at index (from end)";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "to last letter";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "to letter at index";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "to letter at index (from end)";
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "in text";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Returns a specified portion of the text.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg["TEXT_CHANGECASE_TITLE"] = "set %1 to %2";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "lower case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "Title Case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "UPPER CASE";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Returns a copy of the text in a different case.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg["TEXT_TRIM_TITLE"] = "trim spaces from %1 of %2";
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "both sides";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "left side";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "right side";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Returns a copy of the text with spaces removed from one or both ends.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_TITLE"] = "count %1 in %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Count how many times some text occurs within some other text.";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_TITLE"] = "replace %1 with %2 in %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Replace all occurances of some text within some other text.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_TITLE"] = "reverse %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Reverses the order of the characters in the text.";
Blockly.Msg["TEXT_COMMENT_TITLE"] = "Comment %1";
Blockly.Msg["TEXT_COMMENT_TOOLTIP"] = "Add comment in code.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_PRINT_TITLE"] = "print %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Print the specified text, number or other value.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Prompt for user for a number.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prompt for user for some text.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";
Blockly.Msg["TEXT_COUNT_CHARACTERS_TITLE"] = "count occurrences of %1 in %2";
Blockly.Msg["TEXT_COUNT_CHARACTERS_TOOLTIP"] = "Counts the number of uppercase, lowercase, digits, or special characters in a string.";
Blockly.Msg["TEXT_COUNT_CHARACTERS_UPPER"] = "uppercase";
Blockly.Msg["TEXT_COUNT_CHARACTERS_LOWER"] = "lowercase";
Blockly.Msg["TEXT_COUNT_CHARACTERS_DIGITS"] = "digits";
Blockly.Msg["TEXT_COUNT_CHARACTERS_SPECIAL"] = "special characters";
Blockly.Msg["TEXT_RANDOM_STRING_TITLE"] = "generate a string of length %1";
Blockly.Msg["TEXT_RANDOM_STRING_TOOLTIP"] = "Generates a string containing a mix of uppercase, lowercase, digits, or special characters. The length of this string can be modified in the block.";

// Variables blocks.
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg["VARIABLES_SET"] = "set %1 to %2";
Blockly.Msg["VARIABLES_GLOBAL"] = "global variable %1";
Blockly.Msg["VARIABLES_GLOBAL_TOOLTIP"] = "Create a global variable.";
Blockly.Msg["VARIABLES_GLOBAL_HELPURL"] = "https://www.w3schools.com/python/python_variables_global.asp";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Create 'get %1'";
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Create 'set %1'";
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";
Blockly.Msg["VARIABLES_INCREMENT_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["VARIABLES_INCREMENT_TITLE"] = "change %1 by %2";
Blockly.Msg["VARIABLES_INCREMENT_TOOLTIP"] = "Add a number to this variable.";
Blockly.Msg["VARIABLES_FORCE_TYPE_TITLE"] = "convert %1 to %2";
Blockly.Msg["VARIABLES_FORCE_TYPE_CHAR"] = "character (char)";
Blockly.Msg["VARIABLES_FORCE_TYPE_TEXT"] = "text";
Blockly.Msg["VARIABLES_FORCE_TYPE_BOOLEAN"] = "boolean (bool)";
Blockly.Msg["VARIABLES_FORCE_TYPE_INTEGER"] = "integer (int)";
Blockly.Msg["VARIABLES_FORCE_TYPE_FLOAT"] = "float (float)";
Blockly.Msg["VARIABLES_FORCE_TYPE_SHORT"] = "short number (short)";	
Blockly.Msg["VARIABLES_FORCE_TYPE_LONG"] = "long number (long)";
Blockly.Msg["VARIABLES_FORCE_TYPE_TOOLTIP"] = "Enable to convert any variable in the selected type.";
Blockly.Msg["VARIABLES_TYPEOF_TITLE"] = "type of %1";
Blockly.Msg["VARIABLES_TYPEOF_TOOLTIP"] = "Returns the type of this variable.";
Blockly.Msg["VARIABLES_TUPLE_TITLE"] = "Tuple with the values :";
Blockly.Msg["VARIABLES_TUPLE_TOOLTIP"] = "Create a tuple of theses values";

// Lists blocks.
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "empty list";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returns a list, of length 0, containing no data records";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "list with items";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "list with any number of items.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_REPEAT_TITLE"] = "list with item %1 repeated %2 times";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg["LISTS_LENGTH_TITLE"] = "length of %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Returns the length of a list.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "average of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "max of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "median of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "min of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "modes of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "random item of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "standard deviation of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "sum of list";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Returns the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Returns the largest number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Returns the median number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Returns the smallest number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Returns a list of the most common item.s in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Returns a random item from the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Returns the standard deviation of the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Returns the sum of all the numbers in the list.";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 is empty";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Returns true if the list is empty.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_TITLE"] = "reverse list %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Reverse a copy of a list.";
Blockly.Msg["LISTS_SHUFFLE_TITLE"] = "shuffle the list %1";
Blockly.Msg["LISTS_SHUFFLE_TOOLTIP"] = "Shuffle the elements of a list (without creating a copy).";
Blockly.Msg["LISTS_INLIST"] = "in list";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "find first occurrence of item";
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "find last occurrence of item";
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_GET"] = "get";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "get and remove";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "remove";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "first item";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "last item";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "item at index";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "item at index (from end)";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "random item";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 is the first item.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 is the last item.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Returns the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returns the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM_END"] = "Returns the item at the specified position in a list (from end).";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Returns the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Returns a random item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Removes and returns the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Removes the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Removes the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Removes the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Removes a random item in a list.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "to item at index (from end)";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "to item at index";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "to last item";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "get sub-list from first item";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from item at index (from end)";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "get sub-list from item at index";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Creates a copy of the specified portion of a list.";
Blockly.Msg["LISTS_APPEND_TITLE"] = "in list %1 append %2";
Blockly.Msg["LISTS_APPEND_TOOLTIP"] = "Add any element in a list.";
Blockly.Msg["LISTS_APPEND_HELPURL"] = "";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "as";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "set";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "insert at";
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserts the item at the start of a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserts the item at the specified position in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Append the item to the end of a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserts the item randomly in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sets the first item in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sets the item at the specified position in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sets the last item in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sets a random item in a list.";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "make text from list";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "with delimiter";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "ascending";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "descending";
Blockly.Msg["LISTS_SORT_TITLE"] = "sort %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Sort a copy of a list.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alphabetic, ignore case";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numeric";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alphabetic";

// Procedures blocks.
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "define";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "function_name";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "with:";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = Blockly.Msg["PROCEDURES_BEFORE_PARAMS"];
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Creates a function with no output.";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Describe this function...";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "return";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Creates a function with an output.";
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "allow statements";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warning: This function has duplicate parameters.";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Run the user-defined function '%1'.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Run the user-defined function '%1' and use its output.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Create '%1'";
Blockly.Msg["PROCEDURES_IFRETURN_TITLE"] = "if";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "If a value is true, then return a second value.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Warning: This block may be used only within a function definition.";

// Dict blocks
Blockly.Msg["DICTIONARIES_CREATE_EMPTY_TITLE"] = "create an empty dictionary";
Blockly.Msg["DICTIONARIES_CREATE_EMPTY_TOOLTIP"] = "Initializes an empty dictionary.";
Blockly.Msg["DICTIONARIES_CREATE_WITH_TITLE"] = "create a dictionary with";
Blockly.Msg["DICTIONARIES_CREATE_WITH_TOOLTIP"] = "Initialize a dictionary with values.";
Blockly.Msg["DICTIONARIES_FROM_LIST_TITLE"] = "Create a dictionary from %1";
Blockly.Msg["DICTIONARIES_FROM_LIST_TOOLTIP"] = "Create a dictionary from a list";
Blockly.Msg["DICTIONARIES_LENGTH_TITLE"] = "size of %1";
Blockly.Msg["DICTIONARIES_LENGTH_TOOLTIP"] = "Returns the size of the dictionary.";
Blockly.Msg["DICTIONARIES_ADD_TUPLE_TITLE"] = "add to %1 the key-value couple (%2,%3)";
Blockly.Msg["DICTIONARIES_ADD_TUPLE_TOOLTIP"] = "Add a dictionary tuple. If the key already exists, the value will be replaced.";
Blockly.Msg["DICTIONARIES_LOOP_TITLE"] = "for each %1 %2 dictionary %3";
Blockly.Msg["DICTIONARIES_LOOP_TOOLTIP"] = "Travels the keys, the values or the tules (key, value) of the dictionary.";
Blockly.Msg["DICTIONARIES_LOOP_KEY"] = "key";
Blockly.Msg["DICTIONARIES_LOOP_VALUE"] = "value";
Blockly.Msg["DICTIONARIES_LOOP_TUPLE"] = "tuple";
Blockly.Msg["DICTIONARIES_GET_ITEM_TITLE"] = "in the dictionary %1 obtain the value associated with the key %2";
Blockly.Msg["DICTIONARIES_GET_ITEM_TOOLTIP"] = "Returns the value associated with a key to the dictionary or None if the key does not exist.";
Blockly.Msg["DICTIONARIES_UPDATE_ITEM_TITLE"] = "in the dictionary %1 change the value %2 associated with the key %3";
Blockly.Msg["DICTIONARIES_UPDATE_ITEM_TOOLTIP"] = "Modifies the value associated with key in the dictionary.";
Blockly.Msg["DICTIONARIES_INCLUDE_TITLE"] = "the %1 %2 %3 present in the dictionary %4";
Blockly.Msg["DICTIONARIES_INCLUDE_TOOLTIP"] = "Check whether the key/value is present or not in the dictionary.";
Blockly.Msg["DICTIONARIES_INCLUDE_IN"] = "is";
Blockly.Msg["DICTIONARIES_INCLUDE_NOT"] = "is not";
Blockly.Msg["DICTIONARIES_INCLUDE_KEY"] = "key";
Blockly.Msg["DICTIONARIES_INCLUDE_VALUE"] = "value";
Blockly.Msg["DICTIONARIES_DELETE_TUPLE_TITLE"] = "delete from the dictionary %1 the tuple associated with the key %2";
Blockly.Msg["DICTIONARIES_DELETE_TUPLE_TOOLTIP"] = "Remove a tuple from the dictionary.";
Blockly.Msg["DICTIONARIES_CLEAR_TITLE"] = "delete all dictionary data %1";
Blockly.Msg["DICTIONARIES_CLEAR_TOOLTIP"] = "Deletes all the tules of the dictionary.";


// Other Block
Blockly.Msg["OTHER_AST_RAW"] = "Untranslated code";

// COMMON BLOCKS  (python traduction)
Blockly.Msg["COMMUNICATION_SERIAL_WRITE_SEPARATOR_TITLE"] = "write to the console";
Blockly.Msg["COMMUNICATION_SERIAL_WRITE_SEPARATOR_TOOLTIP"] = "Writes data to the serial console with a separator.";

// Camera - Wio lite AI
Blockly.Msg['WIO_MAKE_PREDICTION_TITLE'] = '[Wio lite] launch a prediction';
Blockly.Msg['WIO_MAKE_PREDICTION_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Launches a prediction using the camera image from the Wio lite.';
Blockly.Msg['WIO_GET_DATA_TITLE'] = '[Wio lite] retrieve all data';
Blockly.Msg['WIO_GET_DATA_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Returns all data from the Wio lite (probabilities associated with model classes).';
Blockly.Msg['WIO_GET_CLASS_DATA_BY_ID_TITLE'] = '[Wio lite] class probability No. %1';
Blockly.Msg['WIO_GET_CLASS_DATA_BY_ID_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Returns the probability associated with the class whose ID is indicated.';
Blockly.Msg['WIO_GET_CLASS_MAX_ID_TITLE'] = '[Wio lite] detected class ID';
Blockly.Msg['WIO_GET_CLASS_MAX_ID_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Returns the ID of the detected class (the one with the highest probability).';
Blockly.Msg['WIO_GET_STATUS_TITLE'] = '[Wio lite] get %1';
Blockly.Msg['WIO_GET_STATUS'] = 'the status';
Blockly.Msg['WIO_GET_VERSION'] = 'the version';
Blockly.Msg['WIO_GET_STATUS_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Returns the version or status of the Wio lite (0: busy, 1: ready, 2: result available).';