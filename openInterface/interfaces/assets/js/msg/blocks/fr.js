/**
 * @fileoverview Common french messages for interfaces. (FR)
 */

'use strict';

Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "variable";
Blockly.Msg["UNNAMED_KEY"] = "non nommé";
Blockly.Msg["TODAY"] = "Aujourd'hui";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";

// Workspace.
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Dire quelque chose…";
Blockly.Msg["WORKSPACE_ARIA_LABEL"] = "Espace de travail de Blocky";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Les blocs repliés contiennent des avertissements.";

// Context menus.
Blockly.Msg["DUPLICATE_BLOCK"] = "Dupliquer";
Blockly.Msg["ADD_COMMENT"] = "Ajouter un commentaire";
Blockly.Msg["REMOVE_COMMENT"] = "Supprimer un commentaire";
Blockly.Msg["DUPLICATE_COMMENT"] = "Dupliquer le commentaire";
Blockly.Msg["EXTERNAL_INPUTS"] = "Entrées externes";
Blockly.Msg["INLINE_INPUTS"] = "Entrées en ligne";
Blockly.Msg["DELETE_BLOCK"] = "Supprimer le bloc";
Blockly.Msg["DELETE_X_BLOCKS"] = "Supprimer %1 blocs";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Supprimer ces %1 blocs ?";
Blockly.Msg["CLEAN_UP"] = "Nettoyer les blocs";
Blockly.Msg["COLLAPSE_BLOCK"] = "Réduire le bloc";
Blockly.Msg["COLLAPSE_ALL"] = "Réduire les blocs";
Blockly.Msg["EXPAND_BLOCK"] = "Développer le bloc";
Blockly.Msg["EXPAND_ALL"] = "Développer les blocs";
Blockly.Msg["DISABLE_BLOCK"] = "Désactiver le bloc";
Blockly.Msg["ENABLE_BLOCK"] = "Activer le bloc";
Blockly.Msg["HELP"] = "Aide";
Blockly.Msg["UNDO"] = "Annuler";
Blockly.Msg["REDO"] = "Refaire";

// IOS.
Blockly.Msg["IOS_OK"] = "OK";
Blockly.Msg["IOS_CANCEL"] = "Annuler";
Blockly.Msg["IOS_ERROR"] = "Erreur";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "ENTRÉES";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Ajouter une entrée";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Ordres autorisés";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "Cette fonction a des entrées dupliquées.";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Ajouter une variable";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Ajouter";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Renommer";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Supprimer";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Nom de la variable";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "Vous ne pouvez pas utiliser un nom de variable vide.";

// Variable renaming.
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Modifier la valeur :";
Blockly.Msg["RENAME_VARIABLE"] = "Renommer la variable…";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Renommer toutes les variables « %1 » en :";

// Variable creation.
Blockly.Msg["NEW_VARIABLE"] = "Créer une variable...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Créer une variable chaîne…";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Créer une variable nombre…";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Créer une variable couleur…";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "Le nom de la nouvelle variable :";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Nouveau type de variable :";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "Une variable appelée '%1' existe déjà.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Une variable nommée '%1' existe déjà pour un autre type : '%2'.";

// Variable deletion.
Blockly.Msg["DELETE_VARIABLE"] = "Supprimer la variable '%1'";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Supprimer %1 utilisations de la variable '%2' ?";
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Impossible de supprimer la variable '%1' parce qu’elle fait partie de la définition de la fonction '%2'";

// Warning text.
Blockly.Msg["LOGIC_COMPARE_WARNING"] = "Impossible de comparer la première entrée de type '%1' \navec la seconde de type '%2'";
Blockly.Msg["LOGIC_TERNARY_WARNING"] = "Impossible de retourner la première entrée de type '%1' \navec la seconde de type '%2'";
Blockly.Msg["VARIABLES_SET_WARNING"] = "La variable '%1' a déjà été déclarée au type '%2'\n\n et ce bloc tente de la passer au type '%3'."
Blockly.Msg["VARIABLES_SET_WARNING_NUMBERS"] = "Aide: Utilise peut-être le bloc <convertir X en 'float'>\n dans l'initialisation de la variable.";

// Start blocks.
Blockly.Msg["ON_START_TITLE"] = "Au démarrage";
Blockly.Msg["ON_START_TOOLTIP"] = "Ajouter des instructions dans ce bloc pour les exécuter au démarrage de la carte programmable.";
Blockly.Msg["FOREVER_TITLE"] = "Répéter indéfiniment";
Blockly.Msg["FOREVER_TOOLTIP"] = "Ajouter des instructions dans ce bloc pour les exécuter en boucle.";

// Colors
Blockly.Msg["COLOR_LEVEL_RED"] = "niveau de rouge";
Blockly.Msg["COLOR_LEVEL_GREEN"] = "niveau de vert";
Blockly.Msg["COLOR_LEVEL_BLUE"] = "niveau de bleu";

// Colour blocks.
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://fr.wikipedia.org/wiki/Couleur";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Choisir une couleur dans la palette.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "couleur aléatoire";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Choisir une couleur au hasard.";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Créer une couleur avec la quantité spécifiée de rouge, vert et bleu. Les valeurs doivent être comprises entre 0 et 100.";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "mélanger";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "couleur 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "couleur 2";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "taux";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Mélange deux couleurs dans une proportion donnée (de 0.0 à 1.0).";
Blockly.Msg["COLOUR_RED"] = "rouge";
Blockly.Msg["COLOUR_GREEN"] = "vert";
Blockly.Msg["COLOUR_BLUE"] = "bleu";
Blockly.Msg["COLOUR_CYAN"] = "cyan";
Blockly.Msg["COLOUR_FUCHSIA"] = "fuchsia";
Blockly.Msg["COLOUR_YELLOW"] = "jaune";
Blockly.Msg["COLOUR_BLACK"] = "noir";
Blockly.Msg["COLOUR_WHITE"] = "blanc";
Blockly.Msg["COLOUR_PURPLE"] = "violet";

// Exception
Blockly.Msg["EXCEPTION_RAISE_TOOLTIP"] = "soulever une exception";
Blockly.Msg["EXCEPTION_EXCEPTION_TOOLTIP"] = "créer une exception";
Blockly.Msg["EXCEPTION_TYPE_TOOLTIP"] = "Tout les type d'exceptions possible";
Blockly.Msg["EXCEPTION_TRY_TOOLTIP"] = "Exécute un bloc de code et permet d'exécuter un bloc de code en cas d'exception";

// Logic blocks.
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Si une valeur est vraie, alors exécuter certains ordres.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Si une valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, exécuter le second bloc d’ordres.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Si la première valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, si la seconde valeur est vraie, exécuter le second bloc d’ordres.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Si la première valeur est vraie, alors exécuter le premier bloc d’ordres. Sinon, si la seconde valeur est vraie, exécuter le second bloc d’ordres. Si aucune des valeurs n’est vraie, exécuter le dernier bloc d’ordres.";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "si %1 alors";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "sinon si";
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = "alors";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "sinon";
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Ajouter, supprimer ou réordonner les sections pour reconfigurer ce bloc si.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Ajouter une condition au bloc si.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Ajouter une condition finale fourre-tout au bloc si.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://fr.wikipedia.org/wiki/In%C3%A9galit%C3%A9_(math%C3%A9matiques)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Renvoyer vrai si les deux entrées sont égales.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Renvoyer vrai si les deux entrées sont différentes.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Renvoyer vrai si la première entrée est plus petite que la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Renvoyer vrai si la première entrée est plus petite ou égale à la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Renvoyer vrai si la première entrée est plus grande que la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Renvoyer vrai si la première entrée est plus grande ou égale à la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_IS"] = "Renvoyer vrai si la première entrée est identique à la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_ISNOT"] = "Renvoyer vrai si la première entrée n'est pas identique à la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_IN"] = "Renvoyer vrai si la première entrée est présente dans la seconde.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NOTIN"] = "Renvoyer vrai si la première entrée n'est pas présente dans la seconde.";
Blockly.Msg["LOGIC_COMPARE_2_TOOLTIP"] = "Renvoyer vrai si une valeur est contenue entre un minimum et un maximum.";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg["LOGIC_OPERATION_AND"] = "et";
Blockly.Msg["LOGIC_OPERATION_OR"] = "ou";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Renvoyer vrai si les deux entrées sont vraies.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Renvoyer vrai si au moins une des entrées est vraie.";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "vrai";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "faux";
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Renvoie soit vrai soit faux.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "non %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Renvoie vrai si l’entrée est fausse. Renvoie faux si l’entrée est vraie.";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TITLE"] = "nul";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Renvoie nul.";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "si vrai";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "si faux";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Vérifier la condition dans 'test'. Si elle est vraie, renvoie la valeur 'si vrai' ; sinon renvoie la valeur 'si faux'.";
Blockly.Msg["LOGIC_ASSERT_TOOLTIP"] = "Vérifie si une condition est vraie. Si la condition est fausse, génère une erreur et interrompt l'exécution du programme.";
Blockly.Msg["LOGIC_ASSERT_HELPURL"] = "https://en.wikipedia.org/wiki/Assertion_(software_development)";

// Loop blocks.
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "http://fr.wikipedia.org/wiki/Boucle_for";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "répéter %1 fois";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Exécuter des instructions plusieurs fois.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "répéter jusqu’à";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "répéter tant que";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Tant qu’une valeur est fausse, alors exécuter des instructions.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Tant qu’une valeur est vraie, alors exécuter des instructions.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg["CONTROLS_FOR_TITLE"] = "compter avec %1 de %2 à %3 par pas de %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Faire prendre à la variable « %1 » les valeurs depuis le nombre de début jusqu’au nombre de fin, en s’incrémentant du pas spécifié, et exécuter les instructions spécifiées.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "pour chaque élément %1 dans la liste %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "Pour chaque élément d’une liste, assigner la valeur de l’élément à la variable '%1', puis exécuter des instructions.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "quitter la boucle";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "passer à l’itération de boucle suivante";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Sortir de la boucle englobante.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Sauter le reste de cette boucle, et poursuivre avec l’itération suivante.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_PASS_TITLE"] = "ne rien faire";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_PASS_TOOLTIP"] = "Ne rien faire.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Attention : Ce bloc ne devrait être utilisé que dans une boucle.";
Blockly.Msg["CONTROLS_LISTCOMP_TITLE"] = "Créer une liste avec %1 pour %2 dans %3" ;
Blockly.Msg["CONTROLS_LISTCOMP_TOOLTIP"] = "Créer une liste de compréhension" ;
Blockly.Msg["CONTROLS_RANGE_TITLE_1"] = "Créer une séquence avec : end " ;
Blockly.Msg["CONTROLS_RANGE_TITLE_2"] = ", début " ;
Blockly.Msg["CONTROLS_RANGE_TITLE_3"] = ", étape " ;
Blockly.Msg["CONTROLS_RANGE_TOOLTIP"] = "Créer une séquence de nombres" ;

// Math blocks.
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://fr.wikipedia.org/wiki/Nombre";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Un nombre.";
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://fr.wikipedia.org/wiki/Arithmetique";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Renvoie la somme des deux nombres.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Renvoie la différence des deux nombres.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Renvoie le quotient des deux nombres.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Renvoie le produit des deux nombres.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Renvoie le premier nombre élevé à la puissance du second.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://fr.wikipedia.org/wiki/Racine_carree";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "racine carrée";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "valeur absolue";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Renvoie la racine carrée d’un nombre.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Renvoie la valeur absolue d’un nombre.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Renvoie l’opposé d’un nombre";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Renvoie e à la puissance d’un nombre.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Renvoie le logarithme naturel d’un nombre.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Renvoie le logarithme décimal d’un nombre.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Renvoie 10 à la puissance d’un nombre.";
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://fr.wikipedia.org/wiki/Fonction_trigonom%C3%A9trique";
Blockly.Msg["MATH_TRIG_COS"] = "cos";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";
Blockly.Msg["MATH_TRIG_TAN"] = "tan";
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Renvoie le cosinus d’un angle en degrés (pas en radians).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Renvoie le sinus d’un angle en degrés (pas en radians).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Renvoie la tangente d’un angle en degrés (pas en radians).";
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Renvoie l’arccosinus d’un nombre.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Renvoie l’arcsinus d’un nombre.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Renvoie l’arctangente d’un nombre.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS_RAD"] = "Renvoie le cosinus d’un angle en radians.";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN_RAD"] = "Renvoie le sinus d’un angle en radians.";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN_RAD"] = "Renvoie la tangente d’un angle en radians.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://fr.wikipedia.org/wiki/Table_de_constantes_math%C3%A9matiques";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Renvoie une des constantes courantes : π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), ou ∞ (infini).";
Blockly.Msg["MATH_IS_EVEN"] = "est pair";
Blockly.Msg["MATH_IS_ODD"] = "est impair";
Blockly.Msg["MATH_IS_PRIME"] = "est premier";
Blockly.Msg["MATH_IS_WHOLE"] = "est entier";
Blockly.Msg["MATH_IS_POSITIVE"] = "est positif";
Blockly.Msg["MATH_IS_NEGATIVE"] = "est négatif";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "est divisible par";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Vérifier si un nombre est pair, impair, premier, entier, positif, négatif, ou s’il est divisible par un certain nombre. Renvoie vrai ou faux.";
Blockly.Msg["MATH_MAP_TITLE"] = "transformer la valeur %1 de [ %2 à %3 ] vers [ %4 à %5 ]";
Blockly.Msg["MATH_MAP_TOOLTIP"] = "Transforme une valeur comprise dans un intervalle [min;max] dans un autre intervalle [min;max]";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://fr.wikipedia.org/wiki/Arrondi_(math%C3%A9matiques)";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "arrondir";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "arrondir par défaut";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "arrondir par excès";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Arrondir un nombre au-dessus ou au-dessous.";
Blockly.Msg["MATH_ROUND_NDIGITS_TITLE"] = "arrondir %1 avec %2 décimale(s)";
Blockly.Msg["MATH_ROUND_NDIGITS_TOOLTIP"] = "Arrondir un nombre avec n chiffres significatifs.";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://fr.wikipedia.org/wiki/Modulo_(op%C3%A9ration)";
Blockly.Msg["MATH_MODULO_TITLE"] = "reste de %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Renvoyer le reste de la division euclidienne des deux nombres.";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "contraindre %1 entre %2 et %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Contraindre un nombre à être entre les limites spécifiées (incluses).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://fr.wikipedia.org/wiki/G%C3%A9n%C3%A9rateur_de_nombres_al%C3%A9atoires";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "entier aléatoire entre %1 et %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Renvoyer un entier aléatoire entre les deux limites spécifiées, incluses.";
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://fr.wikipedia.org/wiki/G%C3%A9n%C3%A9rateur_de_nombres_al%C3%A9atoires";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "nombre aléatoire entre 0 et 1";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Renvoyer un nombre aléatoire entre 0.0 (inclus) et 1.0 (exclus), soit [0, 1[ en mathématiques.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://fr.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 de X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Renvoie l'arc tangente du point (X, Y) en degrés entre -180 et 180.";
Blockly.Msg["MATH_ATAN2_RAD_TOOLTIP"] = "Renvoie l'arc tangente du point (X, Y) en radians entre -π et π.";
Blockly.Msg["MATH_MIN_MAX_TOOLTIP"] = "Renvoie le plus petit ou plus grand nombre parmi les valeurs données.";
// Text blocks.
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://fr.wikipedia.org/wiki/Cha%C3%AEne_de_caract%C3%A8res";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "Une lettre, un mot ou une ligne de texte.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "créer le texte";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Créer un morceau de texte en agrégeant un nombre quelconque d’éléments.";
Blockly.Msg["TEXT_NEWLINE_TITLE"] = "%1 saut.s de ligne";
Blockly.Msg["TEXT_NEWLINE_TOOLTIP"] = "Ajoute des sauts de ligne dans un texte.";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_APPEND_TITLE"] = "ajouter le texte %2 à %1";
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Ajouter du texte à la variable '%1'.";
Blockly.Msg["TEXT_SPLIT_TITLE"] = "séparer le texte %1 avec %2";
Blockly.Msg["TEXT_SPLIT_TOOLTIP"] = "Renvoie la liste des éléments du texte séparés par le séparateur.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_LENGTH_TITLE"] = "longueur de %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Renvoie le nombre de lettres (espaces compris) dans le texte fourni.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 est vide";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Renvoie vrai si le texte fourni est vide.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "trouver la première occurrence de la chaîne";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "trouver la dernière occurrence de la chaîne";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "dans le texte %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Renvoie l’index de la première/dernière occurrence de la première chaîne dans la seconde. Renvoie %1 si la chaîne n’est pas trouvée.";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg["TEXT_CHARAT_TITLE"] = "dans le texte %1 %2";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "obtenir la première lettre";
Blockly.Msg["TEXT_CHARAT_LAST"] = "obtenir la dernière lettre";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "obtenir la lettre d'indice";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "obtenir la lettre d'indice (depuis la fin)";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "obtenir une lettre au hasard";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Renvoie la lettre à la position indiquée.";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "obtenir la sous-chaîne depuis la première lettre";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "obtenir la sous-chaîne depuis la lettre d'indice";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "obtenir la sous-chaîne depuis la lettre d'indice (depuis la fin)";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "jusqu’à la dernière lettre";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "jusqu’à la lettre d'indice";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "jusqu’à la lettre d'indice (depuis la fin)";
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "dans le texte";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Renvoie une partie indiquée du texte.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg["TEXT_CHANGECASE_TITLE"] = "mettre %1 en %2";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "minuscules";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "Majuscule Au Début De Chaque Mot";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "MAJUSCULES";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Renvoyer une copie du texte dans une autre casse.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg["TEXT_TRIM_TITLE"] = "supprimer les espaces %1 de %2";
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "des deux côtés";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "du côté gauche";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "du côté droit";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Renvoyer une copie du texte avec les espaces supprimés d’un bout ou des deux.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_TITLE"] = "compter occurences de %1 dans %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Compter combien de fois un texte donné apparait dans un autre.";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_TITLE"] = "remplacer %1 par %2 dans %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Remplacer toutes les occurrences d’un texte par un autre.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_TITLE"] = "inverser %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Inverse l’ordre des caractères dans le texte.";
Blockly.Msg["TEXT_COMMENT_TITLE"] = "Commentaire %1";
Blockly.Msg["TEXT_COMMENT_TOOLTIP"] = "Ajouter un commentaire dans le code.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_PRINT_TITLE"] = "afficher %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Afficher le texte, le nombre ou une autre valeur spécifiée.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Demander un nombre à l’utilisateur.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Demander un texte à l’utilisateur.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "invite pour un nombre avec un message";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "invite pour un texte avec un message";
Blockly.Msg["TEXT_COUNT_CHARACTERS_TITLE"] = "compter le nombre d'occurrence de %1 dans %2";
Blockly.Msg["TEXT_COUNT_CHARACTERS_TOOLTIP"] = "Permet de compter le nombre de majuscules, minuscules, chiffres ou caractères spéciaux d'une chaîne de caractère.";
Blockly.Msg["TEXT_COUNT_CHARACTERS_UPPER"] = "majuscules";
Blockly.Msg["TEXT_COUNT_CHARACTERS_LOWER"] = "minuscules";
Blockly.Msg["TEXT_COUNT_CHARACTERS_DIGITS"] = "chiffres";
Blockly.Msg["TEXT_COUNT_CHARACTERS_SPECIAL"] = "caractères spéciaux";
Blockly.Msg["TEXT_RANDOM_STRING_TITLE"] = "générer une chaîne de caractère de longueur %1";
Blockly.Msg["TEXT_RANDOM_STRING_TOOLTIP"] = "Permet de générer une chaîne de caractère contenant un mélange de majuscules, minuscules, chiffres ou de caractères spéciaux. La longueur de cette chaîne peut être modifiée dans le bloc.";

// Variables blocks.
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg["VARIABLES_SET"] = "affecter à %1 la valeur %2";
Blockly.Msg["VARIABLES_GLOBAL"] = "variable globale %1";
Blockly.Msg["VARIABLES_GLOBAL_TOOLTIP"] = "Permet de définir une variable globale.";
Blockly.Msg["VARIABLES_GLOBAL_HELPURL"] = "https://www.w3schools.com/python/python_variables_global.asp";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Créer 'obtenir %1'";
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Fixe cette variable pour qu’elle soit égale à la valeur de l’entrée.";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Créer 'fixer %1'";
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Renvoie la valeur de cette variable.";
Blockly.Msg["VARIABLES_INCREMENT_HELPURL"] = "https://fr.wikipedia.org/wiki/Idiome_de_programmation";
Blockly.Msg["VARIABLES_INCREMENT_TITLE"] = "ajouter à %1 la valeur %2";
Blockly.Msg["VARIABLES_INCREMENT_TOOLTIP"] = "Ajouter un nombre à cette variable.";
Blockly.Msg["VARIABLES_FORCE_TYPE_TITLE"] = "convertir %1 en %2";
Blockly.Msg["VARIABLES_FORCE_TYPE_CHAR"] = "caractère (char)";
Blockly.Msg["VARIABLES_FORCE_TYPE_TEXT"] = "texte";
Blockly.Msg["VARIABLES_FORCE_TYPE_BOOLEAN"] = "booléen (bool)";
Blockly.Msg["VARIABLES_FORCE_TYPE_INTEGER"] = "entier (int)";
Blockly.Msg["VARIABLES_FORCE_TYPE_FLOAT"] = "flottant (float)";
Blockly.Msg["VARIABLES_FORCE_TYPE_LONG"] = "grand nombre (long)";
Blockly.Msg["VARIABLES_FORCE_TYPE_SHORT"] = "petit nombre (short)";
Blockly.Msg["VARIABLES_FORCE_TYPE_TOOLTIP"] = "Permet de convertir une variable dans le typage choisi.";
Blockly.Msg["VARIABLES_TYPEOF_TITLE"] = "type de %1";
Blockly.Msg["VARIABLES_TYPEOF_TOOLTIP"] = "Renvoie le type de cette variable.";
Blockly.Msg["VARIABLES_TUPLE_TITLE"] = "Tuple avec les valeurs :";
Blockly.Msg["VARIABLES_TUPLE_TOOLTIP"] = "Créer un tuple de ces valeurs" ;

// Lists blocks.
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "liste vide";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Renvoyer une liste, de longueur 0, ne contenant aucun enregistrement";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "liste avec les éléments";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "liste avec un nombre quelconque d’éléments.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_REPEAT_TITLE"] = "liste avec l’élément %1 répété %2 fois";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Crée une liste consistant en la valeur fournie répétée le nombre de fois indiqué.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg["LISTS_LENGTH_TITLE"] = "longueur de %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Renvoie la longueur d’une liste.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "moyenne de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "maximum de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "médiane de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "minimum de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "majoritaires de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "élément aléatoire de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "écart-type de la liste";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "somme de la liste";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Renvoyer la moyenne (arithmétique) des valeurs numériques dans la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Renvoyer le plus grand nombre dans la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Renvoyer le nombre médian de la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Renvoyer le plus petit nombre dans la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Renvoyer une liste des élément.s le.s plus courant.s dans la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Renvoyer un élément dans la liste au hasard.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Renvoyer l’écart-type de la liste.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Renvoyer la somme de tous les nombres dans la liste.";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 est vide ?";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Renvoie vrai si la liste est vide.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_TITLE"] = "inverser la liste %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Inverser la copie d’une liste.";
Blockly.Msg["LISTS_SHUFFLE_TITLE"] = "mélanger la liste %1";
Blockly.Msg["LISTS_SHUFFLE_TOOLTIP"] = "Mélanger une les éléments d'une liste (sans créer de copie).";
Blockly.Msg["LISTS_INLIST"] = "dans la liste";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "trouver la première occurrence de l’élément";
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "trouver la dernière occurrence de l’élément";
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Renvoie l’index de la première/dernière occurrence de l’élément dans la liste. Renvoie %1 si l'élément n'est pas trouvé.";
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_GET"] = "obtenir";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "obtenir et supprimer";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "supprimer";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "le premier élément";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "le dernier élément";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "l'élément";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "l'élément d'indice (depuis la fin)";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "un élément aléatoire";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 est le dernier élément.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 est le premier élément.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM_END"] = "Renvoie l’élément à la position indiquée dans une liste (depuis la fin).";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Renvoie le premier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Renvoie l’élément à la position indiquée dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Renvoie le dernier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Renvoie un élément au hasard dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Supprime et renvoie le premier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Supprime et renvoie l’élément à la position indiquée dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Supprime et renvoie le dernier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Supprime et renvoie un élément au hasard dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Supprime le premier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Supprime l’élément à la position indiquée dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Supprime le dernier élément dans une liste.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Supprime un élément au hasard dans une liste.";
Blockly.Msg["LISTS_APPEND_TITLE"] = "dans la liste %1 ajouter l'élément %2";
Blockly.Msg["LISTS_APPEND_TOOLTIP"] = "Ajouter un élément à la fin de la liste.";
Blockly.Msg["LISTS_APPEND_HELPURL"] = "";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "comme";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "mettre";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "insérer en";
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Insère l’élément au début d’une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Insère l’élément à la position indiquée dans une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Ajouter l’élément à la fin d’une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Insère l’élément au hasard dans une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Fixe le premier élément dans une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Met à jour l’élément à la position indiquée dans une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Fixe le dernier élément dans une liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Fixe un élément au hasard dans une liste.";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "obtenir la sous-liste depuis le début";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "obtenir la sous-liste depuis l'élément d'indice";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "obtenir la sous-liste depuis l'élément d'indice (depuis la fin)";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "jusqu’à la fin";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "jusqu’à l'élément d'indice";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "jusqu’à l'élément d'indice (depuis la fin)";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Crée une copie de la partie spécifiée d’une liste.";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "créer une liste depuis le texte";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "créer un texte depuis la liste";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Réunir une liste de textes en un seul, en les séparant par un séparateur.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Couper un texte en une liste de textes, en coupant à chaque séparateur.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "avec séparateur";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "croissant";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "décroissant";
Blockly.Msg["LISTS_SORT_TITLE"] = "trier %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Trier une copie d’une liste.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alphabétique, en ignorant la casse";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numérique";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alphabétique";

// Procedures blocks.
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "définir";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "nom_de_la_fonction";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "avec :";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = Blockly.Msg["PROCEDURES_BEFORE_PARAMS"];
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Crée une fonction sans sortie.";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Décrire cette fonction…";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "retour";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Crée une fonction avec une sortie.";
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "autoriser les ordres";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Attention : Cette fonction a des paramètres en double.";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://fr.wikipedia.org/wiki/Sous-programme";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Exécuter la fonction '%1' définie par l’utilisateur.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://fr.wikipedia.org/wiki/Sous-programme";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Exécuter la fonction '%1' définie par l’utilisateur et utiliser son résultat.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Surligner la définition de la fonction";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Créer '%1'";
Blockly.Msg["PROCEDURES_IFRETURN_TITLE"] = "si";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Si une valeur est vraie, alors renvoyer une seconde valeur.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Attention : Ce bloc pourrait n’être utilisé que dans une définition de fonction.";

// Dict blocks
Blockly.Msg["DICTIONARIES_CREATE_EMPTY_TITLE"] = "créer un dictionaire vide";
Blockly.Msg["DICTIONARIES_CREATE_EMPTY_TOOLTIP"] = "Initialise un dictionnaire vide.";
Blockly.Msg["DICTIONARIES_CREATE_WITH_TITLE"] = "créer un dictionaire avec";
Blockly.Msg["DICTIONARIES_CREATE_WITH_TOOLTIP"] = "Initialise un dictionnaire avec les valeurs.";
Blockly.Msg["DICTIONARIES_FROM_LIST_TITLE"] = "Créer un dictionnaire à partir de %1";
Blockly.Msg["DICTIONARIES_FROM_LIST_TOOLTIP"] = "Permet de créer un dictionnaire à partir d'une liste";
Blockly.Msg["DICTIONARIES_LENGTH_TITLE"] = "taille de %1";
Blockly.Msg["DICTIONARIES_LENGTH_TOOLTIP"] = "Retourne la taille du dictionnaire.";
Blockly.Msg["DICTIONARIES_ADD_TUPLE_TITLE"] = "ajouter à %1 le couple clé-valeur (%2,%3)";
Blockly.Msg["DICTIONARIES_ADD_TUPLE_TOOLTIP"] = "Ajoute un tuple au dictionnaire. Si la clé existe déjà, la valeur sera remplacée.";
Blockly.Msg["DICTIONARIES_LOOP_TITLE"] = "Pour chaque %1 %2 du dictionnaire %3";
Blockly.Msg["DICTIONARIES_LOOP_TOOLTIP"] = "Parcourt les clés, les valeurs ou les tuples (clé,valeur) du dictionnaire.";
Blockly.Msg["DICTIONARIES_LOOP_KEY"] = "clé";
Blockly.Msg["DICTIONARIES_LOOP_VALUE"] = "valeur";
Blockly.Msg["DICTIONARIES_LOOP_TUPLE"] = "tuple";
Blockly.Msg["DICTIONARIES_GET_ITEM_TITLE"] = "dans le dictionnaire %1 obtenir la valeur associée à la clé %2";
Blockly.Msg["DICTIONARIES_GET_ITEM_TOOLTIP"] = "Retourne la valeur associée à une clé du dictionnaire ou None si la clé n'existe pas.";
Blockly.Msg["DICTIONARIES_UPDATE_ITEM_TITLE"] = "dans le dictionnaire %1 modifier la valeur %2 associée à la clé %3";
Blockly.Msg["DICTIONARIES_UPDATE_ITEM_TOOLTIP"] = "Modifie la valeur associée à ne clé dans le dictionnaire.";
Blockly.Msg["DICTIONARIES_INCLUDE_TITLE"] = "la %1 %2 %3 présente dans le dictionnaire %4";
Blockly.Msg["DICTIONARIES_INCLUDE_TOOLTIP"] = "Vérifie si la clé/valeur est présente ou non dans le dictionnaire.";
Blockly.Msg["DICTIONARIES_INCLUDE_IN"] = "est";
Blockly.Msg["DICTIONARIES_INCLUDE_NOT"] = "n'est pas";
Blockly.Msg["DICTIONARIES_INCLUDE_KEY"] = "clé";
Blockly.Msg["DICTIONARIES_INCLUDE_VALUE"] = "valeur";
Blockly.Msg["DICTIONARIES_DELETE_TUPLE_TITLE"] = "supprimer du dictionnaire %1 le tuple associé à la clé %2";
Blockly.Msg["DICTIONARIES_DELETE_TUPLE_TOOLTIP"] = "Supprime un tuple du dictionnaire.";
Blockly.Msg["DICTIONARIES_CLEAR_TITLE"] = "supprimer toutes les données du dictionnaire %1";
Blockly.Msg["DICTIONARIES_CLEAR_TOOLTIP"] = "Supprime tous les tuples du ductionnaire.";

// Other Block
Blockly.Msg["OTHER_AST_RAW"] = "Code non traduit";

// COMMON BLOCKS  (python traduction)
Blockly.Msg["COMMUNICATION_SERIAL_WRITE_SEPARATOR_TITLE"] = "écrire dans la console";
Blockly.Msg["COMMUNICATION_SERIAL_WRITE_SEPARATOR_TOOLTIP"] = "Écrit les données dans la console série avec un séparateur.";

// Camera - Wio lite AI
Blockly.Msg['WIO_MAKE_PREDICTION_TITLE'] = '[Wio lite] lancer une prédiction';
Blockly.Msg['WIO_MAKE_PREDICTION_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Lance une prédiction en utilisant l\'image de la caméra de la Wio lite.';
Blockly.Msg['WIO_GET_DATA_TITLE'] = '[Wio lite] récupérer toutes les données';
Blockly.Msg['WIO_GET_DATA_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP +  'Retourne l\'ensemble des données de la Wio lite (probabiltés associées aux classes du modèle).';
Blockly.Msg['WIO_GET_CLASS_DATA_BY_ID_TITLE'] = '[Wio lite] probabilité de la classe n°%1';
Blockly.Msg['WIO_GET_CLASS_DATA_BY_ID_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Retourne la probabilité associée à la classe dont l\'id est indiqué.';
Blockly.Msg['WIO_GET_CLASS_MAX_ID_TITLE'] = '[Wio lite] id de la classe détectée';
Blockly.Msg['WIO_GET_CLASS_MAX_ID_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Retourne l\'id de la classe détectée (celle avec la plus haute probabilité).';
Blockly.Msg['WIO_GET_STATUS_TITLE'] = '[Wio lite] obtenir %1';
Blockly.Msg['WIO_GET_STATUS'] = 'le statut';
Blockly.Msg['WIO_GET_VERSION'] = 'la version';
Blockly.Msg['WIO_GET_STATUS_TOOLTIP'] = IMG_WIO_LITE_AI + Blockly.Tooltip.SEP + 'Retourne la version ou le statut de la Wio lite (0: occupé, 1: prêt, 2: résultat disponible).';