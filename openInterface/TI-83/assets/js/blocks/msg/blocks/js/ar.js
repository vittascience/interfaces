/**
 * @fileoverview Italian messages for TI-83 Premium CE. (EN)
 */
'use strict';
// Common messages
Blockly.Msg['SECOND'] = 'second.s';
Blockly.Msg['MILLISECOND'] = 'millisecond.s';
Blockly.Msg['MICROSECOND'] = 'microsecond.s';
// TI System
Blockly.Msg['TI_SYSTEM_RECALL_LIST_TITLE'] = '[system] recall list with index %1';
Blockly.Msg['TI_SYSTEM_RECALL_LIST_TOOLTIP'] = 'Returns the stored list with index (\'1\'-\'6\'). This block should work if there has already been a call to the store_list() function.';
Blockly.Msg['TI_SYSTEM_STORE_LIST_TITLE'] = '[system] store list %1 with index %2';
Blockly.Msg['TI_SYSTEM_STORE_LIST_TOOLTIP'] = 'Allows to keep a list with the index (\'1\'-\'6\'). This list can be retrieved later by calling the recall_list() function.';
Blockly.Msg['TI_SYSTEM_RECALL_REGEQ_TITLE'] = '[system] get RegEQ';
Blockly.Msg['TI_SYSTEM_RECALL_REGEQ_TOOLTIP'] = 'Returns the RegEQ.';
Blockly.Msg['TI_SYSTEM_WHILE_CONDITION_TITLE'] = '[system] repeat while %1';
Blockly.Msg['TI_SYSTEM_WHILE_CONDITION_TOOLTIP'] = 'Repeats loop while condition is true.';
Blockly.Msg['TI_SYSTEM_IF_CONDITION_TITLE'] = '[system] if %1 then';
Blockly.Msg['TI_SYSTEM_IF_CONDITION_TOOLTIP'] = 'Execute instructions if condition is true.';
Blockly.Msg['TI_SYSTEM_ESCAPE_TITLE'] = 'execution stopped ?';
Blockly.Msg['TI_SYSTEM_ESCAPE_TOOLTIP'] = 'Returns \'True\' if button \'annul\' was pressed.';
Blockly.Msg['TI_SYSTEM_DISP_AT_TITLE'] = '[system] show text %1 at line %2 position %3';
Blockly.Msg['TI_SYSTEM_DISP_AT_TOOLTIP'] = 'Enable to show text on the TI-83 calculator graph window.';
Blockly.Msg['TI_SYSTEM_DISP_AT_LEFT'] = 'left';
Blockly.Msg['TI_SYSTEM_DISP_AT_CENTER'] = 'centered';
Blockly.Msg['TI_SYSTEM_DISP_AT_RIGHT'] = 'right';
Blockly.Msg['TI_SYSTEM_DISP_CLR_TITLE'] = '[system] clear text';
Blockly.Msg['TI_SYSTEM_DISP_CLR_TOOLTIP'] = 'Enable to clear text from the TI-83 calculator screen.';
Blockly.Msg['TI_SYSTEM_DISP_WAIT_TITLE'] = '[system] wait for \'annul\' button to be pressed';
Blockly.Msg['TI_SYSTEM_DISP_WAIT_TOOLTIP'] = 'Display TI-83 calculator screen until [annul] button is pressed.';
Blockly.Msg['TI_SYSTEM_DISP_CURSOR_TITLE'] = '[system] control cursor to state %1';
Blockly.Msg['TI_SYSTEM_DISP_CURSOR_TOOLTIP'] = 'Allows whether or not to display the TI-83 calculator screen cursor.';
Blockly.Msg['TI_SYSTEM_SLEEP_TITLE'] = '[system] wait %1 %2';
Blockly.Msg['TI_SYSTEM_SLEEP_TOOLTIP'] = 'Pauses code execution. The ti_system.sleep() function takes seconds as arguments.';
Blockly.Msg['TI_SYSTEM_SLEEP_SECOND'] = Blockly.Msg['SECOND'];
Blockly.Msg['TI_SYSTEM_SLEEP_MILLISECOND'] = Blockly.Msg['MILLISECOND'];
Blockly.Msg['TI_SYSTEM_SLEEP_MICROSECOND'] = Blockly.Msg['MICROSECOND'];
Blockly.Msg['TI_SYSTEM_WAIT_KEY_TITLE'] = '[system] wait key';
Blockly.Msg['TI_SYSTEM_WAIT_KEY_TOOLTIP'] = 'Enable to wait key.';
// TI Input/Output - Console
Blockly.Msg['TI_IO_PRINT_TITLE'] = 'print %1';
Blockly.Msg['TI_IO_PRINT_TOOLTIP'] = 'Write a string on TI-83 python console.';
Blockly.Msg['TI_IO_CLEAR_SHELL_TITLE'] = 'clear shell';
Blockly.Msg['TI_IO_CLEAR_SHELL_TOOLTIP'] = 'Clear shell of TI-83 calculator.';
Blockly.Msg['TI_IO_INPUT_TEXT_TITLE'] = 'request user for a text with %1';
Blockly.Msg['TI_IO_INPUT_TEXT_TOOLTIP'] = 'Request user to input a value as a text in python console.';
Blockly.Msg['TI_IO_INPUT_NUMBER_TITLE'] = 'request user for a number with %1';
Blockly.Msg['TI_IO_INPUT_NUMBER_TOOLTIP'] = 'Request user to input a value as a float number in python console.';
// TI Input/Output - Time
Blockly.Msg['IO_WAIT_TITLE'] = '[time] wait %1 %2';
Blockly.Msg['IO_WAIT_TOOLTIP'] = 'Pauses code execution. The time.sleep() function takes seconds as arguments.';
Blockly.Msg['IO_WAIT_SECOND'] = Blockly.Msg['SECOND'];
Blockly.Msg['IO_WAIT_MILLISECOND'] = Blockly.Msg['MILLISECOND'];
Blockly.Msg['IO_WAIT_MICROSECOND'] = Blockly.Msg['MICROSECOND'];
Blockly.Msg['IO_WAIT_UNTIL_TITLE'] = '[time] wait until %1';
Blockly.Msg['IO_WAIT_UNTIL_TOOLTIP'] = 'Stop the code execution until the satisfied condition.';
Blockly.Msg['IO_INITCHRONOMETER_TITLE'] = '[time] initialize the chronometer';
Blockly.Msg['IO_INITCHRONOMETER_TOOLTIP'] = 'Allows you to initialize the chronometer (in seconds).';
Blockly.Msg['IO_GETCHRONOMETER_TITLE'] = '[time] get chronometer in %1';
Blockly.Msg['IO_GETCHRONOMETER_TOOLTIP'] = 'Returns the chronometer value from the initialization in seconds or milliseconds.';
// TI - Random
Blockly.Msg['RANDOM_RANDOM_TITLE'] = 'random float from 0 to 1';
Blockly.Msg['RANDOM_RANDOM_TOOLTIP'] = 'Returns a random number between 0.0 (inclusive) and 1.0 (exclusive), as [0, 1[ in mathematics.';
Blockly.Msg['RANDOM_RANDINT_TITLE'] = 'random integer from %1 to %2';
Blockly.Msg['RANDOM_RANDINT_TOOLTIP'] = 'Returns a random integer between the two specified limits, inclusive.';
Blockly.Msg['RANDOM_UNIFORM_TITLE'] = 'uniform number from %1 to %2';
Blockly.Msg['RANDOM_UNIFORM_TOOLTIP'] = 'Returns an uniform number between the two specified limits, inclusive.';
Blockly.Msg['RANDOM_RANDRANGE_TITLE'] = 'random float from %1 to %2 with step %3';
Blockly.Msg['RANDOM_RANDRANGE_TOOLTIP'] = 'Returns a random number between the two specified limits, inclusive, with specified step.';
Blockly.Msg['RANDOM_CHOICE_TITLE'] = 'random item in list %1';
Blockly.Msg['RANDOM_CHOICE_TOOLTIP'] = 'Returns random item from the specified list.';
Blockly.Msg['RANDOM_SEED_TITLE'] = 'null number';
Blockly.Msg['RANDOM_SEED_TOOLTIP'] = 'Returns null number: None.';
// Sensors - common messages
Blockly.Msg['SENSORS_TEMPERATURE'] = 'temperature';
Blockly.Msg['SENSORS_TEMPERATURE_IN'] = 'in';
Blockly.Msg['SENSORS_HUMIDITY'] = 'humidity (%)';
Blockly.Msg['SENSORS_PRESSURE'] = 'pressure (hPa)';
// Devices - Built-in Hub Innovator
Blockly.Msg['DEVICES_BUILTIN_SETRGBLED_TITLE'] = '[RGB LED] set colors to R %1 G %2 B %3';
Blockly.Msg['DEVICES_BUILTIN_SETRGBLED_TOOLTIP'] = IMG_MODULE_BUILTIN + Blockly.Tooltip.SEP + 'Block controlling the color of the Innovator Hub built-in RGB LED, give a value between 0 and 255 for Red, Green and Blue.';
Blockly.Msg['DEVICES_BUILTIN_SETRGBLEDPALETTE_TITLE'] = '[RGB LED] set color to %1';
Blockly.Msg['DEVICES_BUILTIN_SETRGBLEDPALETTE_TOOLTIP'] = IMG_MODULE_BUILTIN + Blockly.Tooltip.SEP + 'Block controlling the color of the Innovator Hub built-in RGB LED, choose a colour in the given palette.';
Blockly.Msg['DEVICES_BUILTIN_BLINKRGBLED_TITLE'] = '[RGB LED] blink led';
Blockly.Msg['DEVICES_BUILTIN_BLINKRGBLED_TOOLTIP'] = IMG_MODULE_BUILTIN + Blockly.Tooltip.SEP + 'Blink the Innovator Hub built-in RGB LED.';
Blockly.Msg['DEVICES_BUILTIN_SETREDLED_TITLE'] = '[Red LED] control LED to state %1';
Blockly.Msg['DEVICES_BUILTIN_SETREDLED_TOOLTIP'] = IMG_MODULE_BUILTIN + Blockly.Tooltip.SEP + 'Control built-in Red LED.';
Blockly.Msg['DEVICES_BUILTIN_PLAYMUSICBUZZER_TITLE'] = '[Sound output] play music %1';
Blockly.Msg['DEVICES_BUILTIN_PLAYMUSICBUZZER_TOOLTIP'] = IMG_MODULE_BUILTIN + Blockly.Tooltip.SEP + 'Enable to play music on built-in Innovator Hub speaker.';
Blockly.Msg['DEVICES_BUILTIN_SPEAKER_PLAY_NOTES_TITLE'] = '[Sound output] play notes on';
Blockly.Msg['DEVICES_BUILTIN_SPEAKER_PLAY_NOTES_TOOLTIP'] = IMG_MODULE_BUILTIN + Blockly.Tooltip.SEP + 'Enable to play notes on built-in Innovator Hub speaker.';
Blockly.Msg['DEVICES_BUILTIN_SPEAKER_NOTE_TITLE'] = 'note %1 at octave %2 with duration %3';
Blockly.Msg['DEVICES_BUILTIN_SPEAKER_NOTE_TOOLTIP'] = IMG_MODULE_BUILTIN + Blockly.Tooltip.SEP + 'Define a note with octave and duration.';
Blockly.Msg['DEVICES_BUILTIN_SPEAKER_PLAY_FREQUENCY_TITLE'] = '[Sound output] play frequency %1 during %2 (s)';
Blockly.Msg['DEVICES_BUILTIN_SPEAKER_PLAY_FREQUENCY_TOOLTIP'] = IMG_MODULE_BUILTIN + Blockly.Tooltip.SEP + 'Enable to play integer frequency on built-in Innovator Hub speaker. The duration has to be defined as seconds.';
Blockly.Msg['DEVICES_BUILTIN_GETLIGHT_TITLE'] = '[Light input] light level';
Blockly.Msg['DEVICES_BUILTIN_GETLIGHT_TOOLTIP'] = IMG_MODULE_BUILTIN + Blockly.Tooltip.SEP + 'Returns light level (from 0 to 100) from Innovator Hub built-in sensor.';
// Devices - External Grove Inputs
Blockly.Msg['DEVICES_GROVE_GETPOTENTIOMETER_TITLE'] = '[Potentiometer] value on pin %1';
Blockly.Msg['DEVICES_GROVE_GETPOTENTIOMETER_TOOLTIP'] = IMG_MODULE_ROTARY_ANGLE + Blockly.Tooltip.SEP + 'Returns value measurement (from 0 to 1023) from the grove potentiometer on pins IN1/IN2/IN3 or BB4/BB8/BB9/BB10.';
Blockly.Msg['DEVICES_GROVE_GETULTRASONIC_TITLE'] = '[Ultrasonic Sensor] distance (cm) on pin %1';
Blockly.Msg['DEVICES_GROVE_GETULTRASONIC_TOOLTIP'] = IMG_MODULE_ULTRASONIC + Blockly.Tooltip.SEP + 'Returns distance measurement (in cm) from the ultrasonic ranger sensor on digital pins. Warning, if it\'s a grove sensor, TRIG and ECHO are both connected to SIG.';
Blockly.Msg['DEVICES_GROVE_GETMOISTURE_TITLE'] = '[Moisture Sensor] moisture on pin %1';
Blockly.Msg['DEVICES_GROVE_GETMOISTURE_TOOLTIP'] = IMG_MODULE_MOISTURE + Blockly.Tooltip.SEP + 'Returns moisture measurement (from 0 to 1023) from the grove moisture sensor on pins IN1/IN2/IN3 or BB4/BB8/BB9/BB10.';
Blockly.Msg['DEVICES_GROVE_GETTEMPERATURE_TITLE'] = '[Temperature Sensor] temperature in %1 on pin %2';
Blockly.Msg['DEVICES_GROVE_GETTEMPERATURE_TOOLTIP'] = IMG_MODULE_TEMPERATURE + Blockly.Tooltip.SEP + 'Returns grove temperature sensor value in Celius degree (°C), Fahrenheit (°F) or Kelvin (K) on analog pins IN1/IN2/IN3 or BB4/BB8/BB9/BB10.';
Blockly.Msg['DEVICES_GROVE_DHT_READDATA_TITLE'] = '[DHT11 Sensor] %1 on pin %2';
Blockly.Msg['DEVICES_GROVE_DHT_READDATA_TOOLTIP'] = IMG_MODULE_DHT11 + Blockly.Tooltip.SEP + 'Returns temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K), or air humidity (in %) from dht11 sensor on digital pins.';
Blockly.Msg['DEVICES_GROVE_GETLOUDNESS_TITLE'] = '[Loudness Sensor] loudness on pin %1';
Blockly.Msg['DEVICES_GROVE_GETLOUDNESS_TOOLTIP'] = IMG_MODULE_SOUND_LOUDNESS + Blockly.Tooltip.SEP + 'Returns loudness measurement (from 0 to 1023) from the grove loudness sensor on pins IN1/IN2/IN3 or BB4/BB8/BB9/BB10.';
Blockly.Msg['DEVICES_GROVE_GETLIGHT_TITLE'] = '[Light Sensor] light level on pin %1';
Blockly.Msg['DEVICES_GROVE_GETLIGHT_TOOLTIP'] = IMG_MODULE_LIGHT + Blockly.Tooltip.SEP + 'Returns grove light sensor value (from 0 to 1023) on analog pins IN1/IN2/IN3 or BB4/BB8/BB9/BB10.';
// Devices - External grove Outputs
Blockly.Msg['DEVICES_GROVE_SETLED_TITLE'] = '[LED module] control LED to state %1 on pin %2';
Blockly.Msg['DEVICES_GROVE_SETLED_TOOLTIP'] = IMG_MODULE_LED + Blockly.Tooltip.SEP + 'Enable to switch on or switch off the LED socket kit Grove (0 or 1) on digitals pins.';
Blockly.Msg['DEVICES_GROVE_SETLEDINTENSITY_TITLE'] = '[LED] set LED intensity to %1 on pin %2';
Blockly.Msg['DEVICES_GROVE_SETLEDINTENSITY_TOOLTIP'] = IMG_MODULE_LED_PWM + Blockly.Tooltip.SEP + 'Enable to set the LED intensity from 0 to 255 on PWM pins.';
Blockly.Msg['DEVICES_GROVE_SERVO_SETANGLE_TITLE'] = '[Servomotor] set angle to %1 on pin %2';
Blockly.Msg['DEVICES_GROVE_SERVO_SETANGLE_TOOLTIP'] = IMG_MODULE_SERVO + Blockly.Tooltip.SEP + 'Enable to control servo angle (from -90 to 90) on pwm pins. Warning, Innovator Hub has to be powered by external batterie in order to provide enough energy to servomotor.';
Blockly.Msg['DEVICES_GROVE_RELAY_CONTROL_TITLE'] = '[Relay module] control relay to state %1 on pin %2';
Blockly.Msg['DEVICES_GROVE_RELAY_CONTROL_TOOLTIP'] = IMG_MODULE_RELAY + Blockly.Tooltip.SEP + 'Enable to control state grove relay module (0 or 1) on digitals pins.';
Blockly.Msg['DEVICES_GROVE_VIBRATIONMOTOR_CONTROL_TITLE'] = '[Vibration motor] control motor to state %1 on pin %2';
Blockly.Msg['DEVICES_GROVE_VIBRATIONMOTOR_CONTROL_TOOLTIP'] = IMG_MODULE_VIBRATION_MOTOR + Blockly.Tooltip.SEP + 'Enable to control state of grove vibration motor (0 or 1) on digitals pins.';
Blockly.Msg['DEVICES_GROVE_VIBRATIONMOTOR_SET_TITLE'] = '[Vibration motor] control motor to value %1 on pin %2';
Blockly.Msg['DEVICES_GROVE_VIBRATIONMOTOR_SET_TOOLTIP'] = IMG_MODULE_VIBRATION_MOTOR + Blockly.Tooltip.SEP + 'Enable to control value of grove vibration motor (0-255) on PWM pins.';
Blockly.Msg['DEVICES_GROVE_MOTOR_SETPOWERSTATE_TITLE'] = '[Motor] set power to state %1 on pin %2';
Blockly.Msg['DEVICES_GROVE_MOTOR_SETPOWERSTATE_TOOLTIP'] = IMG_MODULE_MOTOR + Blockly.Tooltip.SEP + 'Enable to control DC motor power state (0 or 1) on digital pins. Warning, Innovator Hub has to be powered by external batterie in order to provide enough energy to DC motor.';
Blockly.Msg['DEVICES_GROVE_MOTOR_SETPOWERVALUE_TITLE'] = '[Motor] set power to value %1 on pin %2';
Blockly.Msg['DEVICES_GROVE_MOTOR_SETPOWERVALUE_TOOLTIP'] = IMG_MODULE_MOTOR + Blockly.Tooltip.SEP + 'Enable to control DC motor power value (0-100) % on pwm pins. Warning, Innovator Hub has to be powered by external batterie in order to provide enough energy to DC motor.';
// Devices - Pins
Blockly.Msg['IO_HUB_DIGITALSIGNAL_TITLE'] = '%1';
Blockly.Msg['IO_HUB_DIGITALSIGNAL_HIGH'] = 'HIGH (1)';
Blockly.Msg['IO_HUB_DIGITALSIGNAL_LOW'] = 'LOW (0)';
Blockly.Msg['IO_HUB_DIGITALSIGNAL_TOOLTIP'] = 'Returns boolean value (1 if HIGH or 0 if LOW).';
Blockly.Msg['IO_HUB_READDIGITALPIN_TITLE'] = 'read digital pin %1';
Blockly.Msg['IO_HUB_READDIGITALPIN_TOOLTIP'] = IMG_MODULE_PINS + Blockly.Tooltip.SEP + 'Enable to read the digital value of pins (0 or 1).';
Blockly.Msg['IO_HUB_WRITEDIGITALPIN_TITLE'] = 'write on digital pin %1 state %2';
Blockly.Msg['IO_HUB_WRITEDIGITALPIN_TOOLTIP'] = IMG_MODULE_PINS + Blockly.Tooltip.SEP + 'Enable to write the value (0 or 1) on digital pin.';
Blockly.Msg['IO_HUB_READANALOGPIN_TITLE'] = 'read analog pin %1';
Blockly.Msg['IO_HUB_READANALOGPIN_TOOLTIP'] = IMG_MODULE_PINS + Blockly.Tooltip.SEP + 'Enable to read the analog value of pins (0-1023).';
Blockly.Msg['IO_HUB_WRITEANALOGPIN_TITLE'] = 'write on analog pin %1 value %2';
Blockly.Msg['IO_HUB_WRITEANALOGPIN_TOOLTIP'] = IMG_MODULE_PINS + Blockly.Tooltip.SEP + 'Enable to write on analog pin the value (0-255).';
Blockly.Msg['IO_HUB_SETPWM_TITLE'] = 'apply a signal of frequency %1 (Hz) duty %2 (%) on pin %3';
Blockly.Msg['IO_HUB_SETPWM_TOOLTIP'] = IMG_MODULE_PINS + Blockly.Tooltip.SEP + 'Enable to apply a PWM signal of frequency (from 0 to 500 Hz) and duty (from 0 to 100 %).';
// TI Plotlib - Configure
Blockly.Msg['TI_PLOTLIB_CLS_TITLE'] = 'clear screen';
Blockly.Msg['TI_PLOTLIB_CLS_TOOLTIP'] = 'Clear screen of TI-83 calculator.';
Blockly.Msg['TI_PLOTLIB_WINDOW_TITLE'] = 'define window size xmin %1 xmax %2 ymin %3 ymax %4';
Blockly.Msg['TI_PLOTLIB_WINDOW_TOOLTIP'] = 'Define size of TI-83 calculator graphics window.';
Blockly.Msg['TI_PLOTLIB_AUTO_WINDOW_TITLE'] = 'define window automatically %1 xaxis %2 yaxis %3';
Blockly.Msg['TI_PLOTLIB_AUTO_WINDOW_TOOLTIP'] = 'Define size of TI-83 calculator graphics window getting minimum and maximum of xaxis and yaxis.';
Blockly.Msg['TI_PLOTLIB_GRID_TITLE'] = 'show grid with scale x %1 y %2 type %3';
Blockly.Msg['TI_PLOTLIB_GRID_TOOLTIP'] = 'Show grid with solid, hatched or dotted lines on TI-83 calculator. Warning, the size of the window must be defined before the grid to have a grid at the correct scale.';
Blockly.Msg['TI_PLOTLIB_AXES_TITLE'] = 'define axes to %1';
Blockly.Msg['TI_PLOTLIB_AXES_TOOLTIP'] = 'Configure axes of TI-83 calculator graphics window.';
Blockly.Msg['TI_PLOTLIB_LABELS_TITLE'] = 'add labels x %1 position %2 and y %3 position %4';
Blockly.Msg['TI_PLOTLIB_LABELS_TOOLTIP'] = 'Add two labels in TI-83 calculator graphics window. Labels x and y are on the left and right of the window respectively. The position defines the position on the vertical axis.';
Blockly.Msg['TI_PLOTLIB_TITLE_TITLE'] = 'add title %1';
Blockly.Msg['TI_PLOTLIB_TITLE_TOOLTIP'] = 'Adds a title to the center of the graphics window of TI-83 calculator.';
Blockly.Msg['TI_PLOTLIB_SHOWPLOT_TITLE'] = 'show plot';
Blockly.Msg['TI_PLOTLIB_SHOWPLOT_TOOLTIP'] = 'Enable to keep plotting window on TI-83 calculator screen.';
// TI Plotlib - Draw
Blockly.Msg['TI_PLOTLIB_DEFINE_COLOR_TITLE'] = 'change color to R %1 G %2 B %3';
Blockly.Msg['TI_PLOTLIB_DEFINE_COLOR_TOOLTIP'] = 'Enable to change pen color of graphics window by changing R,G or B (from 0 to 255).';
Blockly.Msg['TI_PLOTLIB_DEFINE_PALETTE_COLOR_TITLE'] = 'change color to %1';
Blockly.Msg['TI_PLOTLIB_DEFINE_PALETTE_COLOR_TOOLTIP'] = 'Enable to change pen color of graphics window selected in the palette.';
Blockly.Msg['TI_PLOTLIB_SCATTER_TITLE'] = 'plot scatter %1 %2 xaxis %3 yaxis %4';
Blockly.Msg['TI_PLOTLIB_SCATTER_TOOLTIP'] = 'Plot scatter on graphics window of TI-83 calculator.';
Blockly.Msg['TI_PLOTLIB_LIN_REG_TITLE'] = 'plot linear regression line %1 (list of X) and %2 (list of Y) at position %3 and on line %4';
Blockly.Msg['TI_PLOTLIB_LIN_REG_TOOLTIP'] = 'Plots the linear regression line with the list of X-coordinates and the list of Y-coordinates on the graphing window of the TI-83 calculator.';
Blockly.Msg['TI_PLOTLIB_PLOT_TITLE'] = 'plot %1 %2 xaxis %3 yaxis %4';
Blockly.Msg['TI_PLOTLIB_PLOT_TOOLTIP'] = 'Plot graph on graphics window of TI-83 calculator.';
Blockly.Msg['TI_PLOTLIB_LINE_TITLE'] = 'draw %1 between A (%2,%3) and B (%4,%5)';
Blockly.Msg['TI_PLOTLIB_LINE'] = 'a line';
Blockly.Msg['TI_PLOTLIB_ARROW'] = 'an arrow';
Blockly.Msg['TI_PLOTLIB_LINE_TOOLTIP'] = 'Enable to draw line or an arrow between A and B points on graphics window of TI-83 calculator.';
Blockly.Msg['TI_PLOTLIB_PEN_TITLE'] = 'use a %1 pen type %2';
Blockly.Msg['TI_PLOTLIB_PEN_THIN'] = 'thin';
Blockly.Msg['TI_PLOTLIB_PEN_MEDIUM'] = 'medium';
Blockly.Msg['TI_PLOTLIB_PEN_THICK'] = 'thick';
Blockly.Msg['TI_PLOTLIB_PEN_SOLID'] = 'solid';
Blockly.Msg['TI_PLOTLIB_PEN_DOT'] = 'dot';
Blockly.Msg['TI_PLOTLIB_PEN_DASH'] = 'dash';
Blockly.Msg['TI_PLOTLIB_PEN_TOOLTIP'] = 'Enable to change pencil type of drawer on graphics window of TI-83 calculator.';
Blockly.Msg['TI_PLOTLIB_TEXT_AT_TITLE'] = 'write text %1 at line %2 position %3';
Blockly.Msg['TI_PLOTLIB_TEXT_AT_LEFT'] = 'left';
Blockly.Msg['TI_PLOTLIB_TEXT_AT_CENTER'] = 'center';
Blockly.Msg['TI_PLOTLIB_TEXT_AT_RIGHT'] = 'right';
Blockly.Msg['TI_PLOTLIB_TEXT_AT_TOOLTIP'] = 'Write text on graphics window of TI-83 calculator.';
// Robots - Rover
Blockly.Msg['TI_ROVER_RIGHT'] = 'right';
Blockly.Msg['TI_ROVER_LEFT'] = 'left';
Blockly.Msg['TI_ROVER_BY_RIGHT'] = Blockly.Msg['TI_ROVER_RIGHT'];
Blockly.Msg['TI_ROVER_BY_LEFT'] = Blockly.Msg['TI_ROVER_LEFT'];
Blockly.Msg['TI_ROVER_BOTH_SIDES'] = 'both sides';
Blockly.Msg['TI_ROVER_GO_FORWARD'] = 'forward';
Blockly.Msg['TI_ROVER_GO_REVERSE'] = 'backward';
Blockly.Msg['TI_ROVER_GO_TITLE'] = '[Rover] move %1 by %2 unit.s with speed %3 (m/s)';
Blockly.Msg['TI_ROVER_GO_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Enable to control car running (FORWARD/BACKWARD) and number of distance units of rover robot (1 unit = 10 cm). You can set the speed of Rover [0.14-0.23] in meters per second.';
Blockly.Msg['TI_ROVER_GO_TIME_TITLE'] = '[Rover] move %1 during %2 (s) with speed %3 (m/s)';
Blockly.Msg['TI_ROVER_GO_TIME_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Enable to control car running (FORWARD/BACKWARD) during specified time defined in seconds of rover robot. You can set the speed of Rover [0.14-0.23] in meters per second.';
Blockly.Msg['TI_ROVER_TURNTO_TITLE'] = '[Rover] turn to %1 angle %2 (°)';
Blockly.Msg['TI_ROVER_TURNTO_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Enable to turn to the right or to the left with rover robot. Set angle (in °).';
Blockly.Msg['TI_ROVER_RIGHT_BIS'] = Blockly.Msg['TI_ROVER_RIGHT'];
Blockly.Msg['TI_ROVER_CONTROLMOTOR_TITLE'] = '[Rover] control motor %1 direction %2 speed %3 duration %4 (s)';
Blockly.Msg['TI_ROVER_CONTROLMOTOR_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Enable to control right motor and left motor changing direction (↻ : FOWARD, ↺ : REVERSE), speed (from 0 to 255) or duration (in s) of rover robot.';
Blockly.Msg['TI_ROVER_MOVETOXY_TITLE'] = '[Rover] move to position x %1 y %2';
Blockly.Msg['TI_ROVER_MOVETOXY_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Enable to move rover robot at a specified position in cartesian way.';
Blockly.Msg['TI_ROVER_MOVETOPOLAR_TITLE'] = '[Rover] move at polar position r %1 θ %2';
Blockly.Msg['TI_ROVER_MOVETOPOLAR_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Enable to move rover robot at a specified position in polar way.';
Blockly.Msg['TI_ROVER_STAY_TITLE'] = '[Rover] stop run during %1 (s)';
Blockly.Msg['TI_ROVER_STAY_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Enable to stop rover robot run during specified duration in second.';
Blockly.Msg['TI_ROVER_STOP_TITLE'] = '[Rover] stop running';
Blockly.Msg['TI_ROVER_STOP_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Enable to stop rover robot running.';
Blockly.Msg['TI_ROVER_RESUME_TITLE'] = '[Rover] resume running';
Blockly.Msg['TI_ROVER_RESUME_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Enable to resume rover robot running.';
// Rover - Inputs
Blockly.Msg['TI_ROVER_ULTRASONICRANGER_TITLE'] = '[Rover - Capteur à ultrasons] distance (m)';
Blockly.Msg['TI_ROVER_ULTRASONICRANGER_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Returns distance value (in m) from any object to rover robot with ultrasonic range sensor.';
Blockly.Msg['TI_ROVER_COLORSENSOR_GETLEVEL_TITLE'] = '[Rover - Color sensor] level of %1 under robot';
Blockly.Msg['TI_ROVER_COLORSENSOR_GETLEVEL_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Returns the (gray/red/green/blue) level from color sensor placed under the rover robot.';
Blockly.Msg['TI_ROVER_COLOR_GRAY'] = 'gray';
Blockly.Msg['TI_ROVER_COLOR_RED'] = 'red';
Blockly.Msg['TI_ROVER_COLOR_GREEN'] = 'green';
Blockly.Msg['TI_ROVER_COLOR_BLUE'] = 'blue';
Blockly.Msg['TI_ROVER_COLORSENSOR_GETCOLOR_TITLE'] = '[Rover - Color sensor] color measurement';
Blockly.Msg['TI_ROVER_COLORSENSOR_GETCOLOR_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Returns the color measurement from color sensor placed under the rover robot as (1:red, 2:green, 3:blue, 4:cyan, 5:magenta, 6:yellow, 7:black, 8:white, 9:grey).';
Blockly.Msg['TI_ROVER_GYROSCOPE_GETANGULARSPEED_TITLE'] = '[Rover - Gyroscope] angular speed (rad/s)';
Blockly.Msg['TI_ROVER_GYROSCOPE_GETANGULARSPEED_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Returns the angular speed (in rad/s) of rover robot.';
Blockly.Msg['TI_ROVER_GYROSCOPE_GETANGLE_TITLE'] = '[Rover - Gyroscope] angular position (°)';
Blockly.Msg['TI_ROVER_GYROSCOPE_GETANGLE_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Returns the angular position (in °) of rover robot.';
// Rover - Outputs
Blockly.Msg['TI_ROVER_SETRGBLED_TITLE'] = '[Rover - RGB] set colors to R %1 G %2 B %3';
Blockly.Msg['TI_ROVER_SETRGBLED_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Block controlling the color of the rover robot RGB LED, give a value between 0 and 255 for Red, Green and Blue.';
Blockly.Msg['TI_ROVER_SETRGBLEDPALETTE_TITLE'] = '[Rover - RGB] set color to %1';
Blockly.Msg['TI_ROVER_SETRGBLEDPALETTE_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Block controlling the color of rover robot RGB LED, choose a colour in the given palette.';
Blockly.Msg['TI_ROVER_BLINKRGBLED_TITLE'] = '[Rover - RGB] blink led at frequency %1 (Hz) during %2 (s)';
Blockly.Msg['TI_ROVER_BLINKRGBLED_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Blink the rover robot RGB LED.';
Blockly.Msg['TI_ROVER_STOPRGBLED_TITLE'] = '[Rover - RGB] switch off LED';
Blockly.Msg['TI_ROVER_STOPRGBLED_TOOLTIP'] = IMG_MODULE_ROVER + Blockly.Tooltip.SEP + 'Switch off the RGB LED of rover robot.';
// Micro:bit - Commandes
Blockly.Msg['MICROBIT_TYPE_IS'] = 'is';
Blockly.Msg['MICROBIT_TYPE_WAS'] = 'was';
Blockly.Msg['MICROBIT_SLEEP_TITLE'] = '[micro:bit] wait %1 %2';
Blockly.Msg['MICROBIT_SLEEP_TOOLTIP'] = 'Pauses code execution. The micro:bit.sleep() function takes seconds as milliseconds.';
Blockly.Msg['MICROBIT_SLEEP_SECOND'] = Blockly.Msg['SECOND'];
Blockly.Msg['MICROBIT_SLEEP_MILLISECOND'] = Blockly.Msg['MILLISECOND'];
Blockly.Msg['MICROBIT_SLEEP_MICROSECOND'] = Blockly.Msg['MICROSECOND'];
Blockly.Msg['MICROBIT_WHILE_CONDITION_TITLE'] = '[micro:bit] repeat while %1';
Blockly.Msg['MICROBIT_WHILE_CONDITION_TOOLTIP'] = 'Repeat loop while condition is verified.';
Blockly.Msg['MICROBIT_ESCAPE_TITLE'] = '[micro:bit] execution stopped ?';
Blockly.Msg['MICROBIT_ESCAPE_TOOLTIP'] = 'Returns \'True\' if button \'annul\' was pressed.';
Blockly.Msg['MICROBIT_DISP_CLR_TITLE'] = '[micro:bit] clear text';
Blockly.Msg['MICROBIT_DISP_CLR_TOOLTIP'] = 'Enable to clear text from the TI-83 calculator screen.';
Blockly.Msg['MICROBIT_STORE_LIST_TITLE'] = '[micro:bit] store the list %1 with index %2';
Blockly.Msg['MICROBIT_STORE_LIST_TOOLTIP'] = 'Enable to store a maximum of 6 lists with index (\'1\'-\'6\').';
Blockly.Msg['MICROBIT_TEMPERATURE_TITLE'] = '[micro:bit] temperature in %1';
Blockly.Msg['MICROBIT_TEMPERATURE_TOOLTIP'] = 'Returns the temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K) of micro:bit processor.';
// Micro:bit - Screen 
Blockly.Msg['SHOW_STRING_TITLE'] = '[Screen] scroll %1';
Blockly.Msg['SHOW_NUMBER_TITLE'] = '[Screen] show %1';
Blockly.Msg['SHOW_LEDS_TITLE'] = '[Screen] show leds';
Blockly.Msg['SHOW_ICON_TITLE'] = '[Screen] show icon %1';
Blockly.Msg['SHOW_GAUGE_TITLE'] = '[Screen] show gauge of %1 Maximum %2';
Blockly.Msg['SHOW_GAUGE_TOOLTIP'] = 'Display the dipstick of a sensor (or number) on the micro-bit card screen by setting the maximum value corresponding to the filled dipstick.';
Blockly.Msg['SHOW_CLOCK_TITLE'] = '[Screen] show clock %1';
Blockly.Msg['SHOW_ARROW_TITLE'] = '[Screen] show arrow %1';
Blockly.Msg['SHOW_ARROW_TOOLTIP'] = 'Enable to display arrows of 8 directions (N,NE,E,SE,S...) on micro:bit screen.';
Blockly.Msg['SENSORS_GETLIGHT_TITLE'] = '[Screen] light level';
Blockly.Msg['SENSORS_GETLIGHT_TOOLTIP'] = 'Returns light level (from 0 to 255) with some of micro:bit screen LED.';
Blockly.Msg['CLEAR_TITLE'] = '[Screen] switch off the leds';
Blockly.Msg['SET_PIXEL_TITLE'] = '[Screen] control led x %1 y %2 to state %3';
Blockly.Msg['SET_PIXEL_TOOLTIP'] = 'Enable to control the state (ON/OFF) of each micro:bit screen LED.';
Blockly.Msg['SET_LIGHT_PIXEL_TITLE'] = '[Screen] control led x %1 y %2 light %3';
Blockly.Msg['SET_LIGHT_PIXEL_TOOLTIP'] = 'Enable to control the light (from 0 to 9) of each micro:bit screen LED.';
// Micro:bit - Music
Blockly.Msg['MICROBIT_MUSIC_PLAYMUSIC_TITLE'] = '[Music] play music %1';
Blockly.Msg['MICROBIT_MUSIC_PLAYMUSIC_TOOLTIP'] = 'Enable to play the choosen music on built-in micro:bit v2 speaker.';
Blockly.Msg['MICROBIT_MUSIC_PLAYSONG_TITLE'] = '[Music] play song %1';
Blockly.Msg['MICROBIT_MUSIC_PLAYSONG_TOOLTIP'] = 'Enable to play the choosen song on built-in micro:bit v2 speaker.';
Blockly.Msg['MICROBIT_MUSIC_PLAYNOTES_TITLE'] = '[Music] play notes';
Blockly.Msg['MICROBIT_MUSIC_PLAYNOTES_TOOLTIP'] = 'Enable to play notes on built-in micro:bit v2 speaker.';
Blockly.Msg['MICROBIT_MUSIC_NOTE_TITLE'] = 'note %1 at octave %2 with duration %3';
Blockly.Msg['MICROBIT_MUSIC_NOTE_TOOLTIP'] = 'Define a note with octave and duration.';
Blockly.Msg['NOTE_C'] = 'C';
Blockly.Msg['NOTE_C_SHARP'] = 'C#';
Blockly.Msg['NOTE_D'] = 'D';
Blockly.Msg['NOTE_D_SHARP'] = 'D#';
Blockly.Msg['NOTE_E'] = 'E';
Blockly.Msg['NOTE_F'] = 'F';
Blockly.Msg['NOTE_F_SHARP'] = 'F#';
Blockly.Msg['NOTE_G'] = 'G';
Blockly.Msg['NOTE_G_SHARP'] = 'G#';
Blockly.Msg['NOTE_A'] = 'A';
Blockly.Msg['NOTE_A_SHARP'] = 'A#';
Blockly.Msg['NOTE_B'] = 'B';
Blockly.Msg['MUSIC_SILENCE'] = 'Silence';
Blockly.Msg['MICROBIT_MUSIC_PLAYFREQUENCY_TITLE'] = '[Music] play frequency %1 during %2 (ms)';
Blockly.Msg['MICROBIT_MUSIC_PLAYFREQUENCY_TOOLTIP'] = 'Enable to play integer frequency on built-in micro:bit speaker.';
Blockly.Msg['MICROBIT_MUSIC_SETTEMPO_TITLE'] = '[Music] set ticks %1 and tempo %2';
Blockly.Msg['MICROBIT_MUSIC_SETTEMPO_TOOLTIP'] = 'Enable to set ticks music and beats per minute.';
Blockly.Msg['MICROBIT_MUSIC_SETVOLUME_TITLE'] = '[Music] set volume to %1';
Blockly.Msg['MICROBIT_MUSIC_SETVOLUME_TOOLTIP'] = 'Enable to change volume of built-in micro:bit v2 speaker (0-255).';
// Micro:bit - Audio
Blockly.Msg['MICROBIT_AUDIO_PLAY_TITLE'] = '[Audio] play song %1';
Blockly.Msg['MICROBIT_AUDIO_PLAY_TOOLTIP'] = 'Enable to play the choosen song on built-in micro:bit v2 speaker.';
Blockly.Msg['MICROBIT_AUDIO_STOP_TITLE'] = '[Audio] stop sound';
Blockly.Msg['MICROBIT_AUDIO_STOP_TOOLTIP'] = 'Enable to stop the sound from built-in micro:bit v2 speaker.';
// Micro:bit - Microphone
Blockly.Msg['IO_MICRO_LOUD'] = 'loud';
Blockly.Msg['IO_MICRO_QUIET'] = 'quiet';
Blockly.Msg['IO_MICRO_IS'] = Blockly.Msg['MICROBIT_TYPE_IS'];
Blockly.Msg['IO_MICRO_WAS'] = Blockly.Msg['MICROBIT_TYPE_WAS'];
Blockly.Msg['IO_MICRO_ONSOUNDDETECTED_TITLE'] = '[Micro] if %1 sound %2 detected then';
Blockly.Msg['IO_MICRO_ONSOUNDDETECTED_TOOLTIP'] = 'Execute instructions if sound condition (loud/quiet) is detected. \'was\' option: Execute instructions if a (loud/quiet) sound occured since the last call to \'was_sound()\'.';
Blockly.Msg['IO_MICRO_GETCURRENTSOUND_TITLE'] = '[Micro] sound condition';
Blockly.Msg['IO_MICRO_GETCURRENTSOUND_TOOLTIP'] = 'Returns the sound condition (loud/quiet).';
Blockly.Msg['IO_MICRO_SOUNDDETECTED_TITLE'] = '[Micro] %1 sound %2 detected';
Blockly.Msg['IO_MICRO_SOUNDDETECTED_TOOLTIP'] = 'Returns True if a (loud/quiet) sound occured since the last call to \'was_sound()\'.';
Blockly.Msg['IO_MICRO_GETSOUNDLEVEL_TITLE'] = '[Micro] sound level';
Blockly.Msg['IO_MICRO_GETSOUNDLEVEL_TOOLTIP'] = 'Enable du get sound level from 0 to 255.';
Blockly.Msg['IO_MICRO_SETSOUNDTHRESHOLD_TITLE'] = '[Micro] set %1 sound threshold to %2';
Blockly.Msg['IO_MICRO_SETSOUNDTHRESHOLD_TOOLTIP'] = 'Enable to set sound level threshold loud/quiet (0-255).';
Blockly.Msg['IO_MICRO_SOUNDCONDITION_TITLE'] = '[Micro] %1';
Blockly.Msg['IO_MICRO_SOUNDCONDITION_TOOLTIP'] = 'Enable to use (LOUD/QUIET) constants from microphone module in \'Logic\' category.';
// Micro:bit - Buttons
Blockly.Msg['IO_ONBUTTONPRESSED_TITLE'] = '[buttons] on button %1 %2 pressed then';
Blockly.Msg['IO_ONBUTTONPRESSED_TOOLTIP'] = 'Execute instructions if the choosen button (A or B) is pressed.';
Blockly.Msg['IO_ISPRESSED'] = Blockly.Msg['MICROBIT_TYPE_IS'];
Blockly.Msg['IO_WASPRESSED'] = Blockly.Msg['MICROBIT_TYPE_WAS'];
Blockly.Msg['IO_ISBUTTONPRESSED_TITLE'] = '[buttons] button %1 %2 pressed';
Blockly.Msg['IO_ISBUTTONPRESSED_TOOLTIP'] = 'Returns \'True\' if button A or B is pressed, else return \'False\'.';
Blockly.Msg['IO_BUTTONS_GET_PRESSES_TITLE'] = '[buttons] get button %1 presses';
Blockly.Msg['IO_BUTTONS_GET_PRESSES_TOOLTIP'] = 'Returns number of presses of button A or B';
Blockly.Msg['IO_IS_LOGO_TOUCHED_TITLE'] = '[buttons] logo is touched';
Blockly.Msg['IO_IS_LOGO_TOUCHED_TOOLTIP'] = 'Returns \'True\' if micro:bit logo (v2) is touched else return \'False\'.';
// Micro:bit - Sensors
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_BY_AXIS_TITLE'] = '[Accelerometer] acceleration (mg) along the %1 axis';
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_BY_AXIS_TOOLTIP'] = 'Returns the acceleration (in mg) along any axis with the internal micro:bit accelerometer.';
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_VALUES_TITLE'] = '[Accelerometer] accelerations (mg) along the axes';
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_VALUES_TOOLTIP'] = 'Returns the accelerations (in mg) according to the 3 axes in the form of a tuple (x, y, z) with the internal accelerometer of the micro:bit board.';
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_MAGNITUDE_TITLE'] = '[Accelerometer] magnitude (m.s-2)';
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_MAGNITUDE_TOOLTIP'] = 'Returns the magnitude (in m.s-2) with the internal micro:bit accelerometer.';
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_ROTATION_TITLE'] = '[Accelerometer} rotation as %1 (°)';
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_ROTATION_PITCH'] = 'pitch';
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_ROTATION_ROLL'] = 'roll';
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_ROTATION_TOOLTIP'] = 'Returns the rotation (from -180° to 180°) with the internal micro:bit accelerometer.';
Blockly.Msg['MICROBIT_COMPASS_HEADING_TITLE'] = '[Compass] heading (°)';
Blockly.Msg['MICROBIT_COMPASS_HEADING_TOOLTIP'] = 'Returns the compass heading, as an integer in the range from 0 to 360, representing the angle in degrees, clockwise, with north as 0°.';
Blockly.Msg['MICROBIT_COMPASS_GET_MAGNETIC_STRENGTH_BY_AXIS_TITLE'] = '[Compass] magnetic field strength %1 (nT)';
Blockly.Msg['MICROBIT_COMPASS_GET_MAGNETIC_STRENGTH_BY_AXIS_TOOLTIP'] = 'Returns the reading of the magnetic field strength on any axis (in nT), as a positive or negative integer, depending on the direction of the field.';
Blockly.Msg['MICROBIT_COMPASS_IS_CALIBRATED_TITLE'] = '[Compass] is calibrated';
Blockly.Msg['MICROBIT_COMPASS_IS_CALIBRATED_TOOLTIP'] = 'Returns \'True\' if the compass is calibrated, else returns \'False\'.';
Blockly.Msg['MICROBIT_COMPASS_GET_FIELD_STRENGTH_TITLE'] = '[Compass] magnetic field strength (nT)';
Blockly.Msg['MICROBIT_COMPASS_GET_FIELD_STRENGTH_TOOLTIP'] = 'Returns an integer indication of the magnitude of the magnetic field (in nT) around the device.';
Blockly.Msg['MICROBIT_COMPASS_CALIBRATE_TITLE'] = '[Compass] %1';
Blockly.Msg['MICROBIT_COMPASS_CALIBRATE_TOOLTIP'] = 'Starts the calibration process. An instructive message will be scrolled to the user after which they will need to rotate the device in order to draw a circle on the LED display. The 2nd option undoes the calibration, making the compass uncalibrated again.';
Blockly.Msg['MICROBIT_COMPASS_CALIBRATE'] = 'calibrate';
Blockly.Msg['MICROBIT_COMPASS_CLEAR_CALIBRATION'] = 'reset the calibration';
Blockly.Msg['MICROBIT_ACCELEROMETER_GESTURE_TYPE_UP'] = 'logo up';
Blockly.Msg['MICROBIT_ACCELEROMETER_GESTURE_TYPE_DOWN'] = 'logo down';
Blockly.Msg['MICROBIT_ACCELEROMETER_GESTURE_TYPE_LEFT'] = 'tilt left';
Blockly.Msg['MICROBIT_ACCELEROMETER_GESTURE_TYPE_RIGHT'] = 'tilt right';
Blockly.Msg['MICROBIT_ACCELEROMETER_GESTURE_TYPE_FACE_UP'] = 'screen up';
Blockly.Msg['MICROBIT_ACCELEROMETER_GESTURE_TYPE_FACE_DOWN'] = 'screen down';
Blockly.Msg['MICROBIT_ACCELEROMETER_GESTURE_TYPE_SHAKE'] = 'shake';
Blockly.Msg['MICROBIT_ACCELEROMETER_GESTURE_IS'] = Blockly.Msg['MICROBIT_TYPE_IS'];
Blockly.Msg['MICROBIT_ACCELEROMETER_GESTURE_WAS'] = Blockly.Msg['MICROBIT_TYPE_WAS'];
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_CURRENT_GESTURE_TITLE'] = '[Gesture] get current gesture';
Blockly.Msg['MICROBIT_ACCELEROMETER_GET_CURRENT_GESTURE_TOOLTIP'] = 'Returns current gesture of micro:bit board: \'up\', \'down\', \'left\', \'right\', \'face up\', \'face down\' ou \'shake\'.';
Blockly.Msg['MICROBIT_ACCELEROMETER_ON_GESTURE_TYPE_TITLE'] = '[Gesture] if gesture %2 %1 then';
Blockly.Msg['MICROBIT_ACCELEROMETER_ON_GESTURE_TYPE_TOOLTIP'] = 'Execute instructions if the selected gesture is or was performed with the micro:bit card.';
Blockly.Msg['MICROBIT_ACCELEROMETER_IS_GESTURE_TITLE'] = '[Gesture] gesture %1 %2';
Blockly.Msg['MICROBIT_ACCELEROMETER_IS_GESTURE_TOOLTIP'] = 'Returns \'True\' if the selected gesture is or was performed with the micro:bit card, otherwise returns \'False\'.';
// Micro:bit - Radio
Blockly.Msg['COMMUNICATION_RADIO_SENDSTRING_TITLE'] = '[Radio] send string %1';
Blockly.Msg['COMMUNICATION_RADIO_SENDSTRING_TOOLTIP'] = 'Enable to send string by micro:bit radio module.';
Blockly.Msg['COMMUNICATION_RADIO_SEND_TITLE'] = '[Radio] send number or list %1';
Blockly.Msg['COMMUNICATION_RADIO_SEND_TOOLTIP'] = 'Enable to send numbers or lists by radio module.';
Blockly.Msg['COMMUNICATION_RADIO_SENDVALUE_TITLE'] = '[Radio] send value %1 as %2';
Blockly.Msg['COMMUNICATION_RADIO_SENDVALUE_TOOLTIP'] = 'Enable to send data with \'name\' and its value by radio module.';
Blockly.Msg['COMMUNICATION_RADIO_ONSTRINGRECEIVED_TITLE'] = '[Radio] on data received in %1 then';
Blockly.Msg['COMMUNICATION_RADIO_ONSTRINGRECEIVED_TOOLTIP'] = 'Allows you to execute instructions on string received by radio in the \'stringData\' variable.';
Blockly.Msg['COMMUNICATION_RADIO_ONNUMBERRECEIVED_TITLE'] = '[Radio] on data received in %1 then';
Blockly.Msg['COMMUNICATION_RADIO_ONNUMBERRECEIVED_TOOLTIP'] = 'Allows you to execute instructions on number received by radio in the \'numberData\' variable.';
Blockly.Msg['COMMUNICATION_RADIO_ONVALUERECEIVED_TITLE'] = '[Radio] on data received in %1 %2 then';
Blockly.Msg['COMMUNICATION_RADIO_ONVALUERECEIVED_TOOLTIP'] = 'Allows you to execute instructions on name as string and value as number received by radio in the \'name\' and \'value\' variables.';
Blockly.Msg['COMMUNICATION_RADIO_CONFIG_TITLE'] = '[Radio] set Channel %1 Power %2 Data size %3 Group %4';
Blockly.Msg['COMMUNICATION_RADIO_CONFIG_TOOLTIP'] = 'Allows you to configure the frequence channel (from 0 to 83), data size (bytes), transmission power (from 0 to 7), and group (from 0 to 255).';
// Micro:bit - Pins
Blockly.Msg['IO_MB_DIGITALSIGNAL_TITLE'] = '%1';
Blockly.Msg['IO_MB_DIGITALSIGNAL_HIGH'] = 'HIGH (1)';
Blockly.Msg['IO_MB_DIGITALSIGNAL_LOW'] = 'LOW (0)';
Blockly.Msg['IO_MB_DIGITALSIGNAL_TOOLTIP'] = 'Returns boolean value (1 if HIGH or 0 if LOW).';
Blockly.Msg['IO_MB_READDIGITALPIN_TITLE'] = 'read digital pin %1';
Blockly.Msg['IO_MB_READDIGITALPIN_TOOLTIP'] = 'Enable to read the digital value of pins (0 or 1).';
Blockly.Msg['IO_MB_WRITEDIGITALPIN_TITLE'] = 'write on digital pin %1 state %2';
Blockly.Msg['IO_MB_WRITEDIGITALPIN_TOOLTIP'] = 'Enable to write the value (0 or 1) on digital pin.';
Blockly.Msg['IO_MB_READANALOGPIN_TITLE'] = 'read analog pin %1';
Blockly.Msg['IO_MB_READANALOGPIN_TOOLTIP'] = 'Enable to read the analog value of pins (0-1023).';
Blockly.Msg['IO_MB_WRITEANALOGPIN_TITLE'] = 'write on analog pin %1 value %2';
Blockly.Msg['IO_MB_WRITEANALOGPIN_TOOLTIP'] = 'Enable to write on analog pin the value (0-1023). This function does not really write analog value, it writes PWM signal. For example, writing 511 has 50% duty cycle, the average voltage is 1,65V.';
Blockly.Msg['IO_MB_SETPWM_TITLE'] = 'apply a signal of period %1 %2 on pin %3';
Blockly.Msg['IO_MB_SETPWM_TOOLTIP'] = 'Enable to apply a PWM signal on a pin';
// Micro:bit - Inputs
Blockly.Msg['SENSORS_SHT31_READDATA_TITLE'] = '[SHT31 Sensor] %1';
Blockly.Msg['SENSORS_SHT31_READDATA_TOOLTIP'] = IMG_MODULE_SHT31 + Blockly.Tooltip.SEP + 'Returns temperature in Celsius degree (°C), Fahrenheit (°F) or Kelvin (K), or air humidity (in %) from SHT31 sensor. Connect sensor on I2C port.';
Blockly.Msg['SENSORS_MPX5700AP_GETPRESSURE_TITLE'] = '[MPX5700AP Sensor] pressure (kPa) on pin %1';
Blockly.Msg['SENSORS_MPX5700AP_GETPRESSURE_TOOLTIP'] = IMG_MODULE_MPX5700AP + Blockly.Tooltip.SEP + 'Enable to read pressure of grove sensor with TI-83 calculator.';
Blockly.Msg['SENSORS_MPX5700AP_CALIBRATE_TITLE'] = '[MPX5700AP Sensor] calibrate pressure sensor m %1 b %2';
Blockly.Msg['SENSORS_MPX5700AP_CALIBRATE_TOOLTIP'] = IMG_MODULE_MPX5700AP + Blockly.Tooltip.SEP + 'Enable to calibrate pressure sensor grove with TI-83 calculator.';
Blockly.Msg['SENSORS_GETGROVEMOISTURE_TITLE'] = '[Moisture Sensor] moisture on pin %1';
Blockly.Msg['SENSORS_GETGROVEMOISTURE_TOOLTIP'] = IMG_MODULE_MOISTURE + Blockly.Tooltip.SEP + 'Returns moisture measurement (from 0 to 1023) from the grove moisture sensor on pins P0 through P4, or P10.';
Blockly.Msg['SENSORS_GETGROVETEMPERATURE_TITLE'] = '[Temperature Sensor] temperature in %1 on pin %2';
Blockly.Msg['SENSORS_GETGROVETEMPERATURE_TOOLTIP'] = IMG_MODULE_TEMPERATURE + Blockly.Tooltip.SEP + 'Returns grove temperature sensor value in Celius degree (°C), Fahrenheit (°F) or Kelvin (K) on analog pins P0 through P4, or P10.';
Blockly.Msg['SENSORS_GETGROVELIGHT_TITLE'] = '[Light Sensor] light level on pin %1';
Blockly.Msg['SENSORS_GETGROVELIGHT_TOOLTIP'] = IMG_MODULE_LIGHT + Blockly.Tooltip.SEP + 'Returns grove light sensor value (from 0 to 1023) on analog pins P0 through P4, or P10.';
Blockly.Msg['SENSORS_GETGROVEULTRASONIC_TITLE'] = '[Ultrasonic Sensor %1] get %2';
Blockly.Msg['SENSORS_GETGROVEULTRASONIC_TOOLTIP'] = IMG_MODULE_ULTRASONIC + Blockly.Tooltip.SEP + 'Returns distance measurement (in cm) or round-trip duration (in µs) from the ultrasonic ranger sensor on digital pins. Warning, if it\'s a grove sensor, TRIG and ECHO are both connected to SIG.';
Blockly.Msg['SENSORS_ULTRASONIC_DISTANCE'] = 'distance (cm)';
Blockly.Msg['SENSORS_ULTRASONIC_DURATION'] = 'round-trip duration (µs)';
Blockly.Msg['SENSORS_ULTRASONIC_1PIN'] = 'on pin';
Blockly.Msg['SENSORS_ULTRASONIC_2PINS'] = 'on pins ';
Blockly.Msg['MICROBIT_GROVE_READ_BME280_TITLE'] = '[BME280 Sensor] %1';
Blockly.Msg['MICROBIT_GROVE_READ_BME280_TOOLTIP'] = IMG_MODULE_BMP280 + Blockly.Tooltip.SEP + 'Returns the ambient temperature in Celius degree (°C), Fahrenheit (°F) or Kelvin (K), pressure (in hPa) and humidity (in %).';
Blockly.Msg['MICROBIT_GROVE_READ_BME280_TEMP'] = Blockly.Msg['SENSORS_TEMPERATURE'];
Blockly.Msg['MICROBIT_GROVE_READ_BME280_PRESS'] = Blockly.Msg['SENSORS_PRESSURE'];
Blockly.Msg['MICROBIT_GROVE_READ_BME280_HUM'] = Blockly.Msg['SENSORS_HUMIDITY'];
// Micro:bit - Outpus
Blockly.Msg['DISPLAY_SETGROVELED_TITLE'] = '[LED] control LED to state %1 on pin %2';
Blockly.Msg['DISPLAY_SETGROVELED_TOOLTIP'] = IMG_MODULE_LED + Blockly.Tooltip.SEP + 'Enable to switch on or switch off the LED socket kit Grove (0 or 1) on digitals pins.';
Blockly.Msg['ACTUATORS_MOTOR_SETPOWER_TITLE'] = '[Motor] set power to %1 on pin %2';
Blockly.Msg['ACTUATORS_MOTOR_SETPOWER_TOOLTIP'] = IMG_MODULE_MOTOR + Blockly.Tooltip.SEP + 'Enable to control DC motor power (from 0 to 1023) on digital pins. Warning, micro:bit has to be powered by external batterie in order to provide enough energy to DC motor.';
Blockly.Msg['ACTUATORS_GROVERELAY_CONTROL_TITLE'] = '[Relay module] control relay to state %1 on pin %2';
Blockly.Msg['ACTUATORS_GROVERELAY_CONTROL_TOOLTIP'] = IMG_MODULE_RELAY + Blockly.Tooltip.SEP + 'Enable to control state grove relay module (0 or 1) on digitals pins.';
Blockly.Msg['ACTUATORS_SERVO_SETANGLE_TITLE'] = '[Servomotor] set angle to %1 on pin %2';
Blockly.Msg['ACTUATORS_SERVO_SETANGLE_TOOLTIP'] = IMG_MODULE_SERVO + Blockly.Tooltip.SEP + 'Enable to control servo angle (from 0 to 180) on digital pins. Warning, micro:bit has to be powered by external batterie in order to provide enough energy to servomotor.';
// Micro:bit - Neopixel
Blockly.Msg['DISPLAY_NEOPIXEL_DEFINE_TITLE'] = '[Neopixel] define %1 LED on pin %2';
Blockly.Msg['DISPLAY_NEOPIXEL_DEFINE_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to define LED number of neopixel. This block have to be used in setup.';
Blockly.Msg['DISPLAY_NEOPIXEL_LEDCONTROL_TITLE'] = '[Neopixel] set LED %1 to R %2 G %3 B %4 on pin %5';
Blockly.Msg['DISPLAY_NEOPIXEL_LEDCONTROL_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control each LED color of neopixels as (R,G,B) from 0 to 255. Use P15 to set Maqueen neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_SETPALETTECOLOR_TITLE'] = '[Neopixel] set LED %1 to %2 on pin %3';
Blockly.Msg['DISPLAY_NEOPIXEL_SETPALETTECOLOR_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control each LED color of neopixel. Use P15 to set Maqueen neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDRGB_TITLE'] = '[Neopixel] set all LED to colour R %1 G %2 B %3 on pin %4';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDRGB_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control all LED of neopixel to the choosed colour value as (R,G,B) from 0 to 255. Use P15 to set Maqueen neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDCOLOR_TITLE'] = '[Neopixel] set all LED to colour %1 on pin %2';
Blockly.Msg['DISPLAY_NEOPIXEL_SETALLLEDCOLOR_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to control all LED of neopixel to the choosed colour value. Use P15 to set Maqueen neopixel.';
Blockly.Msg['DISPLAY_NEOPIXEL_RAINBOW_TITLE'] = '[Neopixel] set a rainbow on pin %1';
Blockly.Msg['DISPLAY_NEOPIXEL_RAINBOW_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to show a rainbow on neopixel module, set pin and the number of LED.';
Blockly.Msg['MICROBIT_NEOPIXEL_SWITCH_OFF_TITLE'] = '[Neopixel] turn off all LEDs on pin %1';
Blockly.Msg['MICROBIT_NEOPIXEL_SWITCH_OFF_TOOLTIP'] = IMG_MODULE_NEOPIXEL + Blockly.Tooltip.SEP + 'Enable to turn off all the LEDs of the neopixel module.';
// CE
Blockly.Msg['CE_BOX_DEFINE_BOX_TITLE'] = '[ce_box] show statistics box %1 data %2';
Blockly.Msg['CE_BOX_DEFINE_BOX_TOOLTIP'] = 'Displays a box on the calculator screen with statistical data from the list provided.';
Blockly.Msg['CE_BOX_TITLE_TITLE'] = '[ce_box] add title %1';
Blockly.Msg['CE_BOX_TITLE_TOOLTIP'] = 'Add title on graph of statistics.';
Blockly.Msg['CE_BOX_SHOW_TITLE'] = '[ce_box] show box';
Blockly.Msg['CE_BOX_SHOW_TOOLTIP'] = 'Show statistics box on TI-83 calculator screen.';
Blockly.Msg['CE_CHART_DATA_TITLE'] = 'label %1 value %2';
Blockly.Msg['CE_CHART_DEFINE_CHART_TITLE'] = '[ce_chart] define histogram %1 données %2';
Blockly.Msg['CE_CHART_DEFINE_CHART_TOOLTIP'] = 'Define histogram with data from the list provided.';
Blockly.Msg['CE_CHART_TITLE_TITLE'] = '[ce_chart] add title %1';
Blockly.Msg['CE_CHART_TITLE_TOOLTIP'] = 'Add title on histogram.';
Blockly.Msg['CE_CHART_FREQUENCIES_TITLE'] = '[ce_chart] apply frequencies %1';
Blockly.Msg['CE_CHART_FREQUENCIES_TOOLTIP'] = 'Apply frequencies for histogram.';
Blockly.Msg['CE_CHART_SHOW_TITLE'] = '[ce_chart] show histogram';
Blockly.Msg['CE_CHART_SHOW_TOOLTIP'] = 'Show histogram on TI-83 calculator screen.';
Blockly.Msg['CE_QUIVR_ADD_LINE_PORTION_TITLE'] = '[ce_quivr] add line portion between A (%1,%2) and B (%3,%4) color %5';
Blockly.Msg['CE_QUIVR_ADD_LINE_PORTION_TOOLTIP'] = 'Add portion of line between 2 points. Example: A (t, y(t)) and B (t+dt, y(t+dt)). This block should be used with ti_plotlib blocks.';
Blockly.Msg['CE_QUIVR_ADD_VECTOR_TITLE'] = '[ce_quivr] add vector at point (%1,%2) dx %3 dy %4 color %5';
Blockly.Msg['CE_QUIVR_ADD_VECTOR_TOOLTIP'] = 'Add a vector to the defined point. dx and dy are respectively the lengths of the vector along the x axis and the y axis. The \'size\' option at the end of the block allows to reduce or increase the size of the vector by a certain percentage. This block should be used with ti_plotlib blocks.';
Blockly.Msg['CE_QUIVR_ADD_VECTOR_SIZE'] = 'size';
// Turtle - Move
Blockly.Msg['TURTLE_MOVE_TITLE'] = 'move %1 by %2';
Blockly.Msg['TURTLE_MOVE_FORWARD'] = 'forward';
Blockly.Msg['TURTLE_MOVE_BACKWARD'] = 'backward';
Blockly.Msg['TURTLE_MOVE_TOOLTIP'] = 'Move by specifying the direction and the distance.';
Blockly.Msg['TURTLE_TURN_TITLE'] = 'turn %1 by %2°';
Blockly.Msg['TURTLE_TURN_RIGHT'] = 'right ↻';
Blockly.Msg['TURTLE_TURN_LEFT'] = 'left ↺';
Blockly.Msg['TURTLE_TURN_TOOLTIP'] = 'Turn by specifying the value of the angle (in °).';
Blockly.Msg['TURTLE_GOTO_TITLE'] = 'go to position x %1 y %2';
Blockly.Msg['TURTLE_GOTO_TOOLTIP'] = 'Go to specified absciss and ordinate.';
Blockly.Msg['TURTLE_DONE_TITLE'] = 'display drawing';
Blockly.Msg['TURTLE_DONE_TOOLTIP'] = 'Enable to keep drawing on TI screen at the end of program.';
// Turtle - Draw
Blockly.Msg['TURTLE_FILLCOLOR_TITLE'] = 'define fill color to R %1 G %2 B %3';
Blockly.Msg['TURTLE_FILLCOLOR_TOOLTIP'] = 'Define the filling color by R, G and B (from 0 to 255).';
Blockly.Msg['TURTLE_FILLCOLOR_PALETTE_TITLE'] = 'define fill color to %1';
Blockly.Msg['TURTLE_FILLCOLOR_PALETTE_TOOLTIP'] = 'Define the filling color by using color in palette.';
Blockly.Msg['TURTLE_SET_FILL_TITLE'] = '%1 the color fill path';
Blockly.Msg['TURTLE_SET_FILL_TOOLTIP'] = 'Lets start or end a path to define the shape where we will fill with color.';
Blockly.Msg['TURTLE_SET_FILL_BEGIN'] = 'begin';
Blockly.Msg['TURTLE_SET_FILL_END'] = 'ends';
Blockly.Msg['TURTLE_DOT_TITLE'] = 'draw disk with diameter %1';
Blockly.Msg['TURTLE_DOT_TOOLTIP'] = 'Enable to draw disk with specified diameter (0-300).';
Blockly.Msg['TURTLE_WRITE_TITLE'] = 'write text %1';
Blockly.Msg['TURTLE_WRITE_TOOLTIP'] = 'Enable to add text where is the turtle.';
// Turtle - Pen
Blockly.Msg['TURTLE_CONTROL_PEN_TITLE'] = '%1 the pencil';
Blockly.Msg['TURTLE_CONTROL_PEN_TOOLTIP'] = 'Enable or disable pencil drawing.';
Blockly.Msg['TURTLE_CONTROL_PEN_UP'] = 'lift';
Blockly.Msg['TURTLE_CONTROL_PEN_DOWN'] = 'activate';
Blockly.Msg['TURTLE_PENCOLOR_TITLE'] = 'define pencil color to R %1 G %2 B %3';
Blockly.Msg['TURTLE_PENCOLOR_TOOLTIP'] = 'Define the pencil color by R, G and B (from 0 to 255).';
Blockly.Msg['TURTLE_PENCOLOR_PALETTE_TITLE'] = 'define pencil color to %1';
Blockly.Msg['TURTLE_PENCOLOR_PALETTE_TOOLTIP'] = 'Define the pencil color by using color in palette.';
Blockly.Msg['TURTLE_PENSIZE_TITLE'] = 'define the pencil width to %1';
Blockly.Msg['TURTLE_PENSIZE_TOOLTIP'] = 'Define the pencil width (1-4).';
// TUrtle - Settings
Blockly.Msg['TURTLE_CLEAR_TITLE'] = 'clear drawing';
Blockly.Msg['TURTLE_CLEAR_TOOLTIP'] = 'Allows you to clean the drawing on the screen of the TI-83 calculator.';
Blockly.Msg['TURTLE_CONTROL_TURTLE_TITLE'] = '%1 turtle';
Blockly.Msg['TURTLE_CONTROl_TURTLE_TOOLTIP'] = 'Enable to show/hide turtle.';
Blockly.Msg['TURTLE_CONTROL_TURTLE_HIDE'] = 'masquer';
Blockly.Msg['TURTLE_CONTROL_TURTLE_SHOW'] = 'afficher';
Blockly.Msg['TURTLE_HIDEGRID_TITLE'] = 'hide grid';
Blockly.Msg['TURTLE_HIDEGRID_TOOLTIP'] = 'Enable to hide grid.';
Blockly.Msg['TURTLE_SPEED_TITLE'] = 'change turtle speed to %1';
Blockly.Msg['TURTLE_SPEED_TOOLTIP'] = 'Allows you to change the speed of the turtle, so the speed of drawing on the screen (0-10).';
// Turtle - State
Blockly.Msg['TURTLE_HOME_TITLE'] = 'replace turtle at the center of drawing';
Blockly.Msg['TURTLE_HOME_TOOLTIP'] = 'Enable to replace turtle at the center of drawing.';
Blockly.Msg['TURTLE_SET_HEADING_TITLE'] = 'set turtle heading %1 (°)';
Blockly.Msg['TURTLE_SET_HEADING_TOOLTIP'] = 'Enable to set turtle heading (in °) knowing that the direction to the right corresponds to 0°. Positive angles correspond to a clockwise angle. Negative angles are counterclockwise.';
Blockly.Msg['TURTLE_GET_COORDINATES_TITLE'] = 'get %1 coordinate';
Blockly.Msg['TURTLE_GET_COORDINATES_TOOLTIP'] = 'Returns x or y coordinates (in pixels) knowing that the shape of canvas are x [-155;155] and y [-105;105].';
Blockly.Msg['TURTLE_GET_COORDINATES_XCOR'] = 'x';
Blockly.Msg['TURTLE_GET_COORDINATES_YCOR'] = 'y';
Blockly.Msg['TURTLE_HEADING_TITLE'] = 'turtle heading (°)';
Blockly.Msg['TURTLE_HEADING_TOOLTIP'] = 'Returns turtle heading (in °) knowing that the direction to the right corresponds to 0°.';
// Tello
Blockly.Msg['TELLO_LEFT'] = 'left';
Blockly.Msg['TELLO_RIGHT'] = 'right';
Blockly.Msg['TELLO_TAKEOFF_TITLE'] = '[tello] take off';
Blockly.Msg['TELLO_TAKEOFF_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows the Tello drone to take off. Please note: you need a Grove Wifi UART v2 module to control the drone with a micro:bit v2.';
Blockly.Msg['TELLO_LAND_TITLE'] = '[tello] land';
Blockly.Msg['TELLO_LAND_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows you to land the Tello drone. Please note: you need a Grove Wifi UART v2 module to control the drone with a micro:bit v2.';
Blockly.Msg['TELLO_FLY_TITLE'] = '[tello] move %1  %2 (cm)';
Blockly.Msg['TELLO_FLY_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows you to move forward or backward (20-500 cm) with the Tello drone. Attention: you need a Grove Wifi UART v2 module to control the drone with a micro:bit v2.';
Blockly.Msg['TELLO_FLY_FORWARD'] = 'forward';
Blockly.Msg['TELLO_FLY_BACKWARD'] = 'backward';
Blockly.Msg['TELLO_TURN_TITLE'] = '[tello] turn %1 angle %2 (°)';
Blockly.Msg['TELLO_TURN_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'This allows you to turn left or right by an angle (0-360°) with the Tello drone. Please note: you need a Grove Wifi UART v2 module to control the drone with a micro:bit v2.';
Blockly.Msg['TELLO_FLY_IN_HEIGHT_TITLE'] = '[tello] fly %1 height %2 (cm)';
Blockly.Msg['TELLO_FLY_IN_HEIGHT_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows you to fly up or down (20-500 cm) with the Tello drone. Please note: you need a Grove Wifi UART v2 module to control the drone with a micro:bit v2.';
Blockly.Msg['TELLO_FLY_UP'] = 'upwards';
Blockly.Msg['TELLO_FLY_DOWN'] = 'backwards';
Blockly.Msg['TELLO_FLY_DIRECTION_TITLE'] = '[tello] fly %1 distance %2 (cm)';
Blockly.Msg['TELLO_FLY_DIRECTION_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Allows you to fly to the right or left (20-500 cm) with the Tello drone. Please note: you need a Grove Wifi UART v2 module to control the drone with a micro:bit v2.';
Blockly.Msg['TELLO_GET_ALTITUDE_TITLE'] = '[tello] altitude (m)';
Blockly.Msg['TELLO_GET_ALTITUDE_TOOLTIP'] = IMG_DRONE_TELLO + Blockly.Tooltip.SEP + 'Returns the altitude (in m) at which the Tello drone is located. Please note: you need a Grove Wifi UART v2 module to control the drone with a micro:bit v2.';
// TI - Draw
Blockly.Msg['TI_DRAW_SET_WINDOW_TITLE'] = 'set drawing window to %1 (width) and %2 (height)';
Blockly.Msg['TI_DRAW_SET_WINDOW_TOOLTIP'] = 'Set the drawing window size to (width, height).';
Blockly.Msg['TI_DRAW_GET_WINDOW_TITLE'] = 'get drawing window size';
Blockly.Msg['TI_DRAW_GET_WINDOW_TOOLTIP'] = 'Return the current drawing window size.';
Blockly.Msg['TI_DRAW_DRAW_LINE_TITLE'] = 'draw a line from %1 (x1), %2 (y1) to %3 (x2), %4 (y2)';
Blockly.Msg['TI_DRAW_DRAW_LINE_TOOLTIP'] = 'Draw a line between the points (x1, y1) and (x2, y2).';
Blockly.Msg['TI_DRAW_DRAW_CIRCLE_TITLE'] = 'draw a circle of center %1 (x), %2 (y) and radius %3 (r)';
Blockly.Msg['TI_DRAW_DRAW_CIRCLE_TOOLTIP'] = 'Draw a circle of center (x, y) and radius r.';
Blockly.Msg['TI_DRAW_FILL_CIRCLE_TITLE'] = 'draw a filled circle of center %1 (x), %2 (y) and radius %3 (r)';
Blockly.Msg['TI_DRAW_FILL_CIRCLE_TOOLTIP'] = 'Draw a filled circle of center (x, y) and radius r.';
Blockly.Msg['TI_DRAW_DRAW_RECT_TITLE'] = 'draw a rectangle of upper left corner %1 (x), %2 (y), width %3 (w) and height %4 (h)';
Blockly.Msg['TI_DRAW_DRAW_RECT_TOOLTIP'] = 'Draw a rectangle of upper left corner (x, y), width w and height h.';
Blockly.Msg['TI_DRAW_FILL_RECT_TITLE'] = 'draw a filled rectangle of upper left corner %1 (x), %2 (y), width %3 (w) and height %4 (h)';
Blockly.Msg['TI_DRAW_FILL_RECT_TOOLTIP'] = 'Draw a filled rectangle of upper left corner (x, y), width w and height h.';
Blockly.Msg['TI_DRAW_DRAW_TEXT_TITLE'] = 'write text at position %1(x) and %2(y) with %3';
Blockly.Msg['TI_DRAW_DRAW_TEXT_TOOLTIP'] = 'Write text at position (x, y).';
Blockly.Msg['TI_DRAW_DRAW_POLY_TITLE'] = 'draw a polygon with X list %1 and Y list %2';
Blockly.Msg['TI_DRAW_DRAW_POLY_TOOLTIP'] = 'Draw a polygon from two lists of X and Y coordinates.';
Blockly.Msg['TI_DRAW_FILL_POLY_TITLE'] = 'draw a filled polygon with X list %1 and Y list %2';
Blockly.Msg['TI_DRAW_FILL_POLY_TOOLTIP'] = 'Draw a filled polygon from two lists of X and Y coordinates.';
Blockly.Msg['TI_DRAW_SET_COLOR_TITLE'] = 'set drawing color to %1 (red), %2 (green), %3 (blue)';
Blockly.Msg['TI_DRAW_SET_COLOR_TOOLTIP'] = 'Set the drawing color to (red, green, blue).';
Blockly.Msg['TI_DRAW_SET_PEN_TITLE'] = 'set pen size to %1 and style to %2';
Blockly.Msg['TI_DRAW_SET_PEN_TOOLTIP'] = 'Set the pen size (small, medium, large) and style (solid, dash, dot).';
Blockly.Msg['TI_DRAW_SET_PEN_STYLE_SOLID'] = 'solid';
Blockly.Msg['TI_DRAW_SET_PEN_STYLE_DASH'] = 'dash';
Blockly.Msg['TI_DRAW_SET_PEN_STYLE_DOT'] = 'dot';
Blockly.Msg['TI_DRAW_SET_PEN_THICKNESS_SMALL'] = 'small';
Blockly.Msg['TI_DRAW_SET_PEN_THICKNESS_MEDIUM'] = 'medium';
Blockly.Msg['TI_DRAW_SET_PEN_THICKNESS_THICK'] = 'large';
Blockly.Msg['TI_DRAW_PLOT_XY_TITLE'] = 'plot graph with x %1 and y %2 using shape %3';
Blockly.Msg['TI_DRAW_PLOT_XY_TOOLTIP'] = 'Plot the graph using x and y with specified shape.';
Blockly.Msg['TI_DRAW_SHOW_TITLE'] = 'show drawing';
Blockly.Msg['TI_DRAW_SHOW_TOOLTIP'] = 'Show the drawing on the screen. Click \'annul\' to erase the drawing.';