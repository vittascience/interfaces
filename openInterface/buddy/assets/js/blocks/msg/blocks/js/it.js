/**
 * @fileoverview English messages for Buddy. (EN)
 */

'use strict';

Blockly.Msg['LOCK'] = '[ðŸ”’] Blocking function : Put the rest of the program while the action ends. [ðŸ”“] Non -blocking function: does not block the execution of the program during its progress.';

Blockly.Msg['ACTUATORS_BUDDY_SAY_TITLE'] = '[Head] make a %1 gesture of %2 degrees at %3 speed %4';
Blockly.Msg['ACTUATORS_BUDDY_SAY_YES'] = 'yes';
Blockly.Msg['ACTUATORS_BUDDY_SAY_NO'] = 'no';
Blockly.Msg['ACTUATORS_BUDDY_SAY_TOOLTIP'] = 'Move the Buddy head around the \'yes\'/\'no\' axis. The speed is in Â°/s and the angle in Â°. For the \'no\' axis, the speed is between -140 and 140 and the angle between -90 and 90. For the \'yes\' axis, the velocity is between -49.2 and 49.2 and the angle between -35 and 45.';
Blockly.Msg['ACTUATORS_BUDDY_SAY_STRAIGHT_TITLE'] = '[TÃªte] make a %1 gesture %2 %3';
Blockly.Msg['ACTUATORS_BUDDY_SAY_STRAIGHT_TOOLTIP'] = 'Move the head of the Buddy around the \'yes\'/\'no\' axis indefinitely.The speed is in Â°/s.For the \'no\' axis, the speed is between -140 and 140. For the \'yes\' axis, the speed is between -49.2 and 49.2.';
Blockly.Msg['ACTUATORS_STOP_MOVE_TITLE'] = '[Head] stop the %1 engine';
Blockly.Msg['ACTUATORS_STOP_YES_MOVE'] = 'yes';
Blockly.Msg['ACTUATORS_STOP_NO_MOVE'] = 'no';
Blockly.Msg['ACTUATORS_STOP_MOVE_TOOLTIP'] = 'Stop the \'yes\'/\'no\' axis motors of the Buddy.';
Blockly.Msg['ACTUATORS_GET_POSITION_TITLE'] = '[Head] retrieve the position along the axis %1';
Blockly.Msg['ACTUATORS_GET_POSITION_YES'] = 'yes';
Blockly.Msg['ACTUATORS_GET_POSITION_NO'] = 'no';
Blockly.Msg['ACTUATORS_GET_POSITION_TOOLTIP'] = 'Returns the position of the Buddy head along the \'yes\'/\'no\' axis. For the \'no\' axis, the position is between -90 and 90. For the \'yes\' axis, the position is between -35 and 45.';
Blockly.Msg['ACTUATORS_ROTATE_BUDDY_TITLE'] = '[Wheels] turn at a speed of %1 Â°/s %2';
Blockly.Msg['ACTUATORS_ROTATE_BUDDY_TOOLTIP'] = 'Run Buddy at a given angle and speed.The speed is between -360 Â°/s and +360 Â°/s, and the angle between -360 Â° and +360 Â°';
Blockly.Msg['ACTUATORS_ROTATE_BUDDY_WITH_ANGLE_TITLE'] = '[Wheels] turn about %1 Â° at a speed of %2 Â°/s %3';
Blockly.Msg['ACTUATORS_ROTATE_BUDDY_WITH_ANGLE_TOOLTIP'] = 'Run Buddy at a given angle and speed.The speed is between -360 Â°/s and +360 Â°/s, and the angle between -360 Â° and +360 Â°';
Blockly.Msg['ACTUATORS_MOVE_BUDDY_TITLE'] = '[Wheels] move Buddy at %1 speed %2';
Blockly.Msg['ACTUATORS_MOVE_BUDDY_TOOLTIP'] = 'Wheel speed is in m/s, (+): Forward, (-): Reverse, between -0.7m/s and 0.7m/s, distance in meters.';
Blockly.Msg['ACTUATORS_MOVE_BUDDY_WITH_DISTANCE_TITLE'] = '[Wheels] move %1 cm at a speed of %2 m/s %3';
Blockly.Msg['ACTUATORS_MOVE_BUDDY_WITH_DISTANCE_TOOLTIP'] = 'The speed of the wheels is in m/s, (+): move forward, (-): back down, between â€“0.7m/s and 0.7m/s, distance in centimeters.';
Blockly.Msg['ACTUATORS_EMERGENCY_STOP_MOTORS_TITLE'] = '[Wheels] stop the motors';
Blockly.Msg['ACTUATORS_EMERGENCY_STOP_MOTORS_TOOLTIP'] = 'Emergency stop of the Buddy motors.';
Blockly.Msg['DISPLAY_LED_RIGHT'] = 'right shoulder';
Blockly.Msg['DISPLAY_LED_LEFT'] = 'left shoulder';
Blockly.Msg['DISPLAY_LED_HEART'] = 'heart';
Blockly.Msg['DISPLAY_BLINK_LED_TITLE'] = '[LED] blink the %1 led with a %2 color for a period of %3 %4';
Blockly.Msg['DISPLAY_BLINK_LED_TOOLTIP'] = 'Flashes a led of the Buddy. The available leds are the right shoulder, the left shoulder and the heart.';
Blockly.Msg['DISPLAY_BLINK_ALL_LED_TITLE'] = '[LED] blink LEDs in %1 over a period of %2 %3';
Blockly.Msg['DISPLAY_BLINK_ALL_LED_TOOLTIP'] = 'Blink all LEDs from the Buddy. Leds available: right shoulder, left shoulder, heart.';
Blockly.Msg['DISPLAY_UPDATE_ALL_LED_TITLE'] = '[LED] turn on all LEDs %1 %2';
Blockly.Msg['DISPLAY_UPDATE_ALL_LED_TOOLTIP'] = 'Continuously lights all the LEDs with the color you have chosen.';
Blockly.Msg['DISPLAY_FADE_ALL_LED_TITLE'] = '[LED] fade all LEDs %1 period %2 %3';
Blockly.Msg['DISPLAY_FADE_ALL_LED_TOOLTIP'] = 'Gradually lights all LEDs periodically with the color and the period chosen.';
Blockly.Msg['DISPLAY_UPDATE_LED_COLOR_TITLE'] = '[LED] turn on %1 in %2 %3';
Blockly.Msg['DISPLAY_UPDATE_LED_COLOR_TOOLTIP'] = 'Continuous lights the selected LED with the chosen color';
Blockly.Msg['DISPLAY_UPDATE_ALL_LED_WITH_PATTERN_TITLE'] = '[LED] %1 in %2 over a period %3 with %4 steps %5';
Blockly.Msg['DISPLAY_UPDATE_ALL_LED_WITH_PATTERN_TOOLTIP'] = 'Light all the LEDs with the color and the chosen pattern.';
Blockly.Msg['DISPLAY_PATTERN_1'] = 'flash all LEDs (off then on)';
Blockly.Msg['DISPLAY_PATTERN_2'] = 'flash all LEDs (on then off)';
Blockly.Msg['DISPLAY_PATTERN_3'] = 'turn off all LEDs';
Blockly.Msg['DISPLAY_PATTERN_4'] = 'turn on all LEDs';
Blockly.Msg['DISPLAY_STOP_ALL_LED_TITLE'] = '[LED] turn off all the LEDs %1';
Blockly.Msg['DISPLAY_STOP_ALL_LED_TOOLTIP'] = 'Turn off all the LEDs';
Blockly.Msg['DISPLAY_STOP_LED_TITLE'] = '[LED] turn off %1 %2';
Blockly.Msg['DISPLAY_STOP_LED_TOOLTIP'] = 'Extinguishes the selected LED.';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_TITLE'] = '[Face] Change facial expression to %1 %2';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_SPEED'] = 'speed';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_TOOLTIP'] = 'Give the Buddy different facial expressions.';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_NEUTRAL'] = 'neutral';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_GRUMPY'] = 'grumpy';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_HAPPY'] = 'happy';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_ANGRY'] = 'angry';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_LISTENING'] = 'listening';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_LOVE'] = 'love';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_SAD'] = 'sad';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_SCARED'] = 'scared';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_SICK'] = 'sick';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_SURPRISED'] = 'surprised';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_THINKING'] = 'pensive';
Blockly.Msg['DISPLAY_SET_FACIAL_EXPRESSION_TIRED'] = 'tired';
Blockly.Msg['DISPLAY_SET_MOOD_TITLE'] = '[Face] Change facial expression %1 (with LED animation) %2';
Blockly.Msg['DISPLAY_SET_MOOD_SPEED'] = 'speed';
Blockly.Msg['DISPLAY_SET_MOOD_TOOLTIP'] = 'Give the buddy different facial expressions.';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_TITLE'] = '[Face] play a gimmick %1 %2';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_SPEED'] = 'speed';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_TOOLTIP'] = 'Play different gimmicks';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_DOUBTFUL'] = 'doubtful';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_AWAKE'] = 'awake';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_BLINK_EYES'] = 'blink';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_BLINK_LEFT_EYE'] = 'blink left eye';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_BLINK_RIGHT_EYE'] = 'blink right eye';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_CLOSE_EYES'] = 'close your eyes';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_CLOSE_LEFT_EYE'] = 'close the left eye';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_CLOSE_RIGHT_EYE'] = 'close right eye';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_FALL_ASLEEP'] = 'asleep';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_GROWLING'] = 'grunting';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_OPEN_EYES'] = 'open your eyes';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_OPEN_LEFT_EYE'] = 'open the left eye';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_OPEN_RIGHT_EYE'] = 'open right eye';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_SMILE'] = 'smile';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_SURPRISED'] = 'surprised';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_SUSPICIOUS'] = 'suspicious';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_TEASE'] = 'teasing';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_WHAT'] = 'embarrassed';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_WHISTLE'] = 'whistle';
Blockly.Msg['DISPLAY_PLAY_FACIAL_EVENT_YAWN'] = 'yawn';
Blockly.Msg['DISPLAY_SET_LABIAL_EXPRESSION_TITLE'] = '[Face] change the expression of the mouth %1';
Blockly.Msg['DISPLAY_SET_LABIAL_EXPRESSION_TOOLTIP'] = 'Change Buddy\'s mouth expression.';
Blockly.Msg['DISPLAY_SET_LABIAL_EXPRESSION_SPEAK_ANGRY'] = 'angry';
Blockly.Msg['DISPLAY_SET_LABIAL_EXPRESSION_NO_FACE'] = 'no';
Blockly.Msg['DISPLAY_SET_LABIAL_EXPRESSION_SPEAK_HAPPY'] = 'happy';
Blockly.Msg['DISPLAY_SET_LABIAL_EXPRESSION_SPEAK_NEUTRAL'] = 'neutral';
Blockly.Msg['DISPLAY_SET_FACE_POSIVITY_TITLE'] = '[Face] Change positivity %1';
Blockly.Msg['DISPLAY_SET_FACE_POSIVITY_TOOLTIP'] = 'Changes the level of face positivity.Positivity: can take a value from 0.0 to 1.0 (0% to 100%).';
Blockly.Msg['DISPLAY_SET_FACE_ENERGY_TITLE'] = '[Face] Change energy %1';
Blockly.Msg['DISPLAY_SET_FACE_ENERGY_TOOLTIP'] = 'Changes the energy level of the facial.Energy: can take value 0.0 to 1.0 (0% to 100%).';
Blockly.Msg['DISPLAY_PLAY_FACIAL_RELATIVE_EVENT_TITLE'] = '[Face] play facial animation at a speed %1';
Blockly.Msg['DISPLAY_PLAY_FACIAL_RELATIVE_EVENT_TOOLTIP'] = 'Plays the animation of the face in relation to the current expression.';
Blockly.Msg['DISPLAY_LOOK_AT_XY_TITLE'] = '[Face] look at (%1,%2) %3';
Blockly.Msg['DISPLAY_LOOK_AT_XY_TOOLTIP'] = 'Make the eyes look in one direction.';
Blockly.Msg['DISPLAY_LOOK_AT_SMOOTH'] = 'smooth';
Blockly.Msg['DISPLAY_LOOK_AT_INSTANT'] = 'instantaneous';
Blockly.Msg['DISPLAY_LOOK_AT_TITLE'] = '[Face] look at %1 %2';
Blockly.Msg['DISPLAY_LOOK_AT_TOOLTIP'] = 'Make the eyes look in one direction.';
Blockly.Msg['DISPLAY_LOOK_AT_CENTER'] = 'In the center';
Blockly.Msg['DISPLAY_LOOK_AT_TOP'] = 'at the top';
Blockly.Msg['DISPLAY_LOOK_AT_LEFT'] = 'to the left';
Blockly.Msg['DISPLAY_LOOK_AT_RIGHT'] = 'to the right';
Blockly.Msg['DISPLAY_LOOK_AT_BOTTOM'] = 'downstairs';
Blockly.Msg['DISPLAY_LOOK_AT_TOP_LEFT'] = 'on the top corner left';
Blockly.Msg['DISPLAY_LOOK_AT_TOP_RIGHT'] = 'top right';
Blockly.Msg['DISPLAY_LOOK_AT_BOTTOM_RIGHT'] = 'at the bottom right';
Blockly.Msg['DISPLAY_LOOK_AT_BOTTOM_LEFT'] = 'at the bottom left';
Blockly.Msg['SENSORS_ISDETECTED'] = 'is';
Blockly.Msg['SENSORS_ISNTDETECTED'] = 'is not';
Blockly.Msg['SENSORS_US_DETECT_OBSTACLE_TITLE'] = '[Ultrasound] if an obstacle %1 within %2 cm on the %3 then';
Blockly.Msg['SENSORS_US_DETECT_OBSTACLE_TOOLTIP'] = 'Measures the distance (in mm) on the left or the right of the buddy is verified if an obstacle is less than a certain distance.';
Blockly.Msg['SENSORS_GET_DISTANCE_TITLE'] = '[Ultrasound] measure distance %1';
Blockly.Msg['SENSORS_GET_DISTANCE_LEFT'] = 'left';
Blockly.Msg['SENSORS_GET_DISTANCE_RIGHT'] = 'right';
Blockly.Msg['SENSORS_GET_DISTANCE_TOOLTIP'] = 'Measure the distance (in mm) to the left or right of the Buddy.';
Blockly.Msg['SENSORS_TOF_DETECT_OBSTACLE_TITLE'] = '[Infrared ToF] if an obstacle %1 is within %2 cm on the %3 then';
Blockly.Msg['SENSORS_TOF_DETECT_OBSTACLE_TOOLTIP'] = 'Measures the distance (in mm) on the left or right of the Buddy thanks to the Buddy infrared sensors and checks if an obstacle is less than a certain distance.';
Blockly.Msg['SENSORS_GET_LIGHT_TITLE'] = '[Infrared ToF] measure the distance to %1';
Blockly.Msg['SENSORS_GET_LIGHT_TOOLTIP'] = 'Measure the distance (in mm) using the Buddy\'s infrared sensors.';
Blockly.Msg['SENSORS_GET_LIGHT_LEFT'] = 'left';
Blockly.Msg['SENSORS_GET_LIGHT_RIGHT'] = 'right';
Blockly.Msg['SENSORS_GET_LIGHT_FRONT'] = 'front';
Blockly.Msg['SENSORS_GET_LIGHT_BACK'] = 'back';
Blockly.Msg['SENSORS_ONHEADTOUCHSENSORSTOUCHED_TITLE'] = '[Touch] if the %1 side of the head %2 touched then';
Blockly.Msg['SENSORS_ONHEADTOUCHSENSORSTOUCHED_TOOLTIP'] = 'Check if one side of the head is or is not touched.';
Blockly.Msg['SENSORS_ONBODYTOUCHSENSORSTOUCHED_TITLE'] = '[Touch] if %1 %2 touched then';
Blockly.Msg['SENSORS_ONBODYTOUCHSENSORSTOUCHED_TOOLTIP'] = 'Check if the head is or is not touched.';
Blockly.Msg['SENSORS_ISTOUCHED'] = 'is';
Blockly.Msg['SENSORS_ISNTTOUCHED'] = 'is not';
Blockly.Msg['SENSORS_HEAD_TOUCH_SENSORS_TITLE'] = '[Touch] the %1 side of the head is touched';
Blockly.Msg['SENSORS_HEAD_TOUCH_SENSORS_TOOLTIP'] = 'Checks if the head is touched.';
Blockly.Msg['SENSORS_HEAD_TOUCH_SENSORS_TOP'] = 'top';
Blockly.Msg['SENSORS_HEAD_TOUCH_SENSORS_LEFT'] = 'left';
Blockly.Msg['SENSORS_HEAD_TOUCH_SENSORS_RIGHT'] = 'right';
Blockly.Msg['SENSORS_FACE_TOUCH_SENSORS_TITLE'] = '[Touch] %1 is touched';
Blockly.Msg['SENSORS_FACE_TOUCH_SENSORS_TOOLTIP'] = 'Check if part of the face is touched.';
Blockly.Msg['SENSORS_FACE_TOUCH_SENSORS_LEFT_EYE'] = 'the left eye';
Blockly.Msg['SENSORS_FACE_TOUCH_SENSORS_RIGHT_EYE'] = 'the right eye';
Blockly.Msg['SENSORS_FACE_TOUCH_SENSORS_MOUTH'] = 'the mouth';
Blockly.Msg['SENSORS_FACE_TOUCH_SENSORS_FACE'] = 'the face';
Blockly.Msg['SENSORS_ONFACETOUCHSENSORSTOUCHED_TITLE'] = '[Touch] if %1 %2 touched then';
Blockly.Msg['SENSORS_ONFACETOUCHSENSORSTOUCHED_TOOLTIP'] = 'Check whether part of the face is touched or not.';
Blockly.Msg['SENSORS_BODY_TOUCH_SENSORS_TITLE'] = '[Touch] %1 is touched';
Blockly.Msg['SENSORS_BODY_TOUCH_SENSORS_TOOLTIP'] = 'Checks if any part of the body is touched.';
Blockly.Msg['SENSORS_BODY_TOUCH_SENSORS_TORSO'] = 'torso';
Blockly.Msg['SENSORS_BODY_TOUCH_SENSORS_LEFT'] = 'left shoulder';
Blockly.Msg['SENSORS_BODY_TOUCH_SENSORS_RIGHT'] = 'right shoulder';
Blockly.Msg['SENSORS_GET_BATTERY_LEVEL_TITLE'] = '[Battery] level';
Blockly.Msg['SENSORS_GET_BATTERY_LEVEL_TOOLTIP'] = 'Returns the battery level of the Buddy.';
Blockly.Msg['SENSORS_IS_CHARGING_TITLE'] = '[Battery] is charging';
Blockly.Msg['SENSORS_IS_CHARGING_TOOLTIP'] = 'Check if Buddy is charging';
Blockly.Msg['SENSORS_GET_AMBIANT_SOUND_TITLE'] = '[Microphone] sound level (dB)';
Blockly.Msg['SENSORS_GET_AMBIANT_SOUND_TOOLTIP'] = 'Returns the ambient sound level in decibels.';
Blockly.Msg['SENSORS_GET_SOUND_LOCALISATION_TITLE'] = '[Microphone] position (in degrees) of sound';
Blockly.Msg['SENSORS_GET_SOUND_LOCALISATION_TOOLTIP'] = 'Returns the angle in degrees of the sound location between 0Â° and 360Â°.';
Blockly.Msg['SENSORS_GET_TRIGGER_SCORE_TITLE'] = '[Microphone] score of the pronunciation \'OK Buddy\'';
Blockly.Msg['SENSORS_GET_TRIGGER_SCORE_TOOLTIP'] = 'Returns the score that evaluates the pronunciation of the trigger phrase: \'OK Buddy\'';
Blockly.Msg['SENSORS_GET_BODY_ACC_TITLE'] = '[Body] acceleration along the %1 axis';
Blockly.Msg['SENSORS_GET_BODY_ACC_TOOLTIP'] = 'Returns the value of the acceleration (in mg) of Buddy\'s body along the x,y or z axis.';
Blockly.Msg['SENSORS_GET_BODY_ACC_X'] = 'X';
Blockly.Msg['SENSORS_GET_BODY_ACC_Y'] = 'Y';
Blockly.Msg['SENSORS_GET_BODY_ACC_Z'] = 'Z';
Blockly.Msg['SENSORS_GET_BODY_GYR_TITLE'] = '[Body] angular velocity along the axis %1';
Blockly.Msg['SENSORS_GET_BODY_GYR_TOOLTIP'] = 'Returns the value of the angular velocity of Buddy\'s body along the x,y or z axis.';
Blockly.Msg['SENSORS_GET_BODY_GYR_X'] = 'X';
Blockly.Msg['SENSORS_GET_BODY_GYR_Y'] = 'Y';
Blockly.Msg['SENSORS_GET_BODY_GYR_Z'] = 'Z';
Blockly.Msg['SENSORS_GET_HEAD_ACC_TITLE'] = '[Head] acceleration along axis %1';
Blockly.Msg['SENSORS_GET_HEAD_ACC_TOOLTIP'] = 'Returns the value of the acceleration (in mg) of Buddy\'s head along the x,y or z axis.';
Blockly.Msg['SENSORS_GET_HEAD_ACC_X'] = 'X';
Blockly.Msg['SENSORS_GET_HEAD_ACC_Y'] = 'Y';
Blockly.Msg['SENSORS_GET_HEAD_ACC_Z'] = 'Z';
Blockly.Msg['SENSORS_GET_HEAD_GYR_TITLE'] = '[Head] angular velocity along the axis %1';
Blockly.Msg['SENSORS_GET_HEAD_GYR_TOOLTIP'] = 'Returns the value of the angular velocity of Buddy\'s head along the x,y or z axis.';
Blockly.Msg['SENSORS_GET_HEAD_GYR_X'] = 'X';
Blockly.Msg['SENSORS_GET_HEAD_GYR_Y'] = 'Y';
Blockly.Msg['SENSORS_GET_HEAD_GYR_Z'] = 'Z';
Blockly.Msg['SENSORS_COLOR_DETECT_TITLE'] = '[Color] dominant color';
Blockly.Msg['SENSORS_COLOR_DETECT_TOOLTIP'] = 'Returns the dominant color of the image.';
Blockly.Msg['VISION_START_CAMERA_TITLE'] = '[Camera] %1 light up';
Blockly.Msg['VISION_START_CAMERA_TOOLTIP'] = 'Light the Buddy camera';
Blockly.Msg['VISION_STOP_CAMERA_TITLE'] = '[Camera] %1 turn off';
Blockly.Msg['VISION_STOP_CAMERA_TOOLTIP'] = 'Turn off Buddy\'s camera';
Blockly.Msg['VISION_GET_GRAND_ANGLE_FRAME_TITLE'] = '[Camera] get the image of the camera';
Blockly.Msg['VISION_GET_GRAND_ANGLE_FRAME_TOOLTIP'] = 'Recover the image of the wide angle camera (BitMap 640*480px format).';
Blockly.Msg['VISION_GET_CV_RESULT_FRAME_TITLE'] = '[Camera] get the image using the CV algorithm';
Blockly.Msg['VISION_GET_CV_RESULT_FRAME_TOOLTIP'] = 'Recovers the image generated by the latest CV algorithm executed (BitMap 640*480px format).';
Blockly.Msg['VISION_DETECT_ARUKO_MARKERS_TITLE'] = '[Object] identification of ARUCO markers';
Blockly.Msg['VISION_DETECT_ARUKO_MARKERS_TOOLTIP'] = 'Detects ARUCO markers (April Tag) with the camera.The marker must be of the 36h11 dictionary.';
Blockly.Msg['VISION_DETECT_FACES_TITLE'] = '[Object] face identification';
Blockly.Msg['VISION_DETECT_FACES_TOOLTIP'] = 'Detect human faces with the camera.The threshold, optional parameter, is between 0 and 1.';
Blockly.Msg['VISION_DETECT_FACES_THRES'] = 'threshold';
Blockly.Msg['VISION_DETECT_PERSON_TITLE'] = '[Object] identification of people';
Blockly.Msg['VISION_DETECT_PERSON_TOOLTIP'] = 'Detects humans with the camera.The threshold, optional parameter, is between 0 and 1.';
Blockly.Msg['VISION_DETECT_PERSON_THRES'] = 'threshold';
Blockly.Msg['VISION_IF_PERSON_DETECTED_IN_AREA_TITLE'] = '[Object] if a person %1 %2 is detected then';
Blockly.Msg['VISION_IF_PERSON_DETECTED_IN_AREA_TOOLTIP'] = 'Detect the person in front of the camera.';
Blockly.Msg['VISION_DETECTION_AREA_CENTER'] = 'in the center', Blockly.Msg['VISION_DETECTION_AREA_RIGHT'] = 'to the right', Blockly.Msg['VISION_DETECTION_AREA_LEFT'] = 'to the left', Blockly.Msg['VISION_IF_PERSON_DETECTED_TITLE'] = '[Object] if a person %1 is detected then';
Blockly.Msg['VISION_IF_PERSON_DETECTED_TOOLTIP'] = 'Detect the person in front of the camera.The threshold, optional parameter, is between 0 and 1.';
Blockly.Msg['VISION_START_MOTION_DETECTION_TITLE'] = '[Movement] Start movement detection';
Blockly.Msg['VISION_START_MOTION_DETECTION_TOOLTIP'] = 'Launches the movement detection process.';
Blockly.Msg['VISION_STOP_MOTION_DETECTION_TITLE'] = '[Movement] Stop movement detection';
Blockly.Msg['VISION_STOP_MOTION_DETECTION_TOOLTIP'] = 'Stop the movement detection process.';
Blockly.Msg['VISION_MOTION_DETECT_TITLE'] = '[Movement] Detecting movements';
Blockly.Msg['VISION_MOTION_DETECT_TOOLTIP'] = 'Detect movements in front of the camera.';
Blockly.Msg['VISION_SET_MOTION_THRES_TITLE'] = '[Movement] Define the detection threshold %1';
Blockly.Msg['VISION_SET_MOTION_THRES_TOOLTIP'] = 'Defines the movement detection threshold.';
Blockly.Msg['VISION_MOTION_DETECT_WITH_TRESH_TITLE'] = '[Movement] Detection with the threshold %1';
Blockly.Msg['VISION_MOTION_DETECT_WITH_TRESH_TOOLTIP'] = 'Launches the detection of a movement in front of the camera for the specified threshold.';
Blockly.Msg['VISION_GET_MOTION_DETECTION_TITLE'] = '[Movement] find information about the object';
Blockly.Msg['VISION_GET_MOTION_DETECTION_TOOLTIP'] = 'Returns a table containing the amplitude and the position of the highest measured optical flow in the image.The position (origin in the upper left corner) is expressed in %. ';
Blockly.Msg['VISION_START_VISUAL_TRACKING_TITLE'] = '[Tracking] start Tracking';
Blockly.Msg['VISION_START_VISUAL_TRACKING_TOOLTIP'] = 'Launches the follow -up process.';
Blockly.Msg['VISION_START_VISUAL_TRACKING_THRES'] = 'threshold';
Blockly.Msg['VISION_STOP_VISUAL_TRACKING_TITLE'] = '[Tracking] stop tracking';
Blockly.Msg['VISION_STOP_VISUAL_TRACKING_TOOLTIP'] = 'Stop tracking process.';
Blockly.Msg['VISION_GET_TRACKING_TITLE'] = '[Tracking] obtain informations';
Blockly.Msg['VISION_GET_TRACKING_TOOLTIP'] = 'Recovers the dragged target. Returns a table that contains: 1 - True if a person is successfully followed, False if the follow -up is lost or if no one is present in the image.2 - The position of the monitoring of the follow -up.';
Blockly.Msg['VI_START_SPEAKING_TITLE'] = '[Voice] say %1 being %2 %3';
Blockly.Msg['VI_START_SPEAKING_TOOLTIP'] = 'Makes the Buddy speak with a certain mouth movement. It is possible to mark a pause in the text. To do this, simply add <time_in_milliseconds> by replacing <time_in_milliseconds> with the desired number of milliseconds for the pause.';
Blockly.Msg['VI_START_SPEAKING_SPEAK_ANGRY'] = 'angry';
Blockly.Msg['VI_START_SPEAKING_NO_FACE'] = 'closed';
Blockly.Msg['VI_START_SPEAKING_SPEAK_HAPPY'] = 'happy';
Blockly.Msg['VI_START_SPEAKING_NEUTRAL'] = 'neutral';
Blockly.Msg['VI_STOP_SPEAKING_TITLE'] = '[Voice] stop talking';
Blockly.Msg['VI_STOP_SPEAKING_TOOLTIP'] = 'Shut Buddy up.';
Blockly.Msg['VI_IS_SPEAKING_TITLE'] = '[Voice] is talking';
Blockly.Msg['VI_IS_SPEAKING_TOOLTIP'] = 'Check if Buddy is talking.';
Blockly.Msg['VI_SET_SPEAKER_VOICE_TITLE'] = '[Voice] change to %1';
Blockly.Msg['VI_SET_SPEAKER_VOICE_TOOLTIP'] = 'Change the language of Buddy.';
Blockly.Msg['VI_SET_SPEAKER_VOICE_ROXANE'] = 'roxane (fr)';
Blockly.Msg['VI_SET_SPEAKER_VOICE_KATE'] = 'kate (en)';
Blockly.Msg['VI_SET_SPEAKER_VOLUME_TITLE'] = '[Voice] change volume %1';
Blockly.Msg['VI_SET_SPEAKER_VOLUME_TOOLTIP'] = 'Change the volume of Buddy\'s voice. Can take a value between 0% and 300%. The default value is 100%. The higher the value, the higher the volume.';
Blockly.Msg['VI_GET_SPEAKER_VOLUME_TITLE'] = '[Voice] volume';
Blockly.Msg['VI_GET_SPEAKER_VOLUME_TOOLTIP'] = 'Turns Buddy\'s voice volume back up.';
Blockly.Msg['VI_SET_SPEAKER_SPEED_TITLE'] = '[Voice] change speed %1';
Blockly.Msg['VI_SET_SPEAKER_SPEED_TOOLTIP'] = 'Can take a value between 50% and 400%. The default value is 100%.';
Blockly.Msg['VI_GET_SPEAKER_SPEED_TITLE'] = '[Voice] speed';
Blockly.Msg['VI_GET_SPEAKER_SPEED_TOOLTIP'] = 'Returns Buddy\'s speech rate.';
Blockly.Msg['VI_SET_SPEAKER_PITCH_TITLE'] = '[Voice] change pitch %1';
Blockly.Msg['VI_SET_SPEAKER_PITCH_TOOLTIP'] = 'Change the pitch of Buddy\'s voice. Can take a value between 50% and 200%. The default value is 100%. The lower the pitch, the deeper the voice.';
Blockly.Msg['VI_GET_SPEAKER_PITCH_TITLE'] = '[Voice] pitch';
Blockly.Msg['VI_GET_SPEAKER_PITCH_TOOLTIP'] = 'Returns the pitch of Buddy\'s voice';
Blockly.Msg['IO_WAIT_TITLE'] = 'wait %1 %2';
Blockly.Msg['IO_WAIT_TOOLTIP'] = 'Stop the code execution (duration in seconds or milliseconds).';
Blockly.Msg['IO_WAIT_SECOND'] = 'second(s)';
Blockly.Msg['IO_WAIT_MILLISECOND'] = 'millisecond(s)';
Blockly.Msg['IO_WAIT_MICROSECOND'] = 'microsecond(s)';
Blockly.Msg['IO_WAIT_UNTIL_TITLE'] = 'wait until %1';
Blockly.Msg['IO_WAIT_UNTIL_TOOLTIP'] = 'Stop the code execution until the satisfied condition.';
Blockly.Msg['IO_INITCHRONOMETER_TITLE'] = 'initialize the chronometer';
Blockly.Msg['IO_INITCHRONOMETER_TOOLTIP'] = 'Allows you to initialize the chronometer (in seconds).';
Blockly.Msg['IO_GETCHRONOMETER_TITLE'] = 'get chronometer in %1';
Blockly.Msg['IO_GETCHRONOMETER_TOOLTIP'] = 'Returns the chronometer value from the initialization in seconds or milliseconds.';
// AI IMAGE
Blockly.Msg['VITTAIA_LOAD_MODEL_TITLE'] = '%1 caricare il modello di IA di immagini %2';
Blockly.Msg['VITTAIA_LOAD_MODEL_TOOLTIP'] = 'Carica il modello di IA di immagini passato come parametro. Il modello predefinito Ã¨ per riconoscere gatti e cani. Puoi generare un nuovo modello dall\'interfaccia di "Allenamento IA" di Vittascience disponibile nella sezione Programmazione.';
Blockly.Msg['VITTAIA_LOAD_LOCAL_MODEL_TITLE'] = '%1 caricare il modello di IA di immagini locale';
Blockly.Msg['VITTAIA_LOAD_LOCAL_MODEL_TOOLTIP'] = 'Carica il modello di immagini giÃ  addestrato situato nella memoria locale del browser';
Blockly.Msg['VITTAIA_LOAD_MODEL_DEFAULT_TITLE'] = '%1 caricare il modello di IA di immagini %2';
Blockly.Msg['VITTAIA_LOAD_MODEL_DEFAULT_TOOLTIP'] = 'Carica un modello di immagini giÃ  addestrato. Cambia il modello utilizzando l\'opzione.';
Blockly.Msg['VITTAIA_MODEL_DOGS_CATS'] = "Cani e Gatti";
Blockly.Msg['VITTAIA_MAKE_PREDICTIONS_WEBCAM_TITLE'] = '%1 avviare la rilevazione sull\'immagine della telecamera';
Blockly.Msg['VITTAIA_MAKE_PREDICTIONS_WEBCAM_TOOLTIP'] = 'Effettua le previsioni del modello dall\'immagine della telecamera. Una previsione include 2 elementi: la classe e la probabilitÃ .';
Blockly.Msg['VITTAIA_MAKE_PREDICTIONS_FILE_TITLE'] = '%1 avviare la rilevazione sull\'immagine importata';
Blockly.Msg['VITTAIA_MAKE_PREDICTIONS_FILE_TOOLTIP'] = 'Effettua le previsioni del modello dall\'immagine importata. Una previsione include 2 elementi: la classe e la probabilitÃ .';
Blockly.Msg['VITTAIA_GET_HIGHEST_PROBABILITY_CLASS_TITLE'] = '%1 classe rilevata';
Blockly.Msg['VITTAIA_GET_HIGHEST_PROBABILITY_CLASS_TOOLTIP'] = 'Restituisce la classe associata al modello con la piÃ¹ alta probabilitÃ  di rilevamento.';
Blockly.Msg['VITTAIA_GET_CONFIDENCE_RATE_TITLE'] = '%1 tasso di fiducia';
Blockly.Msg['VITTAIA_GET_CONFIDENCE_RATE_TOOLTIP'] = 'Restituisce il tasso di fiducia della classe con la piÃ¹ alta probabilitÃ .';
Blockly.Msg['VITTAIA_GET_PREDICTIONS_TITLE'] = '%1 previsioni';
Blockly.Msg['VITTAIA_GET_PREDICTIONS_TOOLTIP'] = 'Restituisce un array contenente tutte le previsioni del modello.';
Blockly.Msg['VITTAIA_DETECT_CLASS_TITLE'] = '%1 se la classe %2 %3 rilevata allora';
Blockly.Msg['VITTAIA_IS'] = "Ã¨";
Blockly.Msg['VITTAIA_ISNOT'] = "non Ã¨";
Blockly.Msg['VITTAIA_DETECT_CLASS_TOOLTIP'] = 'Avvia il rilevamento utilizzando un\'immagine della telecamera o un\'immagine importata per fare una previsione verifica se la classe indicata nel blocco Ã¨ rilevata.';
Blockly.Msg['VITTAIA_IMAGE_UPLOADED_TITLE'] = '%1 immagine caricata';
Blockly.Msg['VITTAIA_IMAGE_UPLOADED_TOOLTIP'] = 'Permette di caricare un\'immagine dal computer per essere poi testata dal modello avviando un rilevamento. Premere l\'icona di \'Caricamento\' del blocco per aggiungere l\'immagine.';
Blockly.Msg['VITTAIA_WEBCAM_CAPTURE_TITLE'] = '%1 [telecamera] cattura';
Blockly.Msg['VITTAIA_WEBCAM_CAPTURE_TOOLTIP'] = 'Permette di effettuare una cattura con la telecamera del computer.';
Blockly.Msg['VITTAIA_WEBCAM_LIST_AVAILABLES_TITLE'] = '%1 [telecamera] elenco delle telecamere disponibili';
Blockly.Msg['VITTAIA_WEBCAM_LIST_AVAILABLES_TOOLTIP'] = 'Permette di elencare tutte le telecamere disponibili sul computer.';
Blockly.Msg['VITTAIA_WEBCAM_INIT_TITLE'] = '%1 [telecamera] selezionare la telecamera %2';
Blockly.Msg['VITTAIA_WEBCAM_INIT_TOOLTIP'] = 'Permette di inizializzare la telecamera del computer (default 0).';
Blockly.Msg['VITTAIA_WEBCAM_REFRESH_TITLE'] = '%1 [telecamera] aggiornare la telecamera';
Blockly.Msg['VITTAIA_WEBCAM_REFRESH_TOOLTIP'] = 'Permette di aggiornare la finestra della telecamera.';
