/**
 * @fileoverview English messages for CyberPi. (EN)
 */

'use strict';

// Display - LEDs
Blockly.Msg["CYBERPI_LED_ON_ALL_RGB_TITLE"] = "[LED] control all LED to R %1 G %2 B %3";
Blockly.Msg["CYBERPI_LED_ON_ALL_RGB_TOOLTIP"] = "Allows you to light the 5 RGB LEDs of the CyberPi card by choosing the colors R, G and B (0-255).";
Blockly.Msg["CYBERPI_LED_ON_ALL_RGB_PALETTE_TITLE"] = "[LED] control all LED to %1";
Blockly.Msg["CYBERPI_LED_ON_ALL_RGB_PALETTE_TOOLTIP"] = "Allows you to light the 5 RGB LEDs of the CyberPi board by choosing a color from the palette.";
Blockly.Msg["CYBERPI_LED_ON_RGB_TITLE"] = "[LED] control the LED %1 to R %2 G %3 B %4";
Blockly.Msg["CYBERPI_LED_ON_RGB_TOOLTIP"] = "Allows you to control each RGB LED on the CyberPi board using its ID (1-5) and choosing the R, G and B colors (0-255).";
Blockly.Msg["CYBERPI_LED_ON_RGB_PALETTE_TITLE"] = "[LED] control the LED %1 to %2";
Blockly.Msg["CYBERPI_LED_ON_RGB_PALETTE_TOOLTIP"] = "Allows you to control each RGB LED on the CyberPi board using its ID (1-5) and choosing a color from the palette.";
Blockly.Msg["CYBERPI_LED_PLAY_TITLE"] = "[LED] play the animation %1";
Blockly.Msg["CYBERPI_LED_PLAY_TOOLTIP"] = "Allows you to display the specified LED animation on the CyberPi.";
Blockly.Msg["CYBERPI_ANIMATION_RAINBOW"] = "rainbow";
Blockly.Msg["CYBERPI_ANIMATION_SPOONDRIFT"] = "spoondrift";
Blockly.Msg["CYBERPI_ANIMATION_METEOR_BLUE"] = "meteor blue";
Blockly.Msg["CYBERPI_ANIMATION_METEOR_GREEN"] = "meteor green";
Blockly.Msg["CYBERPI_ANIMATION_FLASH_RED"] = "red flash";
Blockly.Msg["CYBERPI_ANIMATION_FLASH_ORANGE"] = "orange flash";
Blockly.Msg["CYBERPI_ANIMATION_FIREFLY"] = "firefly";
Blockly.Msg["CYBERPI_LED_MOVE_TITLE"] = "[LED] move LED by %1 step";
Blockly.Msg["CYBERPI_LED_MOVE_TOOLTIP"] = "Allows you to make the colors of the LEDs roll from left to right by the specified number of positions (-4 - +4) on the CyberPi.";
Blockly.Msg["CYBERPI_LED_SET_BRIGHTNESS_TITLE"] = "[LED] set brightness to %1 (%)";
Blockly.Msg["CYBERPI_LED_SET_BRIGHTNESS_TOOLTIP"] = "Allows you to set the brightness of CyberPi's LEDs.";
Blockly.Msg["CYBERPI_LED_GET_BRIGHTNESS_TITLE"] = "[LED] get LED brightness (%)";
Blockly.Msg["CYBERPI_LED_GET_BRIGHTNESS_TOOLTIP"] = "Returns the brightness from 0 to 100 % of CyberPi's LEDs.";
// Display - Console
Blockly.Msg["CYBERPI_CONSOLE_PRINT_TITLE"] = "[Console] print in console %1";
Blockly.Msg["CYBERPI_CONSOLE_PRINT_TOOLTIP"] = "Allows you to write text on CyberPi screen.";
Blockly.Msg["CYBERPI_CONSOLE_SET_FONT_TITLE"] = "[Console] set font to %1";
Blockly.Msg["CYBERPI_CONSOLE_SET_FONT_TOOLTIP"] = "Allows you to change the font size of text in the CyberPi board console.";
// Display - Text
Blockly.Msg["CYBERPI_DISPLAY_SHOW_LABEL_TITLE"] = "[Screen] show label %1 fontsize %2 position %3";
Blockly.Msg["CYBERPI_DISPLAY_SHOW_LABEL_TOOLTIP"] = "Allows you to display text at the specified position on the CyberPi's screen. Font size can be set as 16, 24 or 32.";
Blockly.Msg["CYBERPI_POSITION_TOP_MID"] = "top mid";
Blockly.Msg["CYBERPI_POSITION_TOP_LEFT"] = "top left";
Blockly.Msg["CYBERPI_POSITION_TOP_RIGHT"] = "top right";
Blockly.Msg["CYBERPI_POSITION_CENTER"] = "center";
Blockly.Msg["CYBERPI_POSITION_MID_LEFT"] = "mid left";
Blockly.Msg["CYBERPI_POSITION_MID_RIGHT"] = "mid right";
Blockly.Msg["CYBERPI_POSITION_BOTTOM_MID"] = "bottom mid";
Blockly.Msg["CYBERPI_POSITION_BOTTOM_LEFT"] = "bottom left";
Blockly.Msg["CYBERPI_POSITION_BOTTOM_RIGHT"] = "bottom right";
Blockly.Msg["CYBERPI_DISPLAY_SHOW_LABEL_XY_TITLE"] = "[Screen] show label %1 fontsize %2 x %3 y %4";
Blockly.Msg["CYBERPI_DISPLAY_SHOW_LABEL_XY_TOOLTIP"] = "Allows you to display text at the specified position x (0-128) and y (0-128) on the CyberPi's screen. Font size can be set as 16, 24 or 32.";
// Display - Linechart
Blockly.Msg["CYBERPI_LINECHART_ADD_TITLE"] = "[Screen] linechart: add value %1";
Blockly.Msg["CYBERPI_LINECHART_ADD_TOOLTIP"] = "Allows you to add a value to the curve on the CyberPi screen.\nTip:\n - The value must be between 0 and 100. Use the \"[Screen ] adjust X defined between MIN and MAX\" to adjust it between 0 and 100.\n - The curve can contain a maximum of 128 values horizontally if they are spaced by 1. Use the block \"[Screen] define the gap values of the graph to X\" to change the step.\n - Use the block \"[Screen] use the color graph R G B\" add or select a new curve.";
Blockly.Msg["CYBERPI_LINECHART_SET_STEP_TITLE"] = "[Screen] linechart: set step values to %1";
Blockly.Msg["CYBERPI_LINECHART_SET_STEP_TOOLTIP"] = "Allows you to set the gap between the values contained in the graph. This will contain 64 if they are spaced by 2. The amount of data that the graph can contain is such that: N = int(128 / deviation)";
Blockly.Msg["CYBERPI_BARCHART_ADD_TITLE"] = "[Screen] histogram: change value to %1";
Blockly.Msg["CYBERPI_BARCHART_ADD_TOOLTIP"] = "Allows you to change the value of the histogram on the CyberPi screen.\nTip:\n - The value must be between 0 and 100. Use the \"[Screen ] adjust X defined between MIN and MAX\" to adjust it between 0 and 100.\n - Use the block \"[Screen] use color graph R G B\" to add or select a bar. Adding a new color therefore defines a new bar in the histogram.";
Blockly.Msg["CYBERPI_TABLE_ADD_TITLE"] = "[Screen] table: add %1 at position x %2 y %3";
Blockly.Msg["CYBERPI_TABLE_ADD_TOOLTIP"] = "Allows you to add a numeric or textual value to the table on the CyberPi screen.";
Blockly.Msg["CYBERPI_CHART_MAP_TITLE"] = "[Screen] adjust %1 set between %2 and %3";
Blockly.Msg["CYBERPI_CHART_MAP_TOOLTIP"] = "Allows to adjust the data defined between a minimum and a maximum so that it is contained between 0 and 100 on the curve or in the histogram.";
Blockly.Msg["CYBERPI_CHART_SET_BRUSH_TITLE"] = "[Screen] use color graph R %1 G %2 B %3";
Blockly.Msg["CYBERPI_CHART_SET_BRUSH_TOOLTIP"] = "Allows to add/select a new horizontal curve or bar in the histogram with a new color set with R, G and B (0-255).";
Blockly.Msg["CYBERPI_CHART_SET_BRUSH_PALETTE_TITLE"] = "[Screen] use color chart %1";
Blockly.Msg["CYBERPI_CHART_SET_BRUSH_PALETTE_TOOLTIP"] = "Allows you to add/select a new horizontal curve or bar in the histogram with a new color chosen from the palette.";

// IO - Time
Blockly.Msg["IO_WAIT_TITLE"] = "wait %1 %2";
Blockly.Msg["IO_WAIT_TOOLTIP"] = "Stop the code execution (duration in seconds or milliseconds).";
Blockly.Msg["IO_WAIT_SECOND"] = "second(s)";
Blockly.Msg["IO_WAIT_MILLISECOND"] = "millisecond(s)";
Blockly.Msg["IO_WAIT_MICROSECOND"] = "microsecond(s)";
Blockly.Msg["IO_WAIT_UNTIL_TITLE"] = "wait until %1";
Blockly.Msg["IO_WAIT_UNTIL_TOOLTIP"] = "Stop the code execution until the satisfied condition.";
Blockly.Msg["IO_INITCHRONOMETER_TITLE"] = "initialize the chronometer";
Blockly.Msg["IO_INITCHRONOMETER_TOOLTIP"] = "Allows you to initialize the chronometer (in seconds).";
Blockly.Msg["IO_GETCHRONOMETER_TITLE"] = "get chronometer in %1";
Blockly.Msg["IO_GETCHRONOMETER_TOOLTIP"] = "Returns the chronometer value from the initialization in seconds or milliseconds.";
// IO - Buttons
Blockly.Msg["IO_CONTROLLER_IS_BUTTON_PRESSED_TITLE"] = "button %1 pressed";
Blockly.Msg["IO_CONTROLLER_IS_BUTTON_PRESSED_TOOLTIP"] = "Returns 'True' if specified button is pressed, else return 'False'.";
Blockly.Msg["IO_CONTROLLER_ON_BUTTON_PRESSED_TITLE"] = "on button %1 pressed then";
Blockly.Msg["IO_CONTROLLER_ON_BUTTON_PRESSED_TOOLTIP"] = "Execute instructions if the specified button is pressed.";
Blockly.Msg["IO_CONTROLLER_BUTTONS_GET_COUNT_TITLE"] = "get presses of button %1";
Blockly.Msg["IO_CONTROLLER_BUTTONS_GET_COUNT_TOOLTIP"] = "Returns number of presses of selected button.";
Blockly.Msg["IO_CONTROLLER_BUTTONS_RESET_COUNT_TITLE"] = "reset count of button %1";
Blockly.Msg["IO_CONTROLLER_BUTTONS_RESET_COUNT_TOOLTIP"] = "Returns the number of times the specified button is pressed or the joystick is moved to the specified direction.";
// IO -Events
Blockly.Msg["IO_EVENT_START_TITLE"] = "On program started, then";
Blockly.Msg["IO_EVENT_START_TOOLTIP"] = "Allows to execute instructions when the program starts. Note: This is an event-driven programming block, before using it, disable the \"Repeat indefinitely\" blocks contained in your program .";
Blockly.Msg["IO_EVENT_IS_PRESS_TITLE"] = "On button %1 pressed, then";
Blockly.Msg["IO_EVENT_IS_PRESS_TOOLTIP"] = "Allows to execute instructions when the selected button is pressed. Note: This is an event-driven programming block, before using it, disable \"Repeat forever\" blocks contained in your program.";
Blockly.Msg["IO_CYBERPI_BROADCAST_TITLE"] = "brodcast message %1";
Blockly.Msg["IO_CYBERPI_BROADCAST_TOOLTIP"] = "Allows to emit a message during the execution of a program, this one will trigger the event linked to the message.";
Blockly.Msg["IO_EVENT_RECEIVE_TITLE"] = "On message %1 received, then";
Blockly.Msg["IO_EVENT_RECEIVE_TOOLTIP"] = "Allows to execute instructions when a broadcast message is received. Note: This is an event-driven programming block, before using it, disable the blocks \"Repeat forever\" content in your program.";
// IO - Pines
Blockly.Msg["IO_DIGITAL_SIGNAL_TITLE"] = "%1";
Blockly.Msg["IO_DIGITAL_SIGNAL_HIGH"] = "HIGH (1)";
Blockly.Msg["IO_DIGITAL_SIGNAL_LOW"] = "LOW (0)";
Blockly.Msg["IO_DIGITAL_SIGNAL_TOOLTIP"] = "Returns a boolean value (1 if HIGH or 0 if LOW).";
Blockly.Msg["IO_READDIGITALPIN_TITLE"] = "status of digital pin %1";
Blockly.Msg["IO_READDIGITALPIN_TOOLTIP"] = "Read the value of a digital input (0 or 1).";
Blockly.Msg["IO_WRITEDIGITALPIN_TITLE"] = "Write %1 state to digital pin %2";
Blockly.Msg["IO_WRITEDIGITALPIN_TOOLTIP"] = "Allows you to write a value to a digital input (0 or 1).";
// Blockly.Msg["IO_READANALOGPIN_TITLE"] = "read analog pin %1";
// Blockly.Msg["IO_READANALOGPIN_TOOLTIP"] = "Reads the value of an analog input (0-1023), which corresponds to a voltage between 0 and 3.6V.";
Blockly.Msg["IO_WRITEPWMPIN_TITLE"] = "Write value %1 to PWM pin %2";
Blockly.Msg["IO_WRITEPWMPIN_TOOLTIP"] = "Allows to apply a PWM signal with a fixed frequency of 10kH and changing the cycle from 0 to 1023. The value 512 will correspond to 50% of the cycle, therefore approximately 1.66V.";
// Blockly.Msg["IO_WRITEANALOGPIN_TITLE"] = "write value %1 to analog pin %2 (DAC)";
// Blockly.Msg["IO_WRITEANALOGPIN_TOOLTIP"] = "Allows to apply an analog voltage on the DAC pins p25 and p26 (from 0 to 255). The Esp32 uses a Digital-Analog Converter (DAC) to apply a voltage including between 0 and 3.3V.";
Blockly.Msg["IO_SETPWM_TITLE"] = "apply a square wave of frequency %1 (Hz) to pin %2";
Blockly.Msg["IO_SETPWM_TOOLTIP"] = "Allows you to apply a square wave signal (PWM) with a fixed duty cycle of 50% on a pin. This block allows you to change the frequency of the signal.";
Blockly.Msg["IO_STOPPWM_TITLE"] = "stop pin %1 PWM signal";
Blockly.Msg["IO_STOPPWM_TOOLTIP"] = "Allows you to stop the PWM signal applied to a pin.";
Blockly.Msg["IO_GETVOLTAGE_TITLE"] = "Convert %1 on %2 to voltage";
Blockly.Msg["IO_GETVOLTAGE_TOOLTIP"] = "Convert analog value to voltage by removing resolution (10-bit: 1024, 12-bit: 4096, 9-bit: 512, 11-bit: 2048) and maximum of 3.6V.";

// Communication - Serial connection
Blockly.Msg["COMMUNICATION_SERIAL_WRITE_TITLE"] = "write on serial port %1";
Blockly.Msg["COMMUNICATION_SERIAL_WRITE_TOOLTIP"] = "Write a string on serial port.";
Blockly.Msg["COMMUNICATION_SERIAL_WRITE_WITH"] = "with";
Blockly.Msg["COMMUNICATION_SERIAL_WRITE_NEWLINES"] = "newline(s)";
Blockly.Msg["COMMUNICATION_SERIAL_ONDATARECEIVED_TITLE then"] = "on serial data received in %1 then";
Blockly.Msg["COMMUNICATION_SERIAL_ONDATARECEIVED_TOOLTIP"] = "Allows you to execute instructions if data is received by serial port in the 'serialData' variable.";
Blockly.Msg["COMMUNICATION_COMPUTER_PLAYNOTE_TITLE"] = "play music %1 in the serial port";
Blockly.Msg["COMMUNICATION_COMPUTER_PLAYNOTE_TOOLTIP"] = "Play selected note until execution of \"Stop music\" block.";
Blockly.Msg["NOTE_C"] = "C";
Blockly.Msg["NOTE_C_SHARP"] = "C#";
Blockly.Msg["NOTE_D"] = "D";
Blockly.Msg["NOTE_D_SHARP"] = "D#";
Blockly.Msg["NOTE_E"] = "E";
Blockly.Msg["NOTE_F"] = "F";
Blockly.Msg["NOTE_F_SHARP"] = "F#";
Blockly.Msg["NOTE_G"] = "G";
Blockly.Msg["NOTE_G_SHARP"] = "G#";
Blockly.Msg["NOTE_A"] = "A";
Blockly.Msg["NOTE_A_SHARP"] = "A#";
Blockly.Msg["NOTE_B"] = "B";
Blockly.Msg["COMMUNICATION_COMPUTER_SETFREQUENCY_TITLE"] = "play frequency %1 (Hz) on the computer";
Blockly.Msg["COMMUNICATION_COMPUTER_SETFREQUENCY_TOOLTIP"] = "This block allows to play a given frequency on the computer";
Blockly.Msg["COMMUNICATION_COMPUTER_STOPMUSIC_TITLE"] = "stop music of serial port";
Blockly.Msg["COMMUNICATION_COMPUTER_STOPMUSIC_TOOLTIP"] = "Stop the current note of serial port.";
Blockly.Msg["COMMUNICATION_WRITEGRAPH_TITLE"] = "write graph";
Blockly.Msg["COMMUNICATION_WRITEGRAPH_TOOLTIP"] = "This block makes it possible to write (digital) data that will be visible in the plotter. It can be used with one or more blocks in \"Name\" and \"Data\" format. Click on icon 'Graphic mode' to display graphics.";
Blockly.Msg["COMMUNICATION_DATA"] = "Data";
Blockly.Msg["COMMUNICATION_PRINT_DATAS_TITLE"] = "Name %1 Data %2";
Blockly.Msg["COMMUNICATION_PRINT_DATAS_TOOLTIP"] = "This block is to be used in the \"Write in graphic\" block. It must contain the name of the (text) value to display and the value in question.";
// Sensors - CyberPi
Blockly.Msg["SENSORS_READ_HALL_SENSOR_TITLE"] = "read hall sensor";
Blockly.Msg["SENSORS_READ_HALL_SENSOR_TOOLTIP"] = "Returns the hall sensor value from board.";
Blockly.Msg["SENSORS_READ_PROCESSOR_TEMP_TITLE"] = "read processor temperature in %1";
Blockly.Msg["SENSORS_READ_PROCESSOR_TEMP_TOOLTIP"] = "Returns the temperature of ESP32 processor of CyberPi.";
Blockly.Msg["SENSORS_CYBERPI_GET_BRIGHTNESS_TITLE"] = "luminosité ambiante (%)";
Blockly.Msg["SENSORS_CYBERPI_GET_BRIGHTNESS_TOOLTIP"] = "Returns the ambiant brightness from 0 to 100% detected by the built-in CyberPi sensor.";
Blockly.Msg["SENSORS_CYBERPI_GET_LOUDNESS_TITLE"] = "intensité du son ambiant (%)";
Blockly.Msg["SENSORS_CYBERPI_GET_LOUDNESS_TOOLTIP"] = "Returns the ambiant loudness from 0 to 100% detected by the built-in CyberPi sensor.";
// Actuators - audio
Blockly.Msg["ACTUATORS_AUDIO_PLAY_TITLE"] = "[audio] play %1";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_TOOLTIP"] = "Play selected text with CyberPi's built-in speaker.";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_HI"] = "hi";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_BYE"] = "bye";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_YEAH"] = "yeah";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_WOW"] = "wow";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_LAUGH"] = "laugh";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_HUM"] = "hesitation";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_SAD"] = "sad";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_SIGH"] = "sigh";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_ANNOYED"] = "annoyed";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_ANGRY"] = "angry";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_SURPRISED"] = "surprised";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_YUMMY"] = "yummy";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_CURIOUS"] = "curious";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_EMBARRASSED"] = "embarrassed";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_READY"] = "ready";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_SPRINT"] = "sprint";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_NOTE_TITLE"] = "[audio] play note %1 for %2 (s)";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_NOTE_TOOLTIP"] = "Play the chosen note (0-132) with the built-in speaker on the CyberPi board.";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_TONE_TITLE"] = "[audio] play frequency %1";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_TONE_TOOLTIP"] = "Play a frequency (in Hz) with the built-in speaker on the CyberPi board.";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_TONE_DURATION"] = "during";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_DRUM_TITLE"] = "[audio] play sound %1 for %2 (s)";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_DRUM_TOOLTIP"] = "Play a drum sound with the built-in speaker on the CyberPi board.";
Blockly.Msg["ACTUATORS_AUDIO_DRUM_SNARE"] = "snare";
Blockly.Msg["ACTUATORS_AUDIO_DRUM_BASS_DRUM"] = "bass drum";
Blockly.Msg["ACTUATORS_AUDIO_DRUM_SIDE_STICK"] = "side-stick";
Blockly.Msg["ACTUATORS_AUDIO_DRUM_CRASH_SYMBAL"] = "crash cymbal";
Blockly.Msg["ACTUATORS_AUDIO_DRUM_OPEN_HI_HAT"] = "open-hit-hat";
Blockly.Msg["ACTUATORS_AUDIO_DRUM_CLOSED_HI_HAT"] = "closed-hi-hat";
Blockly.Msg["ACTUATORS_AUDIO_DRUM_TAMOURINE"] = "tamourine";
Blockly.Msg["ACTUATORS_AUDIO_DRUM_HAND_CLAP"] = "hand-clap";
Blockly.Msg["ACTUATORS_AUDIO_DRUM_CLAVES"] = "claves";
Blockly.Msg["ACTUATORS_AUDIO_START_RECORDING_TITLE"] = "[audio] start recording";
Blockly.Msg["ACTUATORS_AUDIO_START_RECORDING_TOOLTIP"] = "Start recording audio with the built-in speaker on the CyberPi board.";
Blockly.Msg["ACTUATORS_AUDIO_STOP_RECORDING_TITLE"] = "[audio] stop recording";
Blockly.Msg["ACTUATORS_AUDIO_STOP_RECORDING_TOOLTIP"] = "Stop audio recording with CyberPi's built-in speaker.";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_RECORDING_TITLE"] = "[audio] playing recording";
Blockly.Msg["ACTUATORS_AUDIO_PLAY_RECORDING_TOOLTIP"] = "Play audio recording with CyberPi's built-in speaker.";
Blockly.Msg["ACTUATORS_AUDIO_ADD_TEMPO_TITLE"] = "[audio] increase tempo by %1 (%)";
Blockly.Msg["ACTUATORS_AUDIO_ADD_TEMPO_TOOLTIP"] = "Allows you to increase the audio tempo by a certain percentage.";
Blockly.Msg["ACTUATORS_AUDIO_SET_TEMPO_TITLE"] = "[audio] set tempo to %1 (%)";
Blockly.Msg["ACTUATORS_AUDIO_SET_TEMPO_TOOLTIP"] = "Allows you to set the audio tempo from 0 to 100%.";
Blockly.Msg["ACTUATORS_AUDIO_GET_TEMPO_TITLE"] = "[audio] tempo (%)";
Blockly.Msg["ACTUATORS_AUDIO_GET_TEMPO_TOOLTIP"] = "Returns the audio tempo (in %).";
Blockly.Msg["ACTUATORS_AUDIO_ADD_VOLUME_TITLE"] = "[audio] increase volume by %1 (%)";
Blockly.Msg["ACTUATORS_AUDIO_ADD_VOLUME_TOOLTIP"] = "Allows you to increase the audio volume by a certain percentage.";
Blockly.Msg["ACTUATORS_AUDIO_SET_VOLUME_TITLE"] = "[audio] set volume to %1 (%)";
Blockly.Msg["ACTUATORS_AUDIO_SET_VOLUME_TOOLTIP"] = "Allows you to set the audio volume from 0-100%.";
Blockly.Msg["ACTUATORS_AUDIO_GET_VOLUME_TITLE"] = "[audio] volume (%)";
Blockly.Msg["ACTUATORS_AUDIO_GET_VOLUME_TOOLTIP"] = "Returns the audio volume (in %).";
Blockly.Msg["ACTUATORS_AUDIO_STOP_TITLE"] = "[audio] stop sounds";
Blockly.Msg["ACTUATORS_AUDIO_STOP_TOOLTIP"] = "Allows you to stop the sounds playing through the CyberPi's built-in speaker.";
// Robots - Motor M1 & M2
Blockly.Msg["MBOT2_MOTORS_SET_POWER_TITLE"] = "[Motors.s %1] set power to %2 (%)";
Blockly.Msg["MBOT2_MOTORS_SET_POWER_TOOLTIP"] = "Allows you to control the power of the M1 and M2 motors. These motors plug directly into the mBot2 robot.";
Blockly.Msg["MBOT2_MOTORS_ADD_POWER_TITLE"] = "[Motors.s %1] increase power by %2 (%)";
Blockly.Msg["MBOT2_MOTORS_ADD_POWER_TOOLTIP"] = "Allows you to increase the power of the M1 and M2 motors. These motors plug directly into the mBot2 robot.";
Blockly.Msg["MBOT2_MOTORS_GET_POWER_TITLE"] = "[Motor.s %1] power (%)";
Blockly.Msg["MBOT2_MOTORS_GET_POWER_TOOLTIP"] = "Returns the power of the M1 or M2 motor. These motors plug directly into the mBot2 robot.";
Blockly.Msg["MBOT2_MOTORS_STOP_TITLE"] = "[Motor.s %1] stop";
Blockly.Msg["MBOT2_MOTORS_STOP_TOOLTIP"] = "Allows you to stop the M1 and/or M2 motors. These motors connect directly to the mBot2 robot.";
// Robots - Servos
Blockly.Msg["MBOT2_SERVOS_SET_ANGLE_TITLE"] = "[Servo.s %1] is controlling the angle at %2 (°)";
Blockly.Msg["MBOT2_SERVOS_SET_ANGLE_TOOLTIP"] = "Allows you to control the angle (in °) of the S1, S2, S3 or S4 servos from 0 to 360°. These servos plug directly into the mBot2 robot.";
Blockly.Msg["MBOT2_SERVOS_ADD_ANGLE_TITLE"] = "[Servo.s %1] increase angle by %2 (°)";
Blockly.Msg["MBOT2_SERVOS_ADD_ANGLE_TOOLTIP"] = "Allows you to increase the angle (in °) of the S1, S2, S3 or S4 servo from 0 to 360°. These servos plug directly into the mBot2 robot.";
Blockly.Msg["MBOT2_SERVOS_GET_ANGLE_TITLE"] = "[Servo.s %1] servo angle (°)";
Blockly.Msg["MBOT2_SERVOS_GET_ANGLE_TOOLTIP"] = "Returns the angle of the S1, S2, S3, or S4 servo. These servos plug directly into the mBot2 robot.";
Blockly.Msg["MBOT2_SERVOS_RESET_TITLE"] = "[Servo.s %1] stop motor.s";
Blockly.Msg["MBOT2_SERVOS_RESET_TOOLTIP"] = "Allows you to stop the S1, S2, S3 or S4 servo motor. These servos plug directly into the mBot2 robot.";

// Robots - mBot2
Blockly.Msg["ROBOTS_MBOT2_MOTOR_LEFT"] = "left (EM1)";
Blockly.Msg["ROBOTS_MBOT2_MOTOR_RIGHT"] = "right (EM2)";
Blockly.Msg["ROBOTS_MBOT2_MOTOR_SPEED"] = "speed (RPM)";
Blockly.Msg["ROBOTS_MBOT2_MOTOR_POWER"] = "power (%)";
Blockly.Msg["ROBOTS_MBOT2_MOTOR_ANGLE"] = "angular position (°)";
Blockly.Msg["ROBOTS_MBOT2_BOTH_MOTORS"] = "right (EM2) & left (EM1)";
Blockly.Msg["ROBOTS_MBOT2_MOVE_FORWARD"] = "forward";
Blockly.Msg["ROBOTS_MBOT2_MOVE_REVERSE"] = "move back";
Blockly.Msg["ROBOTS_MBOT2_MOVE_TITLE"] = "[mBot2] %1 speed %2 (RPM)";
Blockly.Msg["ROBOTS_MBOT2_MOVE_DURATION"] = "during";
Blockly.Msg["ROBOTS_MBOT2_MOVE_TOOLTIP"] = IMG_ROBOT_MBOT2 + Blockly.Tooltip.SEP + "Allows you to control the walk (FORWARD/BACKWARD) as well as the speed (from 0 to 207 RPM) of the mBot2 robot.";
Blockly.Msg["ROBOTS_MBOT2_MOVE_BY_TITLE"] = "[mBot2] %1 of %2 %3";
Blockly.Msg["ROBOTS_MBOT2_MOVE_BY_CM"] = "cm";
Blockly.Msg["ROBOTS_MBOT2_MOVE_BY_INCHS"] = "inch.s";
Blockly.Msg["ROBOTS_MBOT2_MOVE_BY_TOOLTIP"] = IMG_ROBOT_MBOT2 + Blockly.Tooltip.SEP + "Allows mBot2 to move forward or backward a certain distance (in cm or inch).";
Blockly.Msg["ROBOTS_MBOT2_TURN_TITLE"] = "[mBot2] turn %1 of %2 (°)";
Blockly.Msg["ROBOTS_MBOT2_TURN_RIGHT"] = "right";
Blockly.Msg["ROBOTS_MBOT2_TURN_LEFT"] = "left";
Blockly.Msg["ROBOTS_MBOT2_TURN_TOOLTIP"] = IMG_ROBOT_MBOT2 + Blockly.Tooltip.SEP + "Allows you to turn left or right by a certain angle (in °) with the mBot2 robot.";
Blockly.Msg["ROBOTS_MBOT2_CONTROL_MOTOR_TITLE"] = "[mBot2] control motor.s %1 direction %2 with %3 from %4";
Blockly.Msg["ROBOTS_MBOT2_CONTROL_MOTOR_TOOLTIP"] = IMG_ROBOT_MBOT2 + Blockly.Tooltip.SEP + "Allows you to control each of the EM1 or EM2 encoder motors with the power (in %) or the speed (in rpm) of the mBot2 robot.";
Blockly.Msg["ROBOTS_MBOT2_TURN_MOTOR_TITLE"] = "[mBot2] turn motor.s %1 direction %2 angle %3 (°) at speed %4 (RPM)";
Blockly.Msg["ROBOTS_MBOT2_TURN_MOTOR_TOOLTIP"] = IMG_ROBOT_MBOT2 + Blockly.Tooltip.SEP + "Allows to control the rotation of each of the EM1 or EM2 encoder motors by a certain angle (in °) with the speed (in rpm) of the mBot2.";
Blockly.Msg["ROBOTS_MBOT2_STOP_MOTOR_TITLE"] = "[mBot2] stop motor.s %1";
Blockly.Msg["ROBOTS_MBOT2_STOP_MOTOR_TOOLTIP"] = IMG_ROBOT_MBOT2 + Blockly.Tooltip.SEP + "Allows you to stop the EM1 or EM2 encoder motors of the mBot2 robot.";
Blockly.Msg["ROBOTS_MBOT2_GET_MOTOR_ENCODING_TITLE"] = "[mBot2] %1 of encoder motor %2";
Blockly.Msg["ROBOTS_MBOT2_GET_MOTOR_ENCODING_TOOLTIP"] = IMG_ROBOT_MBOT2 + Blockly.Tooltip.SEP + "Returns the rotation speed (in rpm) or the power (in %) or the angular position (in °) of the EM1 or EM2 encoder motor of the mBot2.";
Blockly.Msg["ROBOTS_MBOT2_RESET_MOTOR_ANGULAR_POSITION_TITLE"] = "[mBot2] reset angle (°) of motor %1";
Blockly.Msg["ROBOTS_MBOT2_RESET_MOTOR_ANGULAR_POSITION_TOOLTIP"] = IMG_ROBOT_MBOT2 + Blockly.Tooltip.SEP + "Allows you to reset the angular position to 0° of the EM1 and/or EM2 encoder motors of the mBot2 robot.";
Blockly.Msg["ROBOTS_MBOT2_CONTROL_MOTOR_LOCKING_TITLE"] = "[mBot2] control motor auto locking %1 at %2";
Blockly.Msg["ROBOTS_MBOT2_CONTROL_MOTOR_LOCKING_TOOLTIP"] = IMG_ROBOT_MBOT2 + Blockly.Tooltip.SEP + "Allows you to control the automatic locking of the EM1 and/or EM2 encoder motors of the mBot2 robot.";
Blockly.Msg["ROBOTS_MBOT2_CONTROL_MOTOR_LOCKING_ENABLE"] = "enable";
Blockly.Msg["ROBOTS_MBOT2_CONTROL_MOTOR_LOCKING_DISABLE"] = "disable";
// Robots - Ultrasonic sensors
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_GET_DISTANCE_TITLE"] = "[Ultrasonic Sensor %1] distance (cm)";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_GET_DISTANCE_TOOLTIP"] = IMG_MBUILD_ULTRASONIC_SENSOR + Blockly.Tooltip.SEP + "Returns the distance from 3 to 300 cm between the robot and the obstacle measured with the mBot2 robot's ultrasonic sensor. It is possible to connect in series up to 8 ultrasonic sensors. use parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_SET_BRIGHTNESS_TITLE"] = "[Ultrasonic Sensor %1] set LED %2 brightness to %3 (%)";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_SET_BRIGHTNESS_TOOLTIP"] = IMG_MBUILD_ULTRASONIC_SENSOR + Blockly.Tooltip.SEP + "Allows you to set the brightness (0-100)% of each of the 8 blue LEDs built into an ultrasonic sensor.";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_GET_BRIGHTNESS_TITLE"] = "[Ultrasonic Sensor %1] brightness (%) of LED %2";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_GET_BRIGHTNESS_TOOLTIP"] = IMG_MBUILD_ULTRASONIC_SENSOR + Blockly.Tooltip.SEP + "Returns the ambient brightness of the blue LED selected with id (1-8) and integrated with the ultrasonic sensor.";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_STOP_LED_TITLE"] = "[Ultrasonic Sensor %1] turn off LED %2";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_STOP_LED_TOOLTIP"] = IMG_MBUILD_ULTRASONIC_SENSOR + Blockly.Tooltip.SEP + "Allows you to turn off the blue LED selected with the id (1-8) and integrated in the ultrasonic sensor.";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_PLAY_LED_TITLE"] = "[Ultrasonic Sensor %1] play emotion %2";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_PLAY_LED_TOOLTIP"] = IMG_MBUILD_ULTRASONIC_SENSOR + Blockly.Tooltip.SEP + "Play an emotion with the blue LEDs of the ultrasonic sensor. This lasts about 1-2 seconds.";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_EMOTION_SLEEPY"] = "sleepy";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_EMOTION_HAPPPY"] = "happy";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_EMOTION_DIZZY"] = "dizzy";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_EMOTION_WINK"] = "wink";
Blockly.Msg["MBUILD_SENSORS_ULTRASONIC_EMOTION_THINKING"] = "thinking";
// Robots - Quad RGB sensors
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_LINE"] = "line";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_GROUND"] = "background";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_WHITE"] = "white";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_RED"] = "red";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_YELLOW"] = "yellow";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_GREEN"] = "green";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_CYAN"] = "cyan";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_BLUE"] = "blue";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_PURPLE"] = "purple";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_BLACK"] = "black";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_MODE_CUSTOM"] = "custom";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_L1_R1_DETECTION_IS_TITLE"] = "[Quad RGB Sensor %1] detected %2 by L1 and R1 is %3";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_L1_R1_DETECTION_IS_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Returns 'True' if the detection status of the central sensors L1 and R1 (under the robot) according to the detection mode is checked, returns ' False' otherwise. \n\nIt is possible to connect up to 8 quadruple RGB sensors in parallel. Use the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_GET_L1_R1_DETECTION_TITLE"] = "[Quad RGB Sensor %1] detection states of %2 by L1 and R1";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_GET_L1_R1_DETECTION_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Returns the state of the central sensors L1 and R1 (under the robot) from 0 to 3 depending on the detection mode chosen.\nIt is possible to connect up to 8 quadruple RGB sensors in parallel. use parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DETECTION_IS_TITLE"] = "[Quad RGB Sensor %1] detecting %2 is %3";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DETECTION_IS_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Returns 'True' if the detection status of the 4 sensors L1, L2 and R1, R2 (under the robot) according to the detection mode is checked, returns 'False' otherwise.\nIt is possible to connect up to 8 quadruple RGB sensors in parallel. Use the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_GET_DETECTION_TITLE"] = "[Quad RGB Sensor %1] detection states of %2";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_GET_DETECTION_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Returns the status of the 4 sensors L1, L2 and R1, R2 (under the robot) from 0 to 15 depending on the detection mode chosen.\ nIt is possible to connect up to 8 quadruple RGB sensors in parallel. Use parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_IS_COLOR_DETECTED_TITLE"] = "[Quad RGB Sensor %1] probe %2 detects %3";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_IS_COLOR_DETECTED_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Returns 'True' if the chosen probe (L1, L2, R1, R2) detects the selected line or color, otherwise 'False'.\nIt it is possible to connect up to 8 quadruple RGB sensors in parallel. use the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_GET_PROBE_DATA_TITLE"] = "[Quad RGB sensor %1] %2 measured with probe %3";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_GET_PROBE_DATA_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Returns 'True' if the chosen probe (L1, L2, R1, R2) detects the selected line or color, otherwise 'False'.\nIt it is possible to connect up to 8 quadruple RGB sensors in parallel. use the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DATA_R"] = "red level";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DATA_G"] = "green Level";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DATA_B"] = "blue Level";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DATA_GRAY_LEVEL"] = "gray level";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DATA_LIGHT"] = "light intensity";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DATA_COLOR"] = "color";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_GET_OFFSET_TRACK_TITLE"] = "[Quad RGB Sensor %1] deviation from line";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_GET_OFFSET_TRACK_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Returns the deflection of the robot with the line from -100 to 100 mm. A negative value means a deflection to the left. Conversely, a positive value means a deflection to the right. \n\nIt is possible to branch in parallel up to 8 quadruple RGB sensors. use the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DEFINE_COLOR_TITLE"] = "[Quad RGB Sensor %1] set color to %2";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DEFINE_COLOR_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Allows you to set the color of the quad RGB sensor lights to red, green or blue. \n\nIt is possible to parallel wire up to to 8 quadruple RGB sensors. use the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_SET_COLOR_LIST_TITLE"] = "[Quad RGB Sensor %1] control LEDs at %2";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_SET_COLOR_LIST_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Allows you to set the color of the quad RGB sensor lights by choosing a color from the list. \n\nIt is possible to parallel wire up to 8 quadruple RGB sensors. use the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_SET_COLOR_RGB_TITLE"] = "[Quad RGB Sensor %1] control LEDs at R %2 G %3 B %4";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_SET_COLOR_RGB_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Allows you to set the color of the quad RGB sensor lights by setting RGB from 0 to 255. \n\nIt is possible to parallel connect up to 8 quadruple RGB sensors. use the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_SET_COLOR_PALETTE_TITLE"] = "[Quad RGB Sensor %1] control LEDs at %2";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_SET_COLOR_PALETTE_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Allows you to set the color of the quad RGB sensor lights by choosing a color from the palette. \n\nIt is possible to parallel wire up to 8 quadruple RGB sensors. use the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_SET_COLOR_TOLERANCE"] = "tolerance";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_CLOSE_LED_TITLE"] = "[Quad RGB Sensor %1] turn off LEDs";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_CLOSE_LED_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Allows you to turn off the quad RGB sensor LEDs. \n\nUp to 8 quad RGB sensors can be connected in parallel. use the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_CALIBRATE_TITLE"] = "[Quad RGB Sensor %1] calibrate";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_CALIBRATE_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Allows calibration of line/color sensors. \n\nUp to 8 quadruple RGB sensors can be connected in parallel. the parameter (1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_COLOR_MODE_TITLE"] = "[Quad RGB Sensor] set detection mode to %1";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_COLOR_MODE_TOOLTIP"] = IMG_MBUILD_SENSORS_QUAD_RGB_SENSOR + Blockly.Tooltip.SEP + "Allows you to define the color detection mode. \n\nIt is possible to connect up to 8 quadruple RGB sensors in parallel. use the parameter ( 1-8) to retrieve the desired value.";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DETECTION_MODE_STANDARD"] = "standard";
Blockly.Msg["MBUILD_SENSORS_QUAD_RGB_DETECTION_MODE_ENHANCE"] = "color enhancement";
// Network - Wi-Fi
Blockly.Msg['CYBERPI_WIFI_CONNECT_TITLE'] = '[WiFi] connect the CyberPi to the network: name %1 password %2';
Blockly.Msg['CYBERPI_WIFI_CONNECT_TOOLTIP'] = 'Allows you to connect the CyberPi card to a WiFi network.';
Blockly.Msg['CYBERPI_WIFI_IS_CONNECT_TITLE'] = '[WiFi] CyberPi is connected?';
Blockly.Msg['CYBERPI_WIFI_IS_CONNECT_TOOLTIP'] = 'Checks if the CyberPi card is connected to a WiFi network.';
Blockly.Msg['CYBERPI_WIFI_DISCONNECT_TITLE'] = '[WiFi] %1 the CyberPi';
Blockly.Msg['CYBERPI_WIFI_DISCONNECT_ACTION'] = "disconnect";
Blockly.Msg['CYBERPI_WIFI_RECONNECT_ACTION'] = "reconnect";
Blockly.Msg['CYBERPI_WIFI_DISCONNECT_TOOLTIP'] = 'Allows you to disconnect or reconnect the CyberPi card to the WiFi network.';
// Network - LAN
Blockly.Msg['CYBERPI_WIFI_BROADCAST_SET_TITLE'] = '[LAN] broadcasts message %1 value %2';
Blockly.Msg['CYBERPI_WIFI_BROADCAST_SET_TOOLTIP'] = 'Allows you to send a message containing a value on a WiFi network. All CyberPi cards connected to a network must use the same communication channel. Without connection to the router, CyberPi cards use the same channel by default and can thus communicate with each other on the LAN; When the CyberPi card is connected to a router, its channel depends on the router setting, which may be different from the default channel, and therefore it may fail to communicate with another CyberPi card that is not connected to the router. Therefore, to ensure good communication, if you are using a router, connect all CyberPi cards to the same local network.';
Blockly.Msg['CYBERPI_WIFI_BROADCAST_GET_TITLE'] = '[LAN] broadcast message value %1';
Blockly.Msg['CYBERPI_WIFI_BROADCAST_GET_TOOLTIP'] = 'Allows you to receive the value of the message broadcast on a WiFi network. It is not mandatory to connect to an existing WiFi network to send a message. In this case, the CyberPi has created a local LAN.';