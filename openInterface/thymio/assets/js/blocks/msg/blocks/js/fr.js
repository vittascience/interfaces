/**
 * @fileoverview English messages for Thymio. (EN)
 */
'use strict';
// Display THYMIO
Blockly.Msg['DISPLAY_TURNOFF_ALL_LEDS_TITLE'] = 'éteindre toutes les LEDs';
Blockly.Msg['DISPLAY_TURNOFF_ALL_LEDS_TOOLTIP'] = 'Permet d\'éteindre toutes les LEDs du robot Thymio.';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_TITLE'] = 'éteindre la LED %1';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_TOOLTIP'] = 'Permet d\'éteindre les différentes LED RGB du robot Thymio.';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_TOP'] = 'du haut';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_BOTTOM_RIGHT'] = 'du bas à droite';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_BOTTOM_LEFT'] = 'du bas à gauche';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_CIRCLE'] = 'du cercle avant';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_HORIZONTAL_SENSORS'] = 'des capteurs horizontaux';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_VERTICAL_SENSORS'] = 'des capteurs du sol';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_LED_RC'] = 'de la télécommande';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_LED_BUTTONS'] = 'des boutons';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_LED_TEMPERATURE'] = 'de température';
Blockly.Msg['DISPLAY_RGBLED_TURNOFF_LED_MICROPHONE'] = 'du microphone';
Blockly.Msg['DISPLAY_RGBLED_SETCOLOR_TITLE'] = 'allumer la LED %1 en R%2 G%3 B%4';
Blockly.Msg['DISPLAY_RGBLED_SETCOLOR_TOOLTIP'] = 'Permet d\'allumer les différentes LED RGB du robot Thymio.';
Blockly.Msg['DISPLAY_RGBLED_SETCOLOR_PALETTE_TITLE'] = 'allumer la LED %1 à %2';
Blockly.Msg['DISPLAY_RGBLED_SETCOLOR_PALETTE_TOOLTIP'] = 'Permet d\'allumer les différentes LED RGB du robot Thymio à l\'aide d\'une palette de couleur.';
Blockly.Msg['DISPLAY_RGBLED_SETCOLOR_TOP'] = 'du haut';
Blockly.Msg['DISPLAY_RGBLED_SETCOLOR_BOTTOM_RIGHT'] = 'du bas à droite';
Blockly.Msg['DISPLAY_RGBLED_SETCOLOR_BOTTOM_LEFT'] = 'du bas à gauche';
Blockly.Msg['DISPLAY_CIRCLELED_TURNON_TITLE'] = 'Allumer la LED du cercle %1 avant %2 avant droite %3 droite %4 arrière droite %5 arrière %6 arrière gauche %7 gauche %8 avant gauche %9';
Blockly.Msg['DISPLAY_CIRCLELED_TURNON_TOOLTIP'] = 'Permet d\'allumer les différentes LED du cercle avant du robot Thymio.';
Blockly.Msg['DISPLAY_PROXIMITYLED_TURNON_TITLE'] = 'Allumer la LED de capteur de proximité %1 avant gauche %2 avant gauche central %3 avant central gauche %4 avant central droite %5 avant droite central %6 avant droite %7 arrière gauche %8 arrière droite %9';
Blockly.Msg['DISPLAY_PROXIMITYLED_TURNON_TOOLTIP'] = 'Permet d\'allumer les différentes LED du cercle avant du robot Thymio.';
Blockly.Msg['DISPLAY_GROUNDSENSORLED_TURNON_TITLE'] = 'Allumer la LED des capteurs de sol gauche %1 et droite %2';
Blockly.Msg['DISPLAY_GROUNDSENSORLED_TURNON_TOOLTIP'] = 'Permet d\'allumer les différentes LED des capteurs de sol du robot Thymio.';
Blockly.Msg['DISPLAY_LEDBUTTONS_TURNON_TITLE'] = 'Allumer la LED des boutons %1 avant %2 arrière %3 %4 gauche %5 droite %6';
Blockly.Msg['DISPLAY_LEDBUTTONS_TURNON_TOOLTIP'] = 'Permet d\'allumer les différentes LED des boutons du robot Thymio.';
Blockly.Msg['DISPLAY_TEMPERATURELED_TURNON_TITLE'] = 'Allumer la LED de température rouge %1 bleu %2';
Blockly.Msg['DISPLAY_TEMPERATURELED_TURNON_TOOLTIP'] = 'Permet d\'allumer les différentes LED de température du robot Thymio.';
Blockly.Msg['DISPLAY_RC_SOUND_SENSORLED_TURNON_TITLE'] = 'Allumer la led %1 à %2';
Blockly.Msg['DISPLAY_RC_SOUND_SENSORLED_TURNON_TOOLTIP'] = 'Permet d\'allumer les LED de la télécommande et du microphone du robot Thymio.';
Blockly.Msg['DISPLAY_RC_SENSORLED_TURNON'] = 'de la télécommande';
Blockly.Msg['DISPLAY_MIC_SENSORLED_TURNON'] = 'du microphone';
Blockly.Msg['DISPLAY_TIMER_FLASH_LED_TITLE'] = 'allumer puis éteindre les LEDs rgb avec la couleur %1 toutes les %2 seconde(s)';
Blockly.Msg['DISPLAY_TIMER_FLASH_LED_TOOLTIP'] = 'Permet d\'allumer puis d\'éteindre les LEDs du robot Thymio avec une couleur donnée et une durée donnée.';
// Input Output THYMIO

Blockly.Msg['IO_WAIT_TITLE'] = 'attendre %1 %2';
Blockly.Msg['IO_WAIT_TOOLTIP'] = 'Effectue une pause dans l\'exécution du code.';
Blockly.Msg['IO_WAIT_SECOND'] = 'seconde(s)';
Blockly.Msg['IO_WAIT_MILLISECOND'] = 'milliseconde(s)';
Blockly.Msg['IO_WAIT_MICROSECOND'] = 'microseconde(s)';
Blockly.Msg['IO_WAIT_UNTIL_TITLE'] = 'attendre jusqu\'à %1';
Blockly.Msg['IO_WAIT_UNTIL_TOOLTIP'] = 'Arrête l\'excution du code jusqu\'à ce que la condition soit satisfaite.';
Blockly.Msg['IO_SOUND_MIC_THRESHOLD_TITLE'] = 'Mettre le seuil du microphone à %1';
Blockly.Msg['IO_SOUND_MIC_THRESHOLD_TOOLTIP'] = 'Permet de définir le seuil du microphone.';
Blockly.Msg['IO_INITCHRONOMETER_TITLE'] = 'démarrer le chronomètre';
Blockly.Msg['IO_INITCHRONOMETER_TOOLTIP'] = 'Initialise un chronomètre à 0 (en secondes).';
Blockly.Msg['IO_GETCHRONOMETER_TITLE'] = 'valeur du chronomètre en %1';
Blockly.Msg['IO_GETCHRONOMETER_TOOLTIP'] = 'Renvoie la valeur du chronomètre à partir de l\'initialisation (en secondes ou millisecondes).';
// THYMIO BUTTONS
Blockly.Msg['IO_BUTTON_STATE_TITLE'] = 'bouton %1 appuyé';
Blockly.Msg['IO_BUTTON_STATE_TOOLTIP'] = '';
Blockly.Msg['IO_BUTTON_STATE_PRESSED'] = 'est';
Blockly.Msg['IO_BUTTON_STATE_NOT_PRESSED'] = 'n\'est pas';
Blockly.Msg['IO_IS_BUTTON_PRESSED_TITLE'] = 'bouton %1 appuyé';
Blockly.Msg['IO_IS_BUTTON_PRESSED_TOOLTIP'] = 'Renvoie 1 si le bouton est appuyé, 0 sinon.';
Blockly.Msg['IO_BUTTON_CENTER'] = 'central';
Blockly.Msg['IO_BUTTON_FORWARD'] = 'avant';
Blockly.Msg['IO_BUTTON_BACKWARD'] = 'arrière';
Blockly.Msg['IO_BUTTON_LEFT'] = 'gauche';
Blockly.Msg['IO_BUTTON_RIGHT'] = 'droite';
Blockly.Msg['IO_IS_PRESSED'] = 'est';
Blockly.Msg['IO_IS_RELEASED'] = 'a été';
Blockly.Msg['IO_ON_BUTTON_PRESSED_TITLE'] = 'quand le bouton %1 %2 appuyé';
Blockly.Msg['IO_ON_BUTTON_PRESSED_TOOLTIP'] = 'Exécute le code quand le bouton est appuyé.';
// THYMIO EVENTS
Blockly.Msg['IO_ON_BUTTON_PRESSED_EVENT_TITLE'] = 'quand le bouton %1 est appuyé';
Blockly.Msg['IO_ON_BUTTON_PRESSED_EVENT_TOOLTIP'] = 'Créer un évènement et exécuter le code quand le bouton est appuyé.';
Blockly.Msg['IO_ON_TIMER_EVENT_TITLE'] = 'lorsque le %1 timer est arrive à expiration';
Blockly.Msg['IO_ON_TIMER_EVENT_TOOLTIP'] = 'Réagir à un minuteur arrivé à expiration';
Blockly.Msg['IO_ON_PROXIMITY_EVENT_TITLE'] = 'quand le capteur %1 détecte %2';
Blockly.Msg['IO_ON_PROXIMITY_EVENT_TOOLTIP'] = 'Créer un évènement et exécuter le code quand le capteur de proximité détecte un objet ou non.';
Blockly.Msg['IO_TIMER_MS_TITLE'] = 'Démarrer le timer %1 avec un pas de  %2 ms';
Blockly.Msg['IO_TIMER_MS_TOOLTIP'] = 'Démarrer le timer avec un pas de 1 ms';
Blockly.Msg['IO_TIMER_MS_1'] = 'premier';
Blockly.Msg['IO_TIMER_MS_2'] = 'second';
Blockly.Msg['IO_ON_PROXIMITY_LINE_EVENT_TITLE'] = 'quand le capteur de sol %1 détecte %2';
Blockly.Msg['IO_ON_PROXIMITY_LINE_EVENT_TOOLTIP'] = 'Créer un évènement et exécuter le code quand le capteur de sol détecte une ligne ou non.';
Blockly.Msg['IO_ON_TAP_EVENT_TITLE'] = 'lorsqu\'un choc est détecté';
Blockly.Msg['IO_ON_TAP_EVENT_TOOLTIP'] = 'Créer un évènement et exécuter le code quand un choc est détecté.';
Blockly.Msg['IO_ON_COM_EVENT_TITLE'] = 'quand un message du %1 est reçu';
Blockly.Msg['IO_ON_COM_EVENT_TOOLTIP'] = 'Créer un évènement et exécuter le code quand la télécommande détecte un signal ou non.';
Blockly.Msg['IO_ON_COM_RC5'] = 'télécommande';
Blockly.Msg['IO_ON_COM_IR'] = 'communication infrarouge';
Blockly.Msg['IO_ON_EVENT_BASIC_TITLE'] = 'quand %1 mis à jour';
Blockly.Msg['IO_ON_EVENT_BASIC_TOOLTIP'] = 'Créer un évènement et exécuter le code quand la valeur est mise à jour.';
Blockly.Msg['IO_ON_EVENT_BASIC_BUTTONS'] = 'les boutons sont';
Blockly.Msg['IO_ON_EVENT_BASIC_PROXIMITY'] = 'les capteurs de proximité sont';
Blockly.Msg['IO_ON_EVENT_BASIC_TEMPERATURE'] = 'la température est';
Blockly.Msg['IO_ON_EVENT_BASIC_ACC'] = 'l\'accéléromètre est';
Blockly.Msg['IO_ON_EVENT_BASIC_MOTORS'] = 'les moteurs sont';
Blockly.Msg['IO_ON_COM_EVENT_TITLE'] = 'quand un message %1 est reçu';
Blockly.Msg['IO_ON_COM_EVENT_TOOLTIP'] = 'Créer un évènement et exécuter le code quand un message est reçu.';
Blockly.Msg['IO_ON_COM_RC5'] = 'de la télécommande';
Blockly.Msg['IO_ON_COM_IR'] = 'communication infrarouge';
Blockly.Msg['IO_ON_EVENT_BASIC_TITLE'] = 'quand %1 mis à jour';
Blockly.Msg['IO_ON_EVENT_BASIC_TOOLTIP'] = 'Créer un évènement et exécuter le code quand la valeur est mise à jour.';
Blockly.Msg['IO_ON_EVENT_BASIC_BUTTONS'] = 'les boutons sont';
Blockly.Msg['IO_ON_EVENT_BASIC_PROXIMITY'] = 'les capteurs de proximité sont';
Blockly.Msg['IO_ON_EVENT_BASIC_TEMPERATURE'] = 'la température est';
Blockly.Msg['IO_ON_EVENT_BASIC_ACC'] = 'l\'accéléromètre est';
Blockly.Msg['IO_ON_EVENT_BASIC_MOTORS'] = 'les moteurs sont';
// SOUNDS
Blockly.Msg['IO_EVENT_MICROPHONE_TITLE'] = 'quand le microphone %1';
Blockly.Msg['IO_EVENT_MICROPHONE_TOOLTIP'] = 'Réagir à un event sonore';
Blockly.Msg['IO_EVENT_MICROPHONE_THRESHOLD'] = 'dépasse un seuil';
Blockly.Msg['IO_EVENT_MICROPHONE_SOUND_FINISHED'] = 'a fini de jouer';
// Communication - Serial connection
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_TITLE'] = 'écrire dans la console %1';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_TOOLTIP'] = 'Permet d\'écrire des données dans la console.';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_WITH'] = 'avec';
Blockly.Msg['COMMUNICATION_SERIAL_WRITE_NEWLINES'] = 'saut.s de ligne';
Blockly.Msg['COMMUNICATION_WRITEGRAPH_TITLE'] = 'tracer le graphe';
Blockly.Msg['COMMUNICATION_WRITEGRAPH_TOOLTIP'] = 'Ce bloc permet d\'écrire des données (numériques) qui seront visibles dans le traceur. Il peut être utilisé avec un ou plusieurs blocs au format "Nom" et "Données". Pour visualiser les graphiques, cliquer sur l\'icone \'Mode Graphique\' dans la console.';
Blockly.Msg['COMMUNICATION_DATA'] = 'Donnée';
Blockly.Msg['COMMUNICATION_PRINT_DATAS_TITLE'] = 'Nom %1 Valeur %2';
Blockly.Msg['COMMUNICATION_PRINT_DATAS_TOOLTIP'] = 'Ce bloc est à utiliser avec le bloc "Tracer le graphique". Il doit lui-même contenir le nom de la valeur à afficher (texte), et la valeur en question (nombre).';
// Sensors
Blockly.Msg['SENSORS_READ_OBSTACLE_TITLE'] = 'le capteur de proximité %1 détecte %2';
Blockly.Msg['SENSORS_READ_OBSTACLE_TOOLTIP'] = 'Permet de détecter si un obstacle est présent.';
Blockly.Msg['SENSORS_GET_PROXIMITY_DETECT_TRUE'] = 'quelque chose';
Blockly.Msg['SENSORS_GET_PROXIMITY_DETECT_FALSE'] = 'rien';
Blockly.Msg['SENSORS_GET_LINE_TITLE'] = 'le capteur de sol %1 détecte %2';
Blockly.Msg['SENSORS_GET_LINE_TOOLTIP'] = 'Permet de detecter si une ligne est présente.';
Blockly.Msg['SENSORS_GET_LINE_LEFT'] = 'gauche';
Blockly.Msg['SENSORS_GET_LINE_RIGHT'] = 'droite';
Blockly.Msg['SENSORS_GET_LINE_BOTH'] = 'gauche & droite';
Blockly.Msg['SENSORS_GET_LINE_BLACK'] = 'noir';
Blockly.Msg['SENSORS_GET_LINE_WHITE'] = 'blanc';
Blockly.Msg['SENSORS_GET_LINE_SOMETHING'] = 'quelque chose';
Blockly.Msg['SENSORS_GET_LINE_NOTHING'] = 'rien';
Blockly.Msg['SENSORS_GET_LINE_BLACK'] = 'du noir';
Blockly.Msg['SENSORS_GET_LINE_WHITE'] = 'du blanc';

// Sensors - Proximity
Blockly.Msg['SENSORS_GET_PROXIMITY_TITLE'] = 'valeur du capteur de proximité %1';
Blockly.Msg['SENSORS_GET_PROXIMITY_TOOLTIP'] = 'Récupère la valeur d\'un capteur de proximité.';
Blockly.Msg['SENSORS_GET_PROXIMITY_FRONT_LEFT'] = 'avant gauche';
Blockly.Msg['SENSORS_GET_PROXIMITY_FRONT_LEFT_CENTRAL'] = 'avant gauche/central';
Blockly.Msg['SENSORS_GET_PROXIMITY_FRONT_CENTRAL'] = 'avant central';
Blockly.Msg['SENSORS_GET_PROXIMITY_FRONT_RIGHT_CENTRAL'] = 'avant droit/central';
Blockly.Msg['SENSORS_GET_PROXIMITY_FRONT_RIGHT'] = 'avant droit';
Blockly.Msg['SENSORS_GET_PROXIMITY_BACK_LEFT'] = 'arrière gauche';
Blockly.Msg['SENSORS_GET_PROXIMITY_BACK_RIGHT'] = 'arrière droit';
Blockly.Msg['SENSORS_GET_PROXIMITY_GROUND_LEFT'] = 'de sol gauche';
Blockly.Msg['SENSORS_GET_PROXIMITY_GROUND_RIGHT'] = 'de sol droit';
Blockly.Msg['SENSORS_MOTOR_SPEED_TITLE'] = 'vitesse du moteur %1';
Blockly.Msg['SENSORS_MOTOR_SPEED_TOOLTIP'] = 'Permet de lire la vitesse d\'un des deux moteurs (droite ou gauche).';
Blockly.Msg['SENSORS_MOTOR_LEFT'] = 'gauche';
Blockly.Msg['SENSORS_MOTOR_RIGHT'] = 'droite';
Blockly.Msg['SENSORS_GET_ACCELEROMETER_TITLE'] = ' valeur %1 de l\'accéléromètre';
Blockly.Msg['SENSORS_GET_ACCELEROMETER_TOOLTIP'] = 'Permet de lire les valeurs de l\'accéléromètre.';
Blockly.Msg['SENSORS_GET_TEMPERATURE_TITLE'] = 'température';
Blockly.Msg['SENSORS_GET_TEMPERATURE_TOOLTIP'] = 'Permet de lire la valaur de température.';
Blockly.Msg['SENSORS_GET_MICROPHONE_TITLE'] = 'valeur d\'intensité du microphone';
Blockly.Msg['SENSORS_GET_MICROPHONE_TOOLTIP'] = 'Permet de lire la valeur de l\'intensité du microphone.';
Blockly.Msg['SENSORS_GET_IR_COMMUNICATION_TITLE'] = 'valeur reçue de la communication IR';
Blockly.Msg['SENSORS_GET_IR_COMMUNICATION_TOOLTIP'] = 'Permet de lire la valeur reçue de la communication infrarouge.';
Blockly.Msg['SENSORS_GET_IR_REMOTE_TITLE'] = 'valeur %1 reçue de la télécommande';
Blockly.Msg['SENSORS_GET_IR_REMOTE_TOOLTIP'] = 'Permet de lire la valeur reçue de la télécommande infrarouge.';
Blockly.Msg['SENSORS_GET_IR_ADRESS'] = 'adresse';
Blockly.Msg['SENSORS_GET_IR_COMMAND'] = 'commande';
// Actuators
Blockly.Msg['ROBOT_MOVE_TITLE'] = 'commencer à rouler en %1 avec la vitesse %2';
Blockly.Msg['ROBOT_MOVE_TOOLTIP'] = 'Permet de contrôler les moteurs du robot Thymio pour avancer ou reculer.';
Blockly.Msg['ROBOT_MOVE_FORWARD'] = 'avant';
Blockly.Msg['ROBOT_MOVE_BACKWARD'] = 'arrière';
Blockly.Msg['ROBOT_ROTATE_CLOCK_TITLE'] = 'pivoter dans %1 avec la vitesse %2';
Blockly.Msg['ROBOT_ROTATE_CLOCK_TOOLTIP'] = 'Pivote le Thymio dans le sens horaire ou anti-horaire.';
Blockly.Msg['ROBOT_MOVE_CLOCK_WISE'] = 'le sens horaire';
Blockly.Msg['ROBOT_MOVE_COUNTER_CLOCK_WISE'] = 'le sens anti-horaire';
Blockly.Msg['ROBOT_ROTATE_FOREVER_TITLE'] = 'tourner en %1 avec la vitesse %2';
Blockly.Msg['ROBOT_ROTATE_FOREVER_TOOLTIP'] = 'Pivote le Thymio sur la gauche ou la droite';
Blockly.Msg['ROBOT_ROTATE_FRONT_RIGHT'] = 'avant à droite';
Blockly.Msg['ROBOT_ROTATE_FRONT_LEFT'] = 'avant à gauche';
Blockly.Msg['ROBOT_ROTATE_BACK_RIGHT'] = 'arrière à droite';
Blockly.Msg['ROBOT_ROTATE_BACK_LEFT'] = 'arrière à gauche';
Blockly.Msg['ROBOT_STOP_SINGLE_MOTOR_TITLE'] = 'arrêter le moteur %1';
Blockly.Msg['ROBOT_STOP_SINGLE_MOTOR_TOOLTIP'] = 'Arrêter un des deux moteurs du Thymio.';
Blockly.Msg['ROBOT_STOP_SINGLE_MOTOR_LEFT'] = 'gauche';
Blockly.Msg['ROBOT_STOP_SINGLE_MOTOR_RIGHT'] = 'droite';
Blockly.Msg['ROBOT_STOP_TITLE'] = 'arrêter les moteurs';
Blockly.Msg['ROBOT_STOP_TOOLTIP'] = 'Stop les moteurs du Thymio.';
Blockly.Msg['ROBOT_CHANGE_SINGLE_MOTOR_SPEED_TITLE'] = 'contrôler le moteur %1 direction %2 vitesse %3';
Blockly.Msg['ROBOT_CHANGE_SINGLE_MOTOR_SPEED_TOOLTIP'] = 'Changer la vitesse d\'un des deux moteurs du Thymio.';
Blockly.Msg['ROBOT_CHANGE_SINGLE_MOTOR_SPEED_LEFT'] = 'gauche';
Blockly.Msg['ROBOT_CHANGE_SINGLE_MOTOR_SPEED_RIGHT'] = 'droite';
// Actuators - Sound
Blockly.Msg['SOUND_STOP_SOUND_SYSTEM_TITLE'] = 'arrêter de jouer le son';
Blockly.Msg['SOUND_STOP_SOUND_SYSTEM_TOOLTIP'] = 'Arrête de jouer le son.';
Blockly.Msg['SOUND_PLAY_SOUND_TITLE'] = 'jouer le son %1';
Blockly.Msg['SOUND_PLAY_SOUND_TOOLTIP'] = 'Joue un son system.';
Blockly.Msg['SOUND_PLAY_SOUND_SOUND_1'] = 'd\'allumage';
Blockly.Msg['SOUND_PLAY_SOUND_SOUND_2'] = 'd\'arret';
Blockly.Msg['SOUND_PLAY_SOUND_SOUND_3'] = 'des boutons fléches';
Blockly.Msg['SOUND_PLAY_SOUND_SOUND_4'] = 'du bouton central';
Blockly.Msg['SOUND_PLAY_SOUND_SOUND_5'] = 'peureux';
Blockly.Msg['SOUND_PLAY_SOUND_SOUND_6'] = 'collision';
Blockly.Msg['SOUND_PLAY_SOUND_SOUND_7'] = 'cible amicale';
Blockly.Msg['SOUND_PLAY_SOUND_SOUND_8'] = 'cible detectée';
Blockly.Msg['SOUND_PLAY_SOUND_FREQ_TITLE'] = 'jouer une note %1 Hz pendant %2 /60 secondes';
Blockly.Msg['SOUND_PLAY_SOUND_FREQ_TOOLTIP'] = 'Joue une note à une fréquence donnée pendant une durée donnée.';

Blockly.Msg['MATH_THYMIO_RESULT_DEFAULT_NAME'] = 'resultat';
Blockly.Msg['VARIABLES_DEFAULT_NAME1'] = 'A';
Blockly.Msg['VARIABLES_DEFAULT_NAME2'] = 'B';
Blockly.Msg['MATH_THYMIO_COPY_TITLE'] = 'copier %1 dans %2';
Blockly.Msg['MATH_THYMIO_COPY_TOOLTIP'] = 'Copie la valeur de "A" vers "B".';
Blockly.Msg['MATH_THYMIO_ADD_TITLE'] = 'ajouter %1 à %2 dans %3';
Blockly.Msg['MATH_THYMIO_ADD_TOOLTIP'] = 'Ajoute la valeur de "A" à "B" et stocke le résultat dans "C".';
Blockly.Msg['MATH_THYMIO_SUBTRACT_TITLE'] = 'soustraire %1 à %2 dans %3';
Blockly.Msg['MATH_THYMIO_SUBTRACT_TOOLTIP'] = 'Soustrait la valeur de "A" à "B" et stocke le résultat dans "C".';
Blockly.Msg['MATH_THYMIO_MULTIPLY_TITLE'] = 'multiplier %1 par %2 dans %3';
Blockly.Msg['MATH_THYMIO_MULTIPLY_TOOLTIP'] = 'Multiplie la valeur de "A" par "B" et stocke le résultat dans "C".';
Blockly.Msg['MATH_THYMIO_DIVIDE_TITLE'] = 'diviser %1 par %2 dans %3';
Blockly.Msg['MATH_THYMIO_DIVIDE_TOOLTIP'] = 'Division entière de la valeur de  "A" par "B" et stocke le résultat dans "C".';
Blockly.Msg['MATH_THYMIO_MIN_TITLE'] = 'minimum de %1 et %2 dans %3';
Blockly.Msg['MATH_THYMIO_MIN_TOOLTIP'] = 'Stocke le minimum entre "A" et "B" dans "C".';
Blockly.Msg['MATH_THYMIO_MAX_TITLE'] = 'maximum de %1 et %2 dans %3';
Blockly.Msg['MATH_THYMIO_MAX_TOOLTIP'] = 'Stocke le maximum entre "A" et "B" dans "C".';
Blockly.Msg['MATH_THYMIO_RANDOM_TITLE'] = 'nombre aléatoire dans %1';
Blockly.Msg['MATH_THYMIO_RANDOM_TOOLTIP'] = 'Stocke un nombre aléatoire dans "resultat".';
Blockly.Msg['MATH_THYMIO_SIN_TITLE'] = 'sinus de %1 dans %2';
Blockly.Msg['MATH_THYMIO_SIN_TOOLTIP'] = 'Stocke la valeur du sinus de l\'angle "A" (en radians) dans "resultat".';
Blockly.Msg['MATH_THYMIO_COS_TITLE'] = 'cosinus de %1 dans %2';
Blockly.Msg['MATH_THYMIO_COS_TOOLTIP'] = 'Stocke la valeur du cosinus de l\'angle "A" (en radians) dans "resultat".';
Blockly.Msg['MATH_THYMIO_SQRT_TITLE'] = 'racine carrée de %1 dans %2';
Blockly.Msg['MATH_THYMIO_SQRT_TOOLTIP'] = 'Stocke la racine carrée de "A" dans "resultat".';
