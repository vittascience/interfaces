{"version":3,"sources":["generators/dart/lists.ts","generators/dart/logic.ts","generators/dart/loops.ts","generators/dart/math.ts","generators/dart/procedures.ts","generators/dart/text.ts","generators/dart/variables.ts","generators/dart/dart_generator.ts","generators/dart/variables_dynamic.ts","generators/dart.ts"],"names":["lists_create_empty","block","generator","Order","ATOMIC","lists_create_with","elements","Array","itemCount_","i","valueToCode","NONE","join","lists_repeat","element","UNARY_POSTFIX","lists_length","lists_isEmpty","lists_indexOf","operator","getFieldValue","item","code","workspace","options","oneBasedIndex","ADDITIVE","lists_getIndex","cacheList","listVar","nameDB_","getDistinctName","NameType","VARIABLE","list","mode","where","listOrder","match","at","getAdjusted","definitions_","xVar","provideFunction_","functionName","FUNCTION_NAME_PLACEHOLDER_","Error","lists_setIndex","value","ASSIGNMENT","lists_getSublist","where1","where2","at1","at2","lists_sort","direction","type","sortFunctionName","lists_split","input","delimiter","lists_reverse","controls_if","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","OPERATORS","order","EQUALITY","RELATIONAL","argument0","argument1","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","UNARY_PREFIX","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","String","Number","branch","addLoopTrap","loopVar","endVar","isNumber","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","up","step","Math","abs","startVar","incVar","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","number","Infinity","math_arithmetic","tuple","MULTIPLICATIVE","math_single","arg","substring","math_constant","CONSTANTS","constant","math_number_property","PROPERTIES","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","returnType","args","variables","getVars","length","scrub_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","quote_","text_join","text_append","text_length","text_isEmpty","text_indexOf","text_charAt","textOrder","text_getSubstring","requiresLengthCall","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","IF_NULL","CASCADE","DartGenerator","CodeGenerator","constructor","name","isInitialized","key","addReservedWords","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","devVarList","allDeveloperVariables","push","getName","DEVELOPER_VARIABLE","allUsedVarModels","getId","finish","imports","definitions","def","replace","scrubNakedValue","line","string","multiline_quote_","split","map","lines","thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","getProcedureDef","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","delta","negate","defaultAtIndex","orderForInput","floor","$jscomp$tmp$exports$module$name","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","text_prompt","dartGenerator","generators","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"dart_compressed.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for list blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.lists\r\n\r\nimport type {CreateWithBlock} from '../../blocks/lists.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\n// RESERVED WORDS: 'Math'\r\n\r\nexport function lists_create_empty(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Create an empty list.\r\n  return ['[]', Order.ATOMIC];\r\n}\r\n\r\nexport function lists_create_with(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Create a list with any number of elements of any type.\r\n  const createWithBlock = block as CreateWithBlock;\r\n  const elements = new Array(createWithBlock.itemCount_);\r\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\r\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\r\n  }\r\n  const code = '[' + elements.join(', ') + ']';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function lists_repeat(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Create a list with one element repeated.\r\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\r\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  const code = 'new List.filled(' + repeatCount + ', ' + element + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_length(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const list =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\r\n  return [list + '.length', Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_isEmpty(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const list =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\r\n  return [list + '.isEmpty', Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_indexOf(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Find an item in the list.\r\n  const operator =\r\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\r\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const list =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\r\n  const code = list + '.' + operator + '(' + item + ')';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    return [code + ' + 1', Order.ADDITIVE];\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_getIndex(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] | string {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const listOrder =\r\n    where === 'RANDOM' || where === 'FROM_END'\r\n      ? Order.NONE\r\n      : Order.UNARY_POSTFIX;\r\n  let list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  // Closure, which accesses and modifies 'list'.\r\n  function cacheList() {\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmp_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    const code = 'List ' + listVar + ' = ' + list + ';\\n';\r\n    list = listVar;\r\n    return code;\r\n  }\r\n  // If `list` would be evaluated more than once (which is the case for\r\n  // RANDOM REMOVE and FROM_END) and is non-trivial, make sure to access it\r\n  // only once.\r\n  if (\r\n    ((where === 'RANDOM' && mode === 'REMOVE') || where === 'FROM_END') &&\r\n    !list.match(/^\\w+$/)\r\n  ) {\r\n    // `list` is an expression, so we may not evaluate it more than once.\r\n    if (where === 'RANDOM') {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      // We can use multiple statements.\r\n      let code = cacheList();\r\n      const xVar = generator.nameDB_!.getDistinctName(\r\n        'tmp_x',\r\n        NameType.VARIABLE,\r\n      );\r\n      code +=\r\n        'int ' + xVar + ' = new Math.Random().nextInt(' + list + '.length);\\n';\r\n      code += list + '.removeAt(' + xVar + ');\\n';\r\n      return code;\r\n    } else {\r\n      // where === 'FROM_END'\r\n      if (mode === 'REMOVE') {\r\n        // We can use multiple statements.\r\n        const at = generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\r\n        let code = cacheList();\r\n        code += list + '.removeAt(' + list + '.length' + ' - ' + at + ');\\n';\r\n        return code;\r\n      } else if (mode === 'GET') {\r\n        const at = generator.getAdjusted(block, 'AT', 1);\r\n        // We need to create a procedure to avoid reevaluating values.\r\n        const functionName = generator.provideFunction_(\r\n          'lists_get_from_end',\r\n          `\r\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list, num x) {\r\n  x = my_list.length - x;\r\n  return my_list[x];\r\n}\r\n`,\r\n        );\r\n        const code = functionName + '(' + list + ', ' + at + ')';\r\n        return [code, Order.UNARY_POSTFIX];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const at = generator.getAdjusted(block, 'AT', 1);\r\n        // We need to create a procedure to avoid reevaluating values.\r\n        const functionName = generator.provideFunction_(\r\n          'lists_remove_from_end',\r\n          `\r\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list, num x) {\r\n  x = my_list.length - x;\r\n  return my_list.removeAt(x);\r\n}\r\n`,\r\n        );\r\n        const code = functionName + '(' + list + ', ' + at + ')';\r\n        return [code, Order.UNARY_POSTFIX];\r\n      }\r\n    }\r\n  } else {\r\n    // Either `list` is a simple variable, or we only need to refer to `list`\r\n    // once.\r\n    switch (where) {\r\n      case 'FIRST':\r\n        if (mode === 'GET') {\r\n          const code = list + '.first';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'GET_REMOVE') {\r\n          const code = list + '.removeAt(0)';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'REMOVE') {\r\n          return list + '.removeAt(0);\\n';\r\n        }\r\n        break;\r\n      case 'LAST':\r\n        if (mode === 'GET') {\r\n          const code = list + '.last';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'GET_REMOVE') {\r\n          const code = list + '.removeLast()';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'REMOVE') {\r\n          return list + '.removeLast();\\n';\r\n        }\r\n        break;\r\n      case 'FROM_START': {\r\n        const at = generator.getAdjusted(block, 'AT');\r\n        if (mode === 'GET') {\r\n          const code = list + '[' + at + ']';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'GET_REMOVE') {\r\n          const code = list + '.removeAt(' + at + ')';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'REMOVE') {\r\n          return list + '.removeAt(' + at + ');\\n';\r\n        }\r\n        break;\r\n      }\r\n      case 'FROM_END': {\r\n        const at = generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\r\n        if (mode === 'GET') {\r\n          const code = list + '[' + list + '.length - ' + at + ']';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'GET_REMOVE' || mode === 'REMOVE') {\r\n          const code = list + '.removeAt(' + list + '.length - ' + at + ')';\r\n          if (mode === 'GET_REMOVE') {\r\n            return [code, Order.UNARY_POSTFIX];\r\n          } else if (mode === 'REMOVE') {\r\n            return code + ';\\n';\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 'RANDOM':\r\n        // TODO(#7600): find better approach than casting to any to override\r\n        // CodeGenerator declaring .definitions protected.\r\n        (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n          \"import 'dart:math' as Math;\";\r\n        if (mode === 'REMOVE') {\r\n          // We can use multiple statements.\r\n          const xVar = generator.nameDB_!.getDistinctName(\r\n            'tmp_x',\r\n            NameType.VARIABLE,\r\n          );\r\n          let code =\r\n            'int ' +\r\n            xVar +\r\n            ' = new Math.Random().nextInt(' +\r\n            list +\r\n            '.length);\\n';\r\n          code += list + '.removeAt(' + xVar + ');\\n';\r\n          return code;\r\n        } else if (mode === 'GET') {\r\n          const functionName = generator.provideFunction_(\r\n            'lists_get_random_item',\r\n            `\r\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list) {\r\n  int x = new Math.Random().nextInt(my_list.length);\r\n  return my_list[x];\r\n}\r\n`,\r\n          );\r\n          const code = functionName + '(' + list + ')';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'GET_REMOVE') {\r\n          const functionName = generator.provideFunction_(\r\n            'lists_remove_random_item',\r\n            `\r\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list) {\r\n  int x = new Math.Random().nextInt(my_list.length);\r\n  return my_list.removeAt(x);\r\n}\r\n`,\r\n          );\r\n          const code = functionName + '(' + list + ')';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_getIndex).');\r\n}\r\n\r\nexport function lists_setIndex(block: Block, generator: DartGenerator) {\r\n  // Set element at index.\r\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  let list = generator.valueToCode(block, 'LIST', Order.UNARY_POSTFIX) || '[]';\r\n  const value = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  // Closure, which accesses and modifies 'list'.\r\n  function cacheList() {\r\n    if (list.match(/^\\w+$/)) {\r\n      return '';\r\n    }\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmp_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    const code = 'List ' + listVar + ' = ' + list + ';\\n';\r\n    list = listVar;\r\n    return code;\r\n  }\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'SET') {\r\n        return list + '[0] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.insert(0, ' + value + ');\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'SET') {\r\n        let code = cacheList();\r\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.add(' + value + ');\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      if (mode === 'SET') {\r\n        return list + '[' + at + '] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.insert(' + at + ', ' + value + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\r\n      let code = cacheList();\r\n      if (mode === 'SET') {\r\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code +=\r\n          list + '.insert(' + list + '.length - ' + at + ', ' + value + ');\\n';\r\n        return code;\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      let code = cacheList();\r\n      const xVar = generator.nameDB_!.getDistinctName(\r\n        'tmp_x',\r\n        NameType.VARIABLE,\r\n      );\r\n      code +=\r\n        'int ' + xVar + ' = new Math.Random().nextInt(' + list + '.length);\\n';\r\n      if (mode === 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code += list + '.insert(' + xVar + ', ' + value + ');\\n';\r\n        return code;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_setIndex).');\r\n}\r\n\r\nexport function lists_getSublist(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Get sublist.\r\n  const list =\r\n    generator.valueToCode(block, 'LIST', Order.UNARY_POSTFIX) || '[]';\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  let code;\r\n  if (\r\n    list.match(/^\\w+$/) ||\r\n    (where1 !== 'FROM_END' && where2 === 'FROM_START')\r\n  ) {\r\n    // If the list is a is a variable or doesn't require a call for length,\r\n    // don't generate a helper function.\r\n    let at1;\r\n    switch (where1) {\r\n      case 'FROM_START':\r\n        at1 = generator.getAdjusted(block, 'AT1');\r\n        break;\r\n      case 'FROM_END':\r\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.ADDITIVE);\r\n        at1 = list + '.length - ' + at1;\r\n        break;\r\n      case 'FIRST':\r\n        at1 = '0';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    let at2;\r\n    switch (where2) {\r\n      case 'FROM_START':\r\n        at2 = generator.getAdjusted(block, 'AT2', 1);\r\n        break;\r\n      case 'FROM_END':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.ADDITIVE);\r\n        at2 = list + '.length - ' + at2;\r\n        break;\r\n      case 'LAST':\r\n        // There is no second index if LAST option is chosen.\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    if (where2 === 'LAST') {\r\n      code = list + '.sublist(' + at1 + ')';\r\n    } else {\r\n      code = list + '.sublist(' + at1 + ', ' + at2 + ')';\r\n    }\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    const functionName = generator.provideFunction_(\r\n      'lists_get_sublist',\r\n      `\r\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List list, String where1, num at1, String where2, num at2) {\r\n  int getAt(String where, num at) {\r\n    if (where == 'FROM_END') {\r\n      at = list.length - 1 - at;\r\n    } else if (where == 'FIRST') {\r\n      at = 0;\r\n    } else if (where == 'LAST') {\r\n      at = list.length - 1;\r\n    } else if (where != 'FROM_START') {\r\n      throw 'Unhandled option (lists_getSublist).';\r\n    }\r\n    return at;\r\n  }\r\n  at1 = getAt(where1, at1);\r\n  at2 = getAt(where2, at2) + 1;\r\n  return list.sublist(at1, at2);\r\n}\r\n`,\r\n    );\r\n    code =\r\n      functionName +\r\n      '(' +\r\n      list +\r\n      \", '\" +\r\n      where1 +\r\n      \"', \" +\r\n      at1 +\r\n      \", '\" +\r\n      where2 +\r\n      \"', \" +\r\n      at2 +\r\n      ')';\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_sort(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Block for sorting a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\r\n  const type = block.getFieldValue('TYPE');\r\n  const sortFunctionName = generator.provideFunction_(\r\n    'lists_sort',\r\n    `\r\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List list, String type, int direction) {\r\n  var compareFuncs = {\r\n    'NUMERIC': (a, b) => (direction * a.compareTo(b)).toInt(),\r\n    'TEXT': (a, b) => direction * a.toString().compareTo(b.toString()),\r\n    'IGNORE_CASE':\r\n      (a, b) => direction *\r\n      a.toString().toLowerCase().compareTo(b.toString().toLowerCase())\r\n  };\r\n  list = new List.from(list);\r\n  var compare = compareFuncs[type];\r\n  list.sort(compare);\r\n  return list;\r\n}\r\n`,\r\n  );\r\n  return [\r\n    sortFunctionName + '(' + list + ', ' + '\"' + type + '\", ' + direction + ')',\r\n    Order.UNARY_POSTFIX,\r\n  ];\r\n}\r\n\r\nexport function lists_split(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Block for splitting text into a list, or joining a list into text.\r\n  let input = generator.valueToCode(block, 'INPUT', Order.UNARY_POSTFIX);\r\n  const delimiter = generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\r\n  const mode = block.getFieldValue('MODE');\r\n  let functionName;\r\n  if (mode === 'SPLIT') {\r\n    if (!input) {\r\n      input = \"''\";\r\n    }\r\n    functionName = 'split';\r\n  } else if (mode === 'JOIN') {\r\n    if (!input) {\r\n      input = '[]';\r\n    }\r\n    functionName = 'join';\r\n  } else {\r\n    throw Error('Unknown mode: ' + mode);\r\n  }\r\n  const code = input + '.' + functionName + '(' + delimiter + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_reverse(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Block for reversing a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  // XXX What should the operator precedence be for a `new`?\r\n  const code = 'new List.from(' + list + '.reversed)';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for logic blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.logic\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\nexport function controls_if(block: Block, generator: DartGenerator) {\r\n  // If/elseif/else condition.\r\n  let n = 0;\r\n  let code = '',\r\n    branchCode,\r\n    conditionCode;\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  do {\r\n    conditionCode =\r\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\r\n    branchCode = generator.statementToCode(block, 'DO' + n);\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code +=\r\n      (n > 0 ? 'else ' : '') +\r\n      'if (' +\r\n      conditionCode +\r\n      ') {\\n' +\r\n      branchCode +\r\n      '}';\r\n    n++;\r\n  } while (block.getInput('IF' + n));\r\n\r\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\r\n    branchCode = generator.statementToCode(block, 'ELSE');\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += ' else {\\n' + branchCode + '}';\r\n  }\r\n  return code + '\\n';\r\n}\r\n\r\nexport const controls_ifelse = controls_if;\r\n\r\nexport function logic_compare(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Comparison operator.\r\n  const OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>=',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const order =\r\n    operator === '==' || operator === '!=' ? Order.EQUALITY : Order.RELATIONAL;\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_operation(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Operations 'and', 'or'.\r\n  const operator = block.getFieldValue('OP') === 'AND' ? '&&' : '||';\r\n  const order = operator === '&&' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\r\n  let argument0 = generator.valueToCode(block, 'A', order);\r\n  let argument1 = generator.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'false';\r\n    argument1 = 'false';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    const defaultArgument = operator === '&&' ? 'true' : 'false';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_negate(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Negation.\r\n  const order = Order.UNARY_PREFIX;\r\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\r\n  const code = '!' + argument0;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_boolean(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Boolean values true and false.\r\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function logic_null(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Null data type.\r\n  return ['null', Order.ATOMIC];\r\n}\r\n\r\nexport function logic_ternary(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Ternary operator.\r\n  const value_if =\r\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\r\n  const value_then =\r\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\r\n  const value_else =\r\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\r\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\r\n  return [code, Order.CONDITIONAL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for loop blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.loops\r\n\r\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\nexport function controls_repeat_ext(block: Block, generator: DartGenerator) {\r\n  let repeats;\r\n  // Repeat n times.\r\n  if (block.getField('TIMES')) {\r\n    // Internal number.\r\n    repeats = String(Number(block.getFieldValue('TIMES')));\r\n  } else {\r\n    // External number.\r\n    repeats = generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\r\n  }\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code = '';\r\n  const loopVar = generator.nameDB_!.getDistinctName(\r\n    'count',\r\n    NameType.VARIABLE,\r\n  );\r\n  let endVar = repeats;\r\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\r\n    endVar = generator.nameDB_!.getDistinctName(\r\n      'repeat_end',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\r\n  }\r\n  code +=\r\n    'for (int ' +\r\n    loopVar +\r\n    ' = 0; ' +\r\n    loopVar +\r\n    ' < ' +\r\n    endVar +\r\n    '; ' +\r\n    loopVar +\r\n    '++) {\\n' +\r\n    branch +\r\n    '}\\n';\r\n  return code;\r\n}\r\n\r\nexport const controls_repeat = controls_repeat_ext;\r\n\r\nexport function controls_whileUntil(block: Block, generator: DartGenerator) {\r\n  // Do while/until loop.\r\n  const until = block.getFieldValue('MODE') === 'UNTIL';\r\n  let argument0 =\r\n    generator.valueToCode(\r\n      block,\r\n      'BOOL',\r\n      until ? Order.UNARY_PREFIX : Order.NONE,\r\n    ) || 'false';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  if (until) {\r\n    argument0 = '!' + argument0;\r\n  }\r\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\r\n}\r\n\r\nexport function controls_for(block: Block, generator: DartGenerator) {\r\n  // For loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\r\n  const increment = generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code;\r\n  if (\r\n    stringUtils.isNumber(argument0) &&\r\n    stringUtils.isNumber(argument1) &&\r\n    stringUtils.isNumber(increment)\r\n  ) {\r\n    // All arguments are simple numbers.\r\n    const up = Number(argument0) <= Number(argument1);\r\n    code =\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      argument0 +\r\n      '; ' +\r\n      variable0 +\r\n      (up ? ' <= ' : ' >= ') +\r\n      argument1 +\r\n      '; ' +\r\n      variable0;\r\n    const step = Math.abs(Number(increment));\r\n    if (step === 1) {\r\n      code += up ? '++' : '--';\r\n    } else {\r\n      code += (up ? ' += ' : ' -= ') + step;\r\n    }\r\n    code += ') {\\n' + branch + '}\\n';\r\n  } else {\r\n    code = '';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    let startVar = argument0;\r\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\r\n      startVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_start',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\r\n    }\r\n    let endVar = argument1;\r\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\r\n      endVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_end',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\r\n    }\r\n    // Determine loop direction at start, in case one of the bounds\r\n    // changes during loop execution.\r\n    const incVar = generator.nameDB_!.getDistinctName(\r\n      variable0 + '_inc',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += 'num ' + incVar + ' = ';\r\n    if (stringUtils.isNumber(increment)) {\r\n      code += Math.abs(Number(increment)) + ';\\n';\r\n    } else {\r\n      code += '(' + increment + ').abs();\\n';\r\n    }\r\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n    code += '}\\n';\r\n    code +=\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      startVar +\r\n      '; ' +\r\n      incVar +\r\n      ' >= 0 ? ' +\r\n      variable0 +\r\n      ' <= ' +\r\n      endVar +\r\n      ' : ' +\r\n      variable0 +\r\n      ' >= ' +\r\n      endVar +\r\n      '; ' +\r\n      variable0 +\r\n      ' += ' +\r\n      incVar +\r\n      ') {\\n' +\r\n      branch +\r\n      '}\\n';\r\n  }\r\n  return code;\r\n}\r\n\r\nexport function controls_forEach(block: Block, generator: DartGenerator) {\r\n  // For each loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  const code =\r\n    'for (var ' + variable0 + ' in ' + argument0 + ') {\\n' + branch + '}\\n';\r\n  return code;\r\n}\r\n\r\nexport function controls_flow_statements(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n) {\r\n  // Flow statements: continue, break.\r\n  let xfix = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the break/continue is triggered.\r\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (generator.STATEMENT_PREFIX) {\r\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\r\n    if (loop && !loop.suppressPrefixSuffix) {\r\n      // Inject loop's statement prefix here since the regular one at the end\r\n      // of the loop will not get executed if 'continue' is triggered.\r\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\r\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\r\n    }\r\n  }\r\n  switch (block.getFieldValue('FLOW')) {\r\n    case 'BREAK':\r\n      return xfix + 'break;\\n';\r\n    case 'CONTINUE':\r\n      return xfix + 'continue;\\n';\r\n  }\r\n  throw Error('Unknown flow statement.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for math blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.math\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\n// RESERVED WORDS: 'Math'\r\n\r\nexport function math_number(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Numeric value.\r\n  const number = Number(block.getFieldValue('NUM'));\r\n  if (number === Infinity) {\r\n    return ['double.infinity', Order.UNARY_POSTFIX];\r\n  } else if (number === -Infinity) {\r\n    return ['-double.infinity', Order.UNARY_PREFIX];\r\n  } else {\r\n    // -4.abs() returns -4 in generator due to strange order of\r\n    // operation choices.  4 is actually an operator and a number.\r\n    // Reflect this in the order.\r\n    return [String(number), number < 0 ? Order.UNARY_PREFIX : Order.ATOMIC];\r\n  }\r\n}\r\n\r\nexport function math_arithmetic(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Basic arithmetic operators, and power.\r\n  const OPERATORS: Record<string, [string | null, Order]> = {\r\n    'ADD': [' + ', Order.ADDITIVE],\r\n    'MINUS': [' - ', Order.ADDITIVE],\r\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\r\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\r\n    'POWER': [null, Order.NONE], // Handle power separately.\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const operator = tuple[0];\r\n  const order = tuple[1];\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  let code;\r\n  // Power in generator requires a special case since it has no operator.\r\n  if (!operator) {\r\n    // TODO(#7600): find better approach than casting to any to override\r\n    // CodeGenerator declaring .definitions protected.\r\n    (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n      \"import 'dart:math' as Math;\";\r\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\r\n    return [code, Order.UNARY_POSTFIX];\r\n  }\r\n  code = argument0 + operator + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function math_single(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Math operators with single operand.\r\n  const operator = block.getFieldValue('OP');\r\n  let code;\r\n  let arg;\r\n  if (operator === 'NEG') {\r\n    // Negation is a special case given its different operator precedence.\r\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_PREFIX) || '0';\r\n    if (arg[0] === '-') {\r\n      // --3 is not legal in generator.\r\n      arg = ' ' + arg;\r\n    }\r\n    code = '-' + arg;\r\n    return [code, Order.UNARY_PREFIX];\r\n  }\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  if (operator === 'ABS' || operator.substring(0, 5) === 'ROUND') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_POSTFIX) || '0';\r\n  } else if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\r\n  } else {\r\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  }\r\n  // First, handle cases which generate values that don't need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'ABS':\r\n      code = arg + '.abs()';\r\n      break;\r\n    case 'ROOT':\r\n      code = 'Math.sqrt(' + arg + ')';\r\n      break;\r\n    case 'LN':\r\n      code = 'Math.log(' + arg + ')';\r\n      break;\r\n    case 'EXP':\r\n      code = 'Math.exp(' + arg + ')';\r\n      break;\r\n    case 'POW10':\r\n      code = 'Math.pow(10,' + arg + ')';\r\n      break;\r\n    case 'ROUND':\r\n      code = arg + '.round()';\r\n      break;\r\n    case 'ROUNDUP':\r\n      code = arg + '.ceil()';\r\n      break;\r\n    case 'ROUNDDOWN':\r\n      code = arg + '.floor()';\r\n      break;\r\n    case 'SIN':\r\n      code = 'Math.sin(' + arg + ' / 180 * Math.pi)';\r\n      break;\r\n    case 'COS':\r\n      code = 'Math.cos(' + arg + ' / 180 * Math.pi)';\r\n      break;\r\n    case 'TAN':\r\n      code = 'Math.tan(' + arg + ' / 180 * Math.pi)';\r\n      break;\r\n  }\r\n  if (code) {\r\n    return [code, Order.UNARY_POSTFIX];\r\n  }\r\n  // Second, handle cases which generate values that may need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'LOG10':\r\n      code = 'Math.log(' + arg + ') / Math.log(10)';\r\n      break;\r\n    case 'ASIN':\r\n      code = 'Math.asin(' + arg + ') / Math.pi * 180';\r\n      break;\r\n    case 'ACOS':\r\n      code = 'Math.acos(' + arg + ') / Math.pi * 180';\r\n      break;\r\n    case 'ATAN':\r\n      code = 'Math.atan(' + arg + ') / Math.pi * 180';\r\n      break;\r\n    default:\r\n      throw Error('Unknown math operator: ' + operator);\r\n  }\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function math_constant(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\r\n  const CONSTANTS: Record<string, [string, Order]> = {\r\n    'PI': ['Math.pi', Order.UNARY_POSTFIX],\r\n    'E': ['Math.e', Order.UNARY_POSTFIX],\r\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\r\n    'SQRT2': ['Math.sqrt2', Order.UNARY_POSTFIX],\r\n    'SQRT1_2': ['Math.sqrt1_2', Order.UNARY_POSTFIX],\r\n    'INFINITY': ['double.infinity', Order.ATOMIC],\r\n  };\r\n  type ConstantOption = keyof typeof CONSTANTS;\r\n  const constant = block.getFieldValue('CONSTANT') as ConstantOption;\r\n  if (constant !== 'INFINITY') {\r\n    // TODO(#7600): find better approach than casting to any to override\r\n    // CodeGenerator declaring .definitions protected.\r\n    (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n      \"import 'dart:math' as Math;\";\r\n  }\r\n  return CONSTANTS[constant];\r\n}\r\n\r\nexport function math_number_property(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Check if a number is even, odd, prime, whole, positive, or negative\r\n  // or if it is divisible by certain number. Returns true or false.\r\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\r\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.EQUALITY],\r\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.EQUALITY],\r\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.EQUALITY],\r\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.EQUALITY],\r\n    'PRIME': [null, Order.NONE, Order.UNARY_POSTFIX],\r\n  };\r\n  type PropertyOption = keyof typeof PROPERTIES;\r\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\r\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\r\n  const numberToCheck =\r\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\r\n  let code;\r\n  if (dropdownProperty === 'PRIME') {\r\n    // Prime is a special case as it is not a one-liner test.\r\n    // TODO(#7600): find better approach than casting to any to override\r\n    // CodeGenerator declaring .definitions protected.\r\n    (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n      \"import 'dart:math' as Math;\";\r\n    const functionName = generator.provideFunction_(\r\n      'math_isPrime',\r\n      `\r\nbool ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\r\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\r\n  if (n == 2 || n == 3) {\r\n    return true;\r\n  }\r\n  // False if n is null, negative, is 1, or not whole.\r\n  // And false if n is divisible by 2 or 3.\r\n  if (n == null || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {\r\n    return false;\r\n  }\r\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\r\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\r\n    if (n % (x - 1) == 0 || n % (x + 1) == 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n`,\r\n    );\r\n    code = functionName + '(' + numberToCheck + ')';\r\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\r\n    const divisor =\r\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\r\n    if (divisor === '0') {\r\n      return ['false', Order.ATOMIC];\r\n    }\r\n    code = numberToCheck + ' % ' + divisor + ' == 0';\r\n  } else {\r\n    code = numberToCheck + suffix;\r\n  }\r\n  return [code, outputOrder];\r\n}\r\n\r\nexport function math_change(block: Block, generator: DartGenerator) {\r\n  // Add to a variable in place.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return (\r\n    varName +\r\n    ' = (' +\r\n    varName +\r\n    ' is num ? ' +\r\n    varName +\r\n    ' : 0) + ' +\r\n    argument0 +\r\n    ';\\n'\r\n  );\r\n}\r\n\r\n// Rounding functions have a single operand.\r\nexport const math_round = math_single;\r\n// Trigonometry functions have a single operand.\r\nexport const math_trig = math_single;\r\n\r\nexport function math_on_list(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Math functions for lists.\r\n  const func = block.getFieldValue('OP');\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  let code;\r\n  switch (func) {\r\n    case 'SUM': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_sum',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\r\n  num sumVal = 0;\r\n  myList.forEach((num entry) {sumVal += entry;});\r\n  return sumVal;\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MIN': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      const functionName = generator.provideFunction_(\r\n        'math_min',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\r\n  if (myList.isEmpty) return null;\r\n  num minVal = myList[0];\r\n  myList.forEach((num entry) {minVal = Math.min(minVal, entry);});\r\n  return minVal;\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MAX': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      const functionName = generator.provideFunction_(\r\n        'math_max',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\r\n  if (myList.isEmpty) return null;\r\n  num maxVal = myList[0];\r\n  myList.forEach((num entry) {maxVal = Math.max(maxVal, entry);});\r\n  return maxVal;\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'AVERAGE': {\r\n      // This operation exclude null and values that are not int or float:\r\n      //   math_mean([null,null,\"aString\",1,9]) -> 5.0\r\n      const functionName = generator.provideFunction_(\r\n        'math_mean',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\r\n  // First filter list for numbers only.\r\n  List localList = new List.from(myList);\r\n  localList.removeWhere((a) => a is! num);\r\n  if (localList.isEmpty) return null;\r\n  num sumVal = 0;\r\n  localList.forEach((var entry) {sumVal += entry;});\r\n  return sumVal / localList.length;\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MEDIAN': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_median',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\r\n  // First filter list for numbers only, then sort, then return middle value\r\n  // or the average of two middle values if list has an even number of elements.\r\n  List localList = new List.from(myList);\r\n  localList.removeWhere((a) => a is! num);\r\n  if (localList.isEmpty) return null;\r\n  localList.sort((a, b) => (a - b));\r\n  int index = localList.length ~/ 2;\r\n  if (localList.length % 2 == 1) {\r\n    return localList[index];\r\n  } else {\r\n    return (localList[index - 1] + localList[index]) / 2;\r\n  }\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MODE': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      // As a list of numbers can contain more than one mode,\r\n      // the returned result is provided as an array.\r\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1]\r\n      const functionName = generator.provideFunction_(\r\n        'math_modes',\r\n        `\r\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List values) {\r\n  List modes = [];\r\n  List counts = [];\r\n  int maxCount = 0;\r\n  for (int i = 0; i < values.length; i++) {\r\n    var value = values[i];\r\n    bool found = false;\r\n    int thisCount;\r\n    for (int j = 0; j < counts.length; j++) {\r\n      if (counts[j][0] == value) {\r\n        thisCount = ++counts[j][1];\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!found) {\r\n      counts.add([value, 1]);\r\n      thisCount = 1;\r\n    }\r\n    maxCount = Math.max(thisCount, maxCount);\r\n  }\r\n  for (int j = 0; j < counts.length; j++) {\r\n    if (counts[j][1] == maxCount) {\r\n        modes.add(counts[j][0]);\r\n    }\r\n  }\r\n  return modes;\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'STD_DEV': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      const functionName = generator.provideFunction_(\r\n        'math_standard_deviation',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\r\n  // First filter list for numbers only.\r\n  List numbers = new List.from(myList);\r\n  numbers.removeWhere((a) => a is! num);\r\n  if (numbers.isEmpty) return null;\r\n  num n = numbers.length;\r\n  num sum = 0;\r\n  numbers.forEach((x) => sum += x);\r\n  num mean = sum / n;\r\n  num sumSquare = 0;\r\n  numbers.forEach((x) => sumSquare += Math.pow(x - mean, 2));\r\n  return Math.sqrt(sumSquare / n);\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      const functionName = generator.provideFunction_(\r\n        'math_random_item',\r\n        `\r\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\r\n  int x = new Math.Random().nextInt(myList.length);\r\n  return myList[x];\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    default:\r\n      throw Error('Unknown operator: ' + func);\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function math_modulo(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Remainder computation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\r\n  const argument1 =\r\n    generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\r\n  const code = argument0 + ' % ' + argument1;\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function math_constrain(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Constrain a number between two limits.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\r\n  const argument2 =\r\n    generator.valueToCode(block, 'HIGH', Order.NONE) || 'double.infinity';\r\n  const code =\r\n    'Math.min(Math.max(' +\r\n    argument0 +\r\n    ', ' +\r\n    argument1 +\r\n    '), ' +\r\n    argument2 +\r\n    ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function math_random_int(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Random integer between [X] and [Y].\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  const functionName = generator.provideFunction_(\r\n    'math_random_int',\r\n    `\r\nint ${generator.FUNCTION_NAME_PLACEHOLDER_}(num a, num b) {\r\n  if (a > b) {\r\n    // Swap a and b to ensure a is smaller.\r\n    num c = a;\r\n    a = b;\r\n    b = c;\r\n  }\r\n  return new Math.Random().nextInt(b - a + 1) + a;\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function math_random_float(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Random fraction between 0 and 1.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  return ['new Math.Random().nextDouble()', Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function math_atan2(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\r\n  return [\r\n    'Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.pi * 180',\r\n    Order.MULTIPLICATIVE,\r\n  ];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for procedure blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.procedures\r\n\r\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\nexport function procedures_defreturn(block: Block, generator: DartGenerator) {\r\n  // Define a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  let xfix1 = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (xfix1) {\r\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\r\n  }\r\n  let loopTrap = '';\r\n  if (generator.INFINITE_LOOP_TRAP) {\r\n    loopTrap = generator.prefixLines(\r\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  let branch = '';\r\n  if (block.getInput('STACK')) {\r\n    // The 'procedures_defreturn' block might not have a STACK input.\r\n    branch = generator.statementToCode(block, 'STACK');\r\n  }\r\n  let returnValue = '';\r\n  if (block.getInput('RETURN')) {\r\n    // The 'procedures_defnoreturn' block (which shares this code)\r\n    // does not have a RETURN input.\r\n    returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\r\n  }\r\n  let xfix2 = '';\r\n  if (branch && returnValue) {\r\n    // After executing the function body, revisit this block for the return.\r\n    xfix2 = xfix1;\r\n  }\r\n  if (returnValue) {\r\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\r\n  }\r\n  const returnType = returnValue ? 'dynamic' : 'void';\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.getVariableName(variables[i]);\r\n  }\r\n  let code =\r\n    returnType +\r\n    ' ' +\r\n    funcName +\r\n    '(' +\r\n    args.join(', ') +\r\n    ') {\\n' +\r\n    xfix1 +\r\n    loopTrap +\r\n    branch +\r\n    xfix2 +\r\n    returnValue +\r\n    '}';\r\n  code = generator.scrub_(block, code);\r\n  // Add % so as not to collide with helper functions in definitions list.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\r\n  return null;\r\n}\r\n\r\n// Defining a procedure without a return value uses the same generator as\r\n// a procedure with a return value.\r\nexport const procedures_defnoreturn = procedures_defreturn;\r\n\r\nexport function procedures_callreturn(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Call a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\r\n  }\r\n  let code = funcName + '(' + args.join(', ') + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function procedures_callnoreturn(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n) {\r\n  // Call a procedure with no return value.\r\n  // Generated code is for a function call as a statement is the same as a\r\n  // function call as a value, with the addition of line ending.\r\n  const tuple = generator.forBlock['procedures_callreturn'](\r\n    block,\r\n    generator,\r\n  ) as [string, Order];\r\n  return tuple[0] + ';\\n';\r\n}\r\n\r\nexport function procedures_ifreturn(block: Block, generator: DartGenerator) {\r\n  // Conditionally return value from a procedure.\r\n  const condition =\r\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\r\n  let code = 'if (' + condition + ') {\\n';\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the return is triggered.\r\n    code += generator.prefixLines(\r\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  if ((block as IfReturnBlock).hasReturnValue_) {\r\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\r\n    code += generator.INDENT + 'return ' + value + ';\\n';\r\n  } else {\r\n    code += generator.INDENT + 'return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for text blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.texts\r\n\r\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\n// RESERVED WORDS: 'Html,Math'\r\n\r\nexport function text(block: Block, generator: DartGenerator): [string, Order] {\r\n  // Text value.\r\n  const code = generator.quote_(block.getFieldValue('TEXT'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function text_join(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Create a string made up of any number of elements of any type.\r\n  const joinBlock = block as JoinMutatorBlock;\r\n  switch (joinBlock.itemCount_) {\r\n    case 0:\r\n      return [\"''\", Order.ATOMIC];\r\n    case 1: {\r\n      const element =\r\n        generator.valueToCode(block, 'ADD0', Order.UNARY_POSTFIX) || \"''\";\r\n      const code = element + '.toString()';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n    default: {\r\n      const elements = new Array(joinBlock.itemCount_);\r\n      for (let i = 0; i < joinBlock.itemCount_; i++) {\r\n        elements[i] =\r\n          generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\r\n      }\r\n      const code = '[' + elements.join(',') + '].join()';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n  }\r\n}\r\n\r\nexport function text_append(block: Block, generator: DartGenerator) {\r\n  // Append to a variable in place.\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return varName + ' = [' + varName + ', ' + value + '].join();\\n';\r\n}\r\n\r\nexport function text_length(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const text =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\r\n  return [text + '.length', Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_isEmpty(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\r\n  return [text + '.isEmpty', Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_indexOf(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Search the text for a substring.\r\n  const operator =\r\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\r\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const text =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\r\n  const code = text + '.' + operator + '(' + substring + ')';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    return [code + ' + 1', Order.ADDITIVE];\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_charAt(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Get letter at index.\r\n  // Note: Until January 2013 this block did not have the WHERE input.\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const textOrder =\r\n    where === 'FIRST' || where === 'FROM_START'\r\n      ? Order.UNARY_POSTFIX\r\n      : Order.NONE;\r\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\r\n  let at;\r\n  switch (where) {\r\n    case 'FIRST': {\r\n      const code = text + '[0]';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n    case 'FROM_START': {\r\n      at = generator.getAdjusted(block, 'AT');\r\n      const code = text + '[' + at + ']';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n    case 'LAST':\r\n    case 'FROM_END': {\r\n      if (where === 'LAST') {\r\n        at = 1;\r\n      } else {\r\n        at = generator.getAdjusted(block, 'AT', 1);\r\n      }\r\n      const functionName = generator.provideFunction_(\r\n        'text_get_from_end',\r\n        `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text, num x) {\r\n  return text[text.length - x];\r\n}\r\n`,\r\n      );\r\n      const code = `${functionName}(${text}, ${at})`;\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n    case 'RANDOM': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      const functionName = generator.provideFunction_(\r\n        'text_random_letter',\r\n        `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text) {\r\n  int x = new Math.Random().nextInt(text.length);\r\n  return text[x];\r\n}\r\n`,\r\n      );\r\n      const code = functionName + '(' + text + ')';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n  }\r\n  throw Error('Unhandled option (text_charAt).');\r\n}\r\n\r\nexport function text_getSubstring(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Get substring.\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  const requiresLengthCall = where1 !== 'FROM_END' && where2 === 'FROM_START';\r\n  const textOrder = requiresLengthCall ? Order.UNARY_POSTFIX : Order.NONE;\r\n  const text = generator.valueToCode(block, 'STRING', textOrder) || \"''\";\r\n  let code;\r\n  if (where1 === 'FIRST' && where2 === 'LAST') {\r\n    code = text;\r\n    return [code, Order.NONE];\r\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\r\n    // If the text is a variable or literal or doesn't require a call for\r\n    // length, don't generate a helper function.\r\n    let at1;\r\n    switch (where1) {\r\n      case 'FROM_START':\r\n        at1 = generator.getAdjusted(block, 'AT1');\r\n        break;\r\n      case 'FROM_END':\r\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.ADDITIVE);\r\n        at1 = text + '.length - ' + at1;\r\n        break;\r\n      case 'FIRST':\r\n        at1 = '0';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (text_getSubstring).');\r\n    }\r\n    let at2;\r\n    switch (where2) {\r\n      case 'FROM_START':\r\n        at2 = generator.getAdjusted(block, 'AT2', 1);\r\n        break;\r\n      case 'FROM_END':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.ADDITIVE);\r\n        at2 = text + '.length - ' + at2;\r\n        break;\r\n      case 'LAST':\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (text_getSubstring).');\r\n    }\r\n\r\n    if (where2 === 'LAST') {\r\n      code = text + '.substring(' + at1 + ')';\r\n    } else {\r\n      code = text + '.substring(' + at1 + ', ' + at2 + ')';\r\n    }\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    const functionName = generator.provideFunction_(\r\n      'text_get_substring',\r\n      `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text, String where1, num at1, String where2, num at2) {\r\n  int getAt(String where, num at) {\r\n    if (where == 'FROM_END') {\r\n      at = text.length - 1 - at;\r\n    } else if (where == 'FIRST') {\r\n      at = 0;\r\n    } else if (where == 'LAST') {\r\n      at = text.length - 1;\r\n    } else if (where != 'FROM_START') {\r\n      throw 'Unhandled option (text_getSubstring).';\r\n    }\r\n    return at;\r\n  }\r\n  at1 = getAt(where1, at1);\r\n  at2 = getAt(where2, at2) + 1;\r\n  return text.substring(at1, at2);\r\n}\r\n`,\r\n    );\r\n    code =\r\n      functionName +\r\n      '(' +\r\n      text +\r\n      \", '\" +\r\n      where1 +\r\n      \"', \" +\r\n      at1 +\r\n      \", '\" +\r\n      where2 +\r\n      \"', \" +\r\n      at2 +\r\n      ')';\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_changeCase(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Change capitalization.\r\n  const OPERATORS = {\r\n    'UPPERCASE': '.toUpperCase()',\r\n    'LOWERCASE': '.toLowerCase()',\r\n    'TITLECASE': null,\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('CASE') as OperatorOption];\r\n  const textOrder = operator ? Order.UNARY_POSTFIX : Order.NONE;\r\n  const text = generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\r\n  let code;\r\n  if (operator) {\r\n    // Upper and lower case are functions built into generator.\r\n    code = text + operator;\r\n  } else {\r\n    // Title case is not a native generator function.  Define one.\r\n    const functionName = generator.provideFunction_(\r\n      'text_toTitleCase',\r\n      `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String str) {\r\n  RegExp exp = new RegExp(r'\\\\b');\r\n  List<String> list = str.split(exp);\r\n  final title = new StringBuffer();\r\n  for (String part in list) {\r\n    if (part.length > 0) {\r\n      title.write(part[0].toUpperCase());\r\n      if (part.length > 0) {\r\n        title.write(part.substring(1).toLowerCase());\r\n      }\r\n    }\r\n  }\r\n  return title.toString();\r\n}\r\n`,\r\n    );\r\n    code = functionName + '(' + text + ')';\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_trim(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Trim spaces.\r\n  const OPERATORS = {\r\n    'LEFT': \".replaceFirst(new RegExp(r'^\\\\s+'), '')\",\r\n    'RIGHT': \".replaceFirst(new RegExp(r'\\\\s+$'), '')\",\r\n    'BOTH': '.trim()',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\r\n  const text =\r\n    generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\r\n  return [text + operator, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_print(block: Block, generator: DartGenerator) {\r\n  // Print statement.\r\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return 'print(' + msg + ');\\n';\r\n}\r\n\r\nexport function text_prompt_ext(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Prompt function.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_html'] =\r\n    \"import 'dart:html' as Html;\";\r\n  let msg;\r\n  if (block.getField('TEXT')) {\r\n    // Internal message.\r\n    msg = generator.quote_(block.getFieldValue('TEXT'));\r\n  } else {\r\n    // External message.\r\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  }\r\n  let code = 'Html.window.prompt(' + msg + \", '')\";\r\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\r\n  if (toNumber) {\r\n    // TODO(#7600): find better approach than casting to any to override\r\n    // CodeGenerator declaring .definitions protected.\r\n    (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n      \"import 'dart:math' as Math;\";\r\n    code = 'Math.parseDouble(' + code + ')';\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport const text_prompt = text_prompt_ext;\r\n\r\nexport function text_count(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\r\n  // Substring count is not a native generator function.  Define one.\r\n  const functionName = generator.provideFunction_(\r\n    'text_count',\r\n    `\r\nint ${generator.FUNCTION_NAME_PLACEHOLDER_}(String haystack, String needle) {\r\n  if (needle.length == 0) {\r\n    return haystack.length + 1;\r\n  }\r\n  int index = 0;\r\n  int count = 0;\r\n  while (index != -1) {\r\n    index = haystack.indexOf(needle, index);\r\n    if (index != -1) {\r\n      count++;\r\n     index += needle.length;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + text + ', ' + sub + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_replace(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  const text =\r\n    generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\r\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\r\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\r\n  const code = text + '.replaceAll(' + from + ', ' + to + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_reverse(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // There isn't a sensible way to do this in generator. See:\r\n  // http://stackoverflow.com/a/21613700/3529104\r\n  // Implementing something is possibly better than not implementing anything?\r\n  const text =\r\n    generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\r\n  const code = 'new String.fromCharCodes(' + text + '.runes.toList().reversed)';\r\n  return [code, Order.UNARY_PREFIX];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.variables\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\nexport function variables_get(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Variable getter.\r\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function variables_set(block: Block, generator: DartGenerator) {\r\n  // Variable setter.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' = ' + argument0 + ';\\n';\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Dart code generator class, including helper methods for\r\n * generating Dart for blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport {CodeGenerator} from '../../core/generator.js';\r\nimport {inputTypes} from '../../core/inputs/input_types.js';\r\nimport {Names, NameType} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport * as Variables from '../../core/variables.js';\r\nimport type {Workspace} from '../../core/workspace.js';\r\n\r\n/**\r\n * Order of operation ENUMs.\r\n * https://dart.dev/guides/language/language-tour#operators\r\n */\r\n// prettier-ignore\r\nexport enum Order {\r\n  ATOMIC = 0,         // 0 \"\" ...\r\n  UNARY_POSTFIX = 1,  // expr++ expr-- () [] . ?.\r\n  UNARY_PREFIX = 2,   // -expr !expr ~expr ++expr --expr\r\n  MULTIPLICATIVE = 3, // * / % ~/\r\n  ADDITIVE = 4,       // + -\r\n  SHIFT = 5,          // << >>\r\n  BITWISE_AND = 6,    // &\r\n  BITWISE_XOR = 7,    // ^\r\n  BITWISE_OR = 8,     // |\r\n  RELATIONAL = 9,     // >= > <= < as is is!\r\n  EQUALITY = 10,      // == !=\r\n  LOGICAL_AND = 11,   // &&\r\n  LOGICAL_OR = 12,    // ||\r\n  IF_NULL = 13,       // ??\r\n  CONDITIONAL = 14,   // expr ? expr: expr\r\n  CASCADE = 15,       // ..\r\n  ASSIGNMENT = 16,    // = *= /= ~/= %= += -= <<= >>= &= ^= |=\r\n  NONE = 99,          // (...)\r\n}\r\n\r\n/**\r\n * Dart code generator class.\r\n */\r\nexport class DartGenerator extends CodeGenerator {\r\n  /** @param name Name of the language the generator is for. */\r\n  constructor(name = 'Dart') {\r\n    super(name);\r\n    this.isInitialized = false;\r\n\r\n    // Copy Order values onto instance for backwards compatibility\r\n    // while ensuring they are not part of the publically-advertised\r\n    // API.\r\n    //\r\n    // TODO(#7085): deprecate these in due course.  (Could initially\r\n    // replace data properties with get accessors that call\r\n    // deprecate.warn().)\r\n    for (const key in Order) {\r\n      // Must assign Order[key] to a temporary to get the type guard to work;\r\n      // see https://github.com/microsoft/TypeScript/issues/10530.\r\n      const value = Order[key];\r\n      // Skip reverse-lookup entries in the enum.  Due to\r\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\r\n      // of TypeScript 5.5.2) actually narrows the type of value to\r\n      // never - but that still allows the following assignment to\r\n      // succeed.\r\n      if (typeof value === 'string') continue;\r\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\r\n    }\r\n\r\n    // List of illegal variable names.  This is not intended to be a\r\n    // security feature.  Blockly is 100% client-side, so bypassing\r\n    // this list is trivial.  This is intended to prevent users from\r\n    // accidentally clobbering a built-in object or function.\r\n    this.addReservedWords(\r\n      // https://www.dartlang.org/docs/spec/latest/dart-language-specification.pdf\r\n      // Section 16.1.1\r\n      'assert,break,case,catch,class,const,continue,default,do,else,enum,' +\r\n        'extends,false,final,finally,for,if,in,is,new,null,rethrow,return,' +\r\n        'super,switch,this,throw,true,try,var,void,while,with,' +\r\n        // https://api.dartlang.org/dart_core.html\r\n        'print,identityHashCode,identical,BidirectionalIterator,Comparable,' +\r\n        'double,Function,int,Invocation,Iterable,Iterator,List,Map,Match,num,' +\r\n        'Pattern,RegExp,Set,StackTrace,String,StringSink,Type,bool,DateTime,' +\r\n        'Deprecated,Duration,Expando,Null,Object,RuneIterator,Runes,Stopwatch,' +\r\n        'StringBuffer,Symbol,Uri,Comparator,AbstractClassInstantiationError,' +\r\n        'ArgumentError,AssertionError,CastError,ConcurrentModificationError,' +\r\n        'CyclicInitializationError,Error,Exception,FallThroughError,' +\r\n        'FormatException,IntegerDivisionByZeroException,NoSuchMethodError,' +\r\n        'NullThrownError,OutOfMemoryError,RangeError,StackOverflowError,' +\r\n        'StateError,TypeError,UnimplementedError,UnsupportedError',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initialise the database of variable names.\r\n   *\r\n   * @param workspace Workspace to generate code from.\r\n   */\r\n  init(workspace: Workspace) {\r\n    super.init(workspace);\r\n\r\n    if (!this.nameDB_) {\r\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\r\n    } else {\r\n      this.nameDB_.reset();\r\n    }\r\n\r\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\r\n    this.nameDB_.populateVariables(workspace);\r\n    this.nameDB_.populateProcedures(workspace);\r\n\r\n    const defvars = [];\r\n    // Add developer variables (not created or named by the user).\r\n    const devVarList = Variables.allDeveloperVariables(workspace);\r\n    for (let i = 0; i < devVarList.length; i++) {\r\n      defvars.push(\r\n        this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\r\n      );\r\n    }\r\n\r\n    // Add user variables, but only ones that are being used.\r\n    const variables = Variables.allUsedVarModels(workspace);\r\n    for (let i = 0; i < variables.length; i++) {\r\n      defvars.push(\r\n        this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE),\r\n      );\r\n    }\r\n\r\n    // Declare all of the variables.\r\n    if (defvars.length) {\r\n      this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\r\n    }\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Prepend the generated code with import statements and variable definitions.\r\n   *\r\n   * @param code Generated code.\r\n   * @returns Completed code.\r\n   */\r\n  finish(code: string): string {\r\n    // Indent every line.\r\n    if (code) {\r\n      code = this.prefixLines(code, this.INDENT);\r\n    }\r\n    code = 'main() {\\n' + code + '}';\r\n\r\n    // Convert the definitions dictionary into a list.\r\n    const imports = [];\r\n    const definitions = [];\r\n    for (let name in this.definitions_) {\r\n      const def = this.definitions_[name];\r\n      if (def.match(/^import\\s/)) {\r\n        imports.push(def);\r\n      } else {\r\n        definitions.push(def);\r\n      }\r\n    }\r\n    // Call Blockly.CodeGenerator's finish.\r\n    code = super.finish(code);\r\n    this.isInitialized = false;\r\n\r\n    this.nameDB_!.reset();\r\n    const allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\r\n    return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\r\n  }\r\n\r\n  /**\r\n   * Naked values are top-level blocks with outputs that aren't plugged into\r\n   * anything.\r\n   *\r\n   * @param line Line of generated code.\r\n   * @returns Legal line of code.\r\n   */\r\n  scrubNakedValue(line: string): string {\r\n    return line + ';\\n';\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped Dart string, complete with quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns Dart string.\r\n   */\r\n  quote_(string: string): string {\r\n    // Can't use goog.string.quote since $ must also be escaped.\r\n    string = string\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\\n/g, '\\\\\\n')\r\n      .replace(/\\$/g, '\\\\$')\r\n      .replace(/'/g, \"\\\\'\");\r\n    return \"'\" + string + \"'\";\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped multiline Dart string, complete\r\n   * with quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns Dart string.\r\n   */\r\n  multiline_quote_(string: string): string {\r\n    const lines = string.split(/\\n/g).map(this.quote_);\r\n    // Join with the following, plus a newline:\r\n    // + '\\n' +\r\n    return lines.join(\" + '\\\\n' + \\n\");\r\n  }\r\n\r\n  /**\r\n   * Common tasks for generating Dart from blocks.\r\n   * Handles comments for the specified block and any connected value blocks.\r\n   * Calls any statements following this block.\r\n   *\r\n   * @param block The current block.\r\n   * @param code The Dart code created for this block.\r\n   * @param thisOnly True to generate code for only this statement.\r\n   * @returns Dart code with comments and subsequent blocks added.\r\n   */\r\n  scrub_(block: Block, code: string, thisOnly = false): string {\r\n    let commentCode = '';\r\n    // Only collect comments for blocks that aren't inline.\r\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\r\n      // Collect comment for this block.\r\n      let comment = block.getCommentText();\r\n      if (comment) {\r\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\r\n        if ((block as AnyDuringMigration).getProcedureDef) {\r\n          // Use documentation comment for function comments.\r\n          commentCode += this.prefixLines(comment + '\\n', '/// ');\r\n        } else {\r\n          commentCode += this.prefixLines(comment + '\\n', '// ');\r\n        }\r\n      }\r\n      // Collect comments for all value arguments.\r\n      // Don't collect comments for nested statements.\r\n      for (let i = 0; i < block.inputList.length; i++) {\r\n        if (block.inputList[i].type === inputTypes.VALUE) {\r\n          const childBlock = block.inputList[i].connection!.targetBlock();\r\n          if (childBlock) {\r\n            comment = this.allNestedComments(childBlock);\r\n            if (comment) {\r\n              commentCode += this.prefixLines(comment, '// ');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextBlock =\r\n      block.nextConnection && block.nextConnection.targetBlock();\r\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\r\n    return commentCode + code + nextCode;\r\n  }\r\n\r\n  /**\r\n   * Generate code representing the specified value input, adjusted to take into\r\n   * account indexing (zero- or one-based) and optionally by a specified delta\r\n   * and/or by negation.\r\n   *\r\n   * @param block The block.\r\n   * @param atId The ID of the input block to get (and adjust) the value of.\r\n   * @param delta Value to add.\r\n   * @param negate Whether to negate the value.\r\n   * @param order The highest order acting on this value.\r\n   * @returns The adjusted value or code that evaluates to it.\r\n   */\r\n  getAdjusted(\r\n    block: Block,\r\n    atId: string,\r\n    delta = 0,\r\n    negate = false,\r\n    order = Order.NONE,\r\n  ): string {\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      delta--;\r\n    }\r\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\r\n\r\n    let orderForInput = order;\r\n    if (delta) {\r\n      orderForInput = Order.ADDITIVE;\r\n    } else if (negate) {\r\n      orderForInput = Order.UNARY_PREFIX;\r\n    }\r\n\r\n    let at = this.valueToCode(block, atId, orderForInput) || defaultAtIndex;\r\n\r\n    // Easy case: no adjustments.\r\n    if (delta === 0 && !negate) {\r\n      return at;\r\n    }\r\n    // If the index is a naked number, adjust it right now.\r\n    if (stringUtils.isNumber(at)) {\r\n      at = String(Number(at) + delta);\r\n      if (negate) {\r\n        at = String(-Number(at));\r\n      }\r\n      return at;\r\n    }\r\n    // If the index is dynamic, adjust it in code.\r\n    if (delta > 0) {\r\n      at = `${at} + ${delta}`;\r\n    } else if (delta < 0) {\r\n      at = `${at} - ${-delta}`;\r\n    }\r\n    if (negate) {\r\n      at = delta ? `-(${at})` : `-${at}`;\r\n    }\r\n    if (Math.floor(order) >= Math.floor(orderForInput)) {\r\n      at = `(${at})`;\r\n    }\r\n    return at;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for dynamic variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.variablesDynamic\r\n\r\n// generator is dynamically typed.\r\nexport {\r\n  variables_get as variables_get_dynamic,\r\n  variables_set as variables_set_dynamic,\r\n} from './variables.js';\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Instantiate a DartGenerator and populate it with the complete\r\n * set of block generator functions for Dart.  This is the entrypoint\r\n * for dart_compressed.js.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.all\r\n\r\nimport {DartGenerator} from './dart/dart_generator.js';\r\nimport * as lists from './dart/lists.js';\r\nimport * as logic from './dart/logic.js';\r\nimport * as loops from './dart/loops.js';\r\nimport * as math from './dart/math.js';\r\nimport * as procedures from './dart/procedures.js';\r\nimport * as text from './dart/text.js';\r\nimport * as variables from './dart/variables.js';\r\nimport * as variablesDynamic from './dart/variables_dynamic.js';\r\n\r\nexport * from './dart/dart_generator.js';\r\n\r\n/**\r\n * Dart code generator instance.\r\n * @type {!DartGenerator}\r\n */\r\nexport const dartGenerator = new DartGenerator();\r\n\r\n// Add reserved words.  This list should include all words mentioned\r\n// in RESERVED WORDS: comments in the imports above.\r\ndartGenerator.addReservedWords('Html,Math');\r\n\r\n// Install per-block-type generator functions:\r\nconst generators: typeof dartGenerator.forBlock = {\r\n  ...lists,\r\n  ...logic,\r\n  ...loops,\r\n  ...math,\r\n  ...procedures,\r\n  ...text,\r\n  ...variables,\r\n  ...variablesDynamic,\r\n};\r\nfor (const name in generators) {\r\n  dartGenerator.forBlock[name] = generators[name];\r\n}\r\n"]}