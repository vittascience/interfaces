{"version":3,"sources":["generators/javascript/lists.ts","generators/javascript/logic.ts","generators/javascript/loops.ts","generators/javascript/math.ts","generators/javascript/procedures.ts","generators/javascript/text.ts","generators/javascript/variables.ts","generators/javascript/javascript_generator.ts","generators/javascript/variables_dynamic.ts","generators/javascript.ts"],"names":["lists_create_empty","block","generator","Order","ATOMIC","lists_create_with","elements","Array","itemCount_","i","valueToCode","NONE","join","lists_repeat","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","element","repeatCount","FUNCTION_CALL","lists_length","MEMBER","lists_isEmpty","LOGICAL_NOT","lists_indexOf","operator","getFieldValue","item","code","workspace","options","oneBasedIndex","ADDITION","lists_getIndex","mode","where","list","listOrder","at","getAdjusted","Error","lists_setIndex","cacheList","match","listVar","nameDB_","getDistinctName","NameType","VARIABLE","value","ASSIGNMENT","SUBTRACTION","xVar","lists_getSublist","wherePascalCase","where1","where2","at1","at2","at1Param","at2Param","getSubstringIndex","lists_sort","direction","type","getCompareFunctionName","lists_split","input","delimiter","lists_reverse","controls_if","n","STATEMENT_PREFIX","injectId","conditionCode","branchCode","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","OPERATORS","order","EQUALITY","RELATIONAL","argument0","argument1","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","String","Number","branch","addLoopTrap","loopVar","endVar","isNumber","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","up","step","Math","abs","startVar","incVar","controls_forEach","indexVar","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","number","UNARY_NEGATION","math_arithmetic","tuple","MULTIPLICATION","DIVISION","math_single","arg","math_constant","CONSTANTS","math_number_property","PROPERTIES","MODULUS","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","getVars","length","scrub_","definitions_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","quote_","text_join","codeAndOrder","forceString","element0","element1","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","textOrder","text_getSubstring","requiresLengthCall","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","NEW","INCREMENT","DECREMENT","BITWISE_NOT","UNARY_PLUS","TYPEOF","VOID","DELETE","AWAIT","EXPONENTIATION","BITWISE_SHIFT","IN","INSTANCEOF","BITWISE_AND","BITWISE_XOR","BITWISE_OR","YIELD","COMMA","JavascriptGenerator","CodeGenerator","constructor","name","ORDER_OVERRIDES","isInitialized","key","addReservedWords","Object","getOwnPropertyNames","globalThis","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","devVarList","allDeveloperVariables","push","getName","DEVELOPER_VARIABLE","allUsedVarModels","getId","finish","definitions","values","scrubNakedValue","line","string","replace","multiline_quote_","split","map","lines","thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","delta","negate","defaultAtIndex","orderForInput","floor","$jscomp$tmp$exports$module$name","listName","opt_at","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","strRegExp","test","stringName","text_prompt","javascriptGenerator","generators","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"javascript_compressed.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for list blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.lists\r\n\r\nimport type {CreateWithBlock} from '../../blocks/lists.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function lists_create_empty(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Create an empty list.\r\n  return ['[]', Order.ATOMIC];\r\n}\r\n\r\nexport function lists_create_with(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Create a list with any number of elements of any type.\r\n  const createWithBlock = block as CreateWithBlock;\r\n  const elements = new Array(createWithBlock.itemCount_);\r\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\r\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\r\n  }\r\n  const code = '[' + elements.join(', ') + ']';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function lists_repeat(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Create a list with one element repeated.\r\n  const functionName = generator.provideFunction_(\r\n    'listsRepeat',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\r\n  var array = [];\r\n  for (var i = 0; i < n; i++) {\r\n    array[i] = value;\r\n  }\r\n  return array;\r\n}\r\n`,\r\n  );\r\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\r\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_length(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\r\n  return [list + '.length', Order.MEMBER];\r\n}\r\n\r\nexport function lists_isEmpty(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\r\n  return ['!' + list + '.length', Order.LOGICAL_NOT];\r\n}\r\n\r\nexport function lists_indexOf(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Find an item in the list.\r\n  const operator =\r\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\r\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\r\n  const code = list + '.' + operator + '(' + item + ')';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    return [code + ' + 1', Order.ADDITION];\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_getIndex(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] | string {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const listOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\r\n  const list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'GET') {\r\n        const code = list + '[0]';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.shift()';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'GET') {\r\n        const code = list + '.slice(-1)[0]';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.pop()';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      if (mode === 'GET') {\r\n        const code = list + '[' + at + ']';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjusted(block, 'AT', 1, true);\r\n      if (mode === 'GET') {\r\n        const code = list + '.slice(' + at + ')[0]';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);';\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      const functionName = generator.provideFunction_(\r\n        'listsGetRandomItem',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\r\n  var x = Math.floor(Math.random() * list.length);\r\n  if (remove) {\r\n    return list.splice(x, 1)[0];\r\n  } else {\r\n    return list[x];\r\n  }\r\n}\r\n`,\r\n      );\r\n      const code = functionName + '(' + list + ', ' + (mode !== 'GET') + ')';\r\n      if (mode === 'GET' || mode === 'GET_REMOVE') {\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_getIndex).');\r\n}\r\n\r\nexport function lists_setIndex(block: Block, generator: JavascriptGenerator) {\r\n  // Set element at index.\r\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  let list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const value = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  // Closure, which accesses and modifies 'list'.\r\n  function cacheList() {\r\n    if (list.match(/^\\w+$/)) {\r\n      return '';\r\n    }\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmpList',\r\n      NameType.VARIABLE,\r\n    )!;\r\n    const code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n    list = listVar;\r\n    return code;\r\n  }\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'SET') {\r\n        return list + '[0] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.unshift(' + value + ');\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'SET') {\r\n        let code = cacheList();\r\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.push(' + value + ');\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      if (mode === 'SET') {\r\n        return list + '[' + at + '] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjusted(\r\n        block,\r\n        'AT',\r\n        1,\r\n        false,\r\n        Order.SUBTRACTION,\r\n      );\r\n      let code = cacheList();\r\n      if (mode === 'SET') {\r\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code +=\r\n          list +\r\n          '.splice(' +\r\n          list +\r\n          '.length - ' +\r\n          at +\r\n          ', 0, ' +\r\n          value +\r\n          ');\\n';\r\n        return code;\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      let code = cacheList();\r\n      const xVar = generator.nameDB_!.getDistinctName(\r\n        'tmpX',\r\n        NameType.VARIABLE,\r\n      );\r\n      code +=\r\n        'var ' + xVar + ' = Math.floor(Math.random() * ' + list + '.length);\\n';\r\n      if (mode === 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n        return code;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_setIndex).');\r\n}\r\n\r\n/**\r\n * Returns an expression calculating the index into a list.\r\n * @param listName Name of the list, used to calculate length.\r\n * @param where The method of indexing, selected by dropdown in Blockly\r\n * @param opt_at The optional offset when indexing from start/end.\r\n * @returns Index expression.\r\n */\r\nconst getSubstringIndex = function (\r\n  listName: string,\r\n  where: string,\r\n  opt_at?: string,\r\n): string | undefined {\r\n  if (where === 'FIRST') {\r\n    return '0';\r\n  } else if (where === 'FROM_END') {\r\n    return listName + '.length - 1 - ' + opt_at;\r\n  } else if (where === 'LAST') {\r\n    return listName + '.length - 1';\r\n  } else {\r\n    return opt_at;\r\n  }\r\n};\r\n\r\nexport function lists_getSublist(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Get sublist.\r\n  // Dictionary of WHEREn field choices and their CamelCase equivalents.\r\n  const wherePascalCase = {\r\n    'FIRST': 'First',\r\n    'LAST': 'Last',\r\n    'FROM_START': 'FromStart',\r\n    'FROM_END': 'FromEnd',\r\n  };\r\n  type WhereOption = keyof typeof wherePascalCase;\r\n  const list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\r\n  const where1 = block.getFieldValue('WHERE1') as WhereOption;\r\n  const where2 = block.getFieldValue('WHERE2') as WhereOption;\r\n  let code;\r\n  if (where1 === 'FIRST' && where2 === 'LAST') {\r\n    code = list + '.slice(0)';\r\n  } else if (\r\n    list.match(/^\\w+$/) ||\r\n    (where1 !== 'FROM_END' && where2 === 'FROM_START')\r\n  ) {\r\n    // If the list is a variable or doesn't require a call for length, don't\r\n    // generate a helper function.\r\n    let at1;\r\n    switch (where1) {\r\n      case 'FROM_START':\r\n        at1 = generator.getAdjusted(block, 'AT1');\r\n        break;\r\n      case 'FROM_END':\r\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.SUBTRACTION);\r\n        at1 = list + '.length - ' + at1;\r\n        break;\r\n      case 'FIRST':\r\n        at1 = '0';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    let at2;\r\n    switch (where2) {\r\n      case 'FROM_START':\r\n        at2 = generator.getAdjusted(block, 'AT2', 1);\r\n        break;\r\n      case 'FROM_END':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\r\n        at2 = list + '.length - ' + at2;\r\n        break;\r\n      case 'LAST':\r\n        at2 = list + '.length';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    code = list + '.slice(' + at1 + ', ' + at2 + ')';\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n    // we add it as a parameter.\r\n    const at1Param =\r\n      where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '';\r\n    const at2Param =\r\n      where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '';\r\n    const functionName = generator.provideFunction_(\r\n      'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\r\n      `\r\nfunction ${\r\n        generator.FUNCTION_NAME_PLACEHOLDER_\r\n      }(sequence${at1Param}${at2Param}) {\r\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\r\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\r\n  return sequence.slice(start, end);\r\n}\r\n`,\r\n    );\r\n    code =\r\n      functionName +\r\n      '(' +\r\n      list +\r\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n      // pass it.\r\n      (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', ' + at1 : '') +\r\n      (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', ' + at2 : '') +\r\n      ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_sort(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Block for sorting a list.\r\n  const list =\r\n    generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || '[]';\r\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\r\n  const type = block.getFieldValue('TYPE');\r\n  const getCompareFunctionName = generator.provideFunction_(\r\n    'listsGetSortCompare',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\r\n  var compareFuncs = {\r\n    'NUMERIC': function(a, b) {\r\n        return Number(a) - Number(b); },\r\n    'TEXT': function(a, b) {\r\n        return String(a) > String(b) ? 1 : -1; },\r\n    'IGNORE_CASE': function(a, b) {\r\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\r\n  };\r\n  var compare = compareFuncs[type];\r\n  return function(a, b) { return compare(a, b) * direction; };\r\n}\r\n      `,\r\n  );\r\n  return [\r\n    list +\r\n      '.slice().sort(' +\r\n      getCompareFunctionName +\r\n      '(\"' +\r\n      type +\r\n      '\", ' +\r\n      direction +\r\n      '))',\r\n    Order.FUNCTION_CALL,\r\n  ];\r\n}\r\n\r\nexport function lists_split(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Block for splitting text into a list, or joining a list into text.\r\n  let input = generator.valueToCode(block, 'INPUT', Order.MEMBER);\r\n  const delimiter = generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\r\n  const mode = block.getFieldValue('MODE');\r\n  let functionName;\r\n  if (mode === 'SPLIT') {\r\n    if (!input) {\r\n      input = \"''\";\r\n    }\r\n    functionName = 'split';\r\n  } else if (mode === 'JOIN') {\r\n    if (!input) {\r\n      input = '[]';\r\n    }\r\n    functionName = 'join';\r\n  } else {\r\n    throw Error('Unknown mode: ' + mode);\r\n  }\r\n  const code = input + '.' + functionName + '(' + delimiter + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_reverse(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Block for reversing a list.\r\n  const list =\r\n    generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || '[]';\r\n  const code = list + '.slice().reverse()';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for logic blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.logic\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function controls_if(block: Block, generator: JavascriptGenerator) {\r\n  // If/elseif/else condition.\r\n  let n = 0;\r\n  let code = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  do {\r\n    const conditionCode =\r\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\r\n    let branchCode = generator.statementToCode(block, 'DO' + n);\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code +=\r\n      (n > 0 ? ' else ' : '') +\r\n      'if (' +\r\n      conditionCode +\r\n      ') {\\n' +\r\n      branchCode +\r\n      '}';\r\n    n++;\r\n  } while (block.getInput('IF' + n));\r\n\r\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\r\n    let branchCode = generator.statementToCode(block, 'ELSE');\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += ' else {\\n' + branchCode + '}';\r\n  }\r\n  return code + '\\n';\r\n}\r\n\r\nexport const controls_ifelse = controls_if;\r\n\r\nexport function logic_compare(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Comparison operator.\r\n  const OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>=',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const order =\r\n    operator === '==' || operator === '!=' ? Order.EQUALITY : Order.RELATIONAL;\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_operation(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Operations 'and', 'or'.\r\n  const operator = block.getFieldValue('OP') === 'AND' ? '&&' : '||';\r\n  const order = operator === '&&' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\r\n  let argument0 = generator.valueToCode(block, 'A', order);\r\n  let argument1 = generator.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'false';\r\n    argument1 = 'false';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    const defaultArgument = operator === '&&' ? 'true' : 'false';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_negate(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Negation.\r\n  const order = Order.LOGICAL_NOT;\r\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\r\n  const code = '!' + argument0;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_boolean(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Boolean values true and false.\r\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function logic_null(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Null data type.\r\n  return ['null', Order.ATOMIC];\r\n}\r\n\r\nexport function logic_ternary(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Ternary operator.\r\n  const value_if =\r\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\r\n  const value_then =\r\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\r\n  const value_else =\r\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\r\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\r\n  return [code, Order.CONDITIONAL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for loop blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.loops\r\n\r\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function controls_repeat_ext(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Repeat n times.\r\n  let repeats;\r\n  if (block.getField('TIMES')) {\r\n    // Internal number.\r\n    repeats = String(Number(block.getFieldValue('TIMES')));\r\n  } else {\r\n    // External number.\r\n    repeats = generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\r\n  }\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code = '';\r\n  const loopVar = generator.nameDB_!.getDistinctName(\r\n    'count',\r\n    NameType.VARIABLE,\r\n  );\r\n  let endVar = repeats;\r\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\r\n    endVar = generator.nameDB_!.getDistinctName(\r\n      'repeat_end',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\r\n  }\r\n  code +=\r\n    'for (var ' +\r\n    loopVar +\r\n    ' = 0; ' +\r\n    loopVar +\r\n    ' < ' +\r\n    endVar +\r\n    '; ' +\r\n    loopVar +\r\n    '++) {\\n' +\r\n    branch +\r\n    '}\\n';\r\n  return code;\r\n}\r\n\r\nexport const controls_repeat = controls_repeat_ext;\r\n\r\nexport function controls_whileUntil(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Do while/until loop.\r\n  const until = block.getFieldValue('MODE') === 'UNTIL';\r\n  let argument0 =\r\n    generator.valueToCode(\r\n      block,\r\n      'BOOL',\r\n      until ? Order.LOGICAL_NOT : Order.NONE,\r\n    ) || 'false';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  if (until) {\r\n    argument0 = '!' + argument0;\r\n  }\r\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\r\n}\r\n\r\nexport function controls_for(block: Block, generator: JavascriptGenerator) {\r\n  // For loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\r\n  const increment = generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code;\r\n  if (\r\n    stringUtils.isNumber(argument0) &&\r\n    stringUtils.isNumber(argument1) &&\r\n    stringUtils.isNumber(increment)\r\n  ) {\r\n    // All arguments are simple numbers.\r\n    const up = Number(argument0) <= Number(argument1);\r\n    code =\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      argument0 +\r\n      '; ' +\r\n      variable0 +\r\n      (up ? ' <= ' : ' >= ') +\r\n      argument1 +\r\n      '; ' +\r\n      variable0;\r\n    const step = Math.abs(Number(increment));\r\n    if (step === 1) {\r\n      code += up ? '++' : '--';\r\n    } else {\r\n      code += (up ? ' += ' : ' -= ') + step;\r\n    }\r\n    code += ') {\\n' + branch + '}\\n';\r\n  } else {\r\n    code = '';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    let startVar = argument0;\r\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\r\n      startVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_start',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\r\n    }\r\n    let endVar = argument1;\r\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\r\n      endVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_end',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\r\n    }\r\n    // Determine loop direction at start, in case one of the bounds\r\n    // changes during loop execution.\r\n    const incVar = generator.nameDB_!.getDistinctName(\r\n      variable0 + '_inc',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += 'var ' + incVar + ' = ';\r\n    if (stringUtils.isNumber(increment)) {\r\n      code += Math.abs(Number(increment)) + ';\\n';\r\n    } else {\r\n      code += 'Math.abs(' + increment + ');\\n';\r\n    }\r\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n    code += '}\\n';\r\n    code +=\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      startVar +\r\n      '; ' +\r\n      incVar +\r\n      ' >= 0 ? ' +\r\n      variable0 +\r\n      ' <= ' +\r\n      endVar +\r\n      ' : ' +\r\n      variable0 +\r\n      ' >= ' +\r\n      endVar +\r\n      '; ' +\r\n      variable0 +\r\n      ' += ' +\r\n      incVar +\r\n      ') {\\n' +\r\n      branch +\r\n      '}\\n';\r\n  }\r\n  return code;\r\n}\r\n\r\nexport function controls_forEach(block: Block, generator: JavascriptGenerator) {\r\n  // For each loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code = '';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  let listVar = argument0;\r\n  if (!argument0.match(/^\\w+$/)) {\r\n    listVar = generator.nameDB_!.getDistinctName(\r\n      variable0 + '_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\r\n  }\r\n  const indexVar = generator.nameDB_!.getDistinctName(\r\n    variable0 + '_index',\r\n    NameType.VARIABLE,\r\n  );\r\n  branch =\r\n    generator.INDENT +\r\n    variable0 +\r\n    ' = ' +\r\n    listVar +\r\n    '[' +\r\n    indexVar +\r\n    '];\\n' +\r\n    branch;\r\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\r\n  return code;\r\n}\r\n\r\nexport function controls_flow_statements(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Flow statements: continue, break.\r\n  let xfix = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the break/continue is triggered.\r\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (generator.STATEMENT_PREFIX) {\r\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\r\n    if (loop && !loop.suppressPrefixSuffix) {\r\n      // Inject loop's statement prefix here since the regular one at the end\r\n      // of the loop will not get executed if 'continue' is triggered.\r\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\r\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\r\n    }\r\n  }\r\n  switch (block.getFieldValue('FLOW')) {\r\n    case 'BREAK':\r\n      return xfix + 'break;\\n';\r\n    case 'CONTINUE':\r\n      return xfix + 'continue;\\n';\r\n  }\r\n  throw Error('Unknown flow statement.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for math blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.math\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function math_number(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Numeric value.\r\n  const number = Number(block.getFieldValue('NUM'));\r\n  const order = number >= 0 ? Order.ATOMIC : Order.UNARY_NEGATION;\r\n  return [String(number), order];\r\n}\r\n\r\nexport function math_arithmetic(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Basic arithmetic operators, and power.\r\n  const OPERATORS: Record<string, [string | null, Order]> = {\r\n    'ADD': [' + ', Order.ADDITION],\r\n    'MINUS': [' - ', Order.SUBTRACTION],\r\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\r\n    'DIVIDE': [' / ', Order.DIVISION],\r\n    'POWER': [null, Order.NONE], // Handle power separately.\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const operator = tuple[0];\r\n  const order = tuple[1];\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  let code;\r\n  // Power in JavaScript requires a special case since it has no operator.\r\n  if (!operator) {\r\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n  code = argument0 + operator + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function math_single(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Math operators with single operand.\r\n  const operator = block.getFieldValue('OP');\r\n  let code;\r\n  let arg;\r\n  if (operator === 'NEG') {\r\n    // Negation is a special case given its different operator precedence.\r\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_NEGATION) || '0';\r\n    if (arg[0] === '-') {\r\n      // --3 is not legal in JS.\r\n      arg = ' ' + arg;\r\n    }\r\n    code = '-' + arg;\r\n    return [code, Order.UNARY_NEGATION];\r\n  }\r\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.DIVISION) || '0';\r\n  } else {\r\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  }\r\n  // First, handle cases which generate values that don't need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'ABS':\r\n      code = 'Math.abs(' + arg + ')';\r\n      break;\r\n    case 'ROOT':\r\n      code = 'Math.sqrt(' + arg + ')';\r\n      break;\r\n    case 'LN':\r\n      code = 'Math.log(' + arg + ')';\r\n      break;\r\n    case 'EXP':\r\n      code = 'Math.exp(' + arg + ')';\r\n      break;\r\n    case 'POW10':\r\n      code = 'Math.pow(10,' + arg + ')';\r\n      break;\r\n    case 'ROUND':\r\n      code = 'Math.round(' + arg + ')';\r\n      break;\r\n    case 'ROUNDUP':\r\n      code = 'Math.ceil(' + arg + ')';\r\n      break;\r\n    case 'ROUNDDOWN':\r\n      code = 'Math.floor(' + arg + ')';\r\n      break;\r\n    case 'SIN':\r\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\r\n      break;\r\n    case 'COS':\r\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\r\n      break;\r\n    case 'TAN':\r\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\r\n      break;\r\n  }\r\n  if (code) {\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n  // Second, handle cases which generate values that may need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'LOG10':\r\n      code = 'Math.log(' + arg + ') / Math.log(10)';\r\n      break;\r\n    case 'ASIN':\r\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\r\n      break;\r\n    case 'ACOS':\r\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\r\n      break;\r\n    case 'ATAN':\r\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\r\n      break;\r\n    default:\r\n      throw Error('Unknown math operator: ' + operator);\r\n  }\r\n  return [code, Order.DIVISION];\r\n}\r\n\r\nexport function math_constant(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\r\n  const CONSTANTS: Record<string, [string, Order]> = {\r\n    'PI': ['Math.PI', Order.MEMBER],\r\n    'E': ['Math.E', Order.MEMBER],\r\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.DIVISION],\r\n    'SQRT2': ['Math.SQRT2', Order.MEMBER],\r\n    'SQRT1_2': ['Math.SQRT1_2', Order.MEMBER],\r\n    'INFINITY': ['Infinity', Order.ATOMIC],\r\n  };\r\n  type ConstantOption = keyof typeof CONSTANTS;\r\n  return CONSTANTS[block.getFieldValue('CONSTANT') as ConstantOption];\r\n}\r\n\r\nexport function math_number_property(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Check if a number is even, odd, prime, whole, positive, or negative\r\n  // or if it is divisible by certain number. Returns true or false.\r\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\r\n    'EVEN': [' % 2 === 0', Order.MODULUS, Order.EQUALITY],\r\n    'ODD': [' % 2 === 1', Order.MODULUS, Order.EQUALITY],\r\n    'WHOLE': [' % 1 === 0', Order.MODULUS, Order.EQUALITY],\r\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'DIVISIBLE_BY': [null, Order.MODULUS, Order.EQUALITY],\r\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\r\n  };\r\n  type PropertyOption = keyof typeof PROPERTIES;\r\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\r\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\r\n  const numberToCheck =\r\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\r\n  let code;\r\n  if (dropdownProperty === 'PRIME') {\r\n    // Prime is a special case as it is not a one-liner test.\r\n    const functionName = generator.provideFunction_(\r\n      'mathIsPrime',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\r\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\r\n  if (n == 2 || n == 3) {\r\n    return true;\r\n  }\r\n  // False if n is NaN, negative, is 1, or not whole.\r\n  // And false if n is divisible by 2 or 3.\r\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\r\n    return false;\r\n  }\r\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\r\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\r\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n`,\r\n    );\r\n    code = functionName + '(' + numberToCheck + ')';\r\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\r\n    const divisor =\r\n      generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\r\n    code = numberToCheck + ' % ' + divisor + ' === 0';\r\n  } else {\r\n    code = numberToCheck + suffix;\r\n  }\r\n  return [code, outputOrder];\r\n}\r\n\r\nexport function math_change(block: Block, generator: JavascriptGenerator) {\r\n  // Add to a variable in place.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DELTA', Order.ADDITION) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return (\r\n    varName +\r\n    ' = (typeof ' +\r\n    varName +\r\n    \" === 'number' ? \" +\r\n    varName +\r\n    ' : 0) + ' +\r\n    argument0 +\r\n    ';\\n'\r\n  );\r\n}\r\n\r\n// Rounding functions have a single operand.\r\nexport const math_round = math_single;\r\n// Trigonometry functions have a single operand.\r\nexport const math_trig = math_single;\r\n\r\nexport function math_on_list(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Math functions for lists.\r\n  const func = block.getFieldValue('OP');\r\n  let list;\r\n  let code;\r\n  switch (func) {\r\n    case 'SUM':\r\n      list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\r\n      code = list + '.reduce(function(x, y) {return x + y;}, 0)';\r\n      break;\r\n    case 'MIN':\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = 'Math.min.apply(null, ' + list + ')';\r\n      break;\r\n    case 'MAX':\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = 'Math.max.apply(null, ' + list + ')';\r\n      break;\r\n    case 'AVERAGE': {\r\n      // mathMean([null,null,1,3]) === 2.0.\r\n      const functionName = generator.provideFunction_(\r\n        'mathMean',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\r\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MEDIAN': {\r\n      // mathMedian([null,null,1,3]) === 2.0.\r\n      const functionName = generator.provideFunction_(\r\n        'mathMedian',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\r\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\r\n  if (!localList.length) return null;\r\n  localList.sort(function(a, b) {return b - a;});\r\n  if (localList.length % 2 === 0) {\r\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\r\n  } else {\r\n    return localList[(localList.length - 1) / 2];\r\n  }\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MODE': {\r\n      // As a list of numbers can contain more than one mode,\r\n      // the returned result is provided as an array.\r\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\r\n      const functionName = generator.provideFunction_(\r\n        'mathModes',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(values) {\r\n  var modes = [];\r\n  var counts = [];\r\n  var maxCount = 0;\r\n  for (var i = 0; i < values.length; i++) {\r\n    var value = values[i];\r\n    var found = false;\r\n    var thisCount;\r\n    for (var j = 0; j < counts.length; j++) {\r\n      if (counts[j][0] === value) {\r\n        thisCount = ++counts[j][1];\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!found) {\r\n      counts.push([value, 1]);\r\n      thisCount = 1;\r\n    }\r\n    maxCount = Math.max(thisCount, maxCount);\r\n  }\r\n  for (var j = 0; j < counts.length; j++) {\r\n    if (counts[j][1] === maxCount) {\r\n      modes.push(counts[j][0]);\r\n    }\r\n  }\r\n  return modes;\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'STD_DEV': {\r\n      const functionName = generator.provideFunction_(\r\n        'mathStandardDeviation',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\r\n  var n = numbers.length;\r\n  if (!n) return null;\r\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\r\n  var variance = 0;\r\n  for (var j = 0; j < n; j++) {\r\n    variance += Math.pow(numbers[j] - mean, 2);\r\n  }\r\n  variance /= n;\r\n  return Math.sqrt(variance);\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      const functionName = generator.provideFunction_(\r\n        'mathRandomList',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list) {\r\n  var x = Math.floor(Math.random() * list.length);\r\n  return list[x];\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    default:\r\n      throw Error('Unknown operator: ' + func);\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_modulo(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Remainder computation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DIVIDEND', Order.MODULUS) || '0';\r\n  const argument1 =\r\n    generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\r\n  const code = argument0 + ' % ' + argument1;\r\n  return [code, Order.MODULUS];\r\n}\r\n\r\nexport function math_constrain(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Constrain a number between two limits.\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\r\n  const argument2 =\r\n    generator.valueToCode(block, 'HIGH', Order.NONE) || 'Infinity';\r\n  const code =\r\n    'Math.min(Math.max(' +\r\n    argument0 +\r\n    ', ' +\r\n    argument1 +\r\n    '), ' +\r\n    argument2 +\r\n    ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_int(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Random integer between [X] and [Y].\r\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  const functionName = generator.provideFunction_(\r\n    'mathRandomInt',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\r\n  if (a > b) {\r\n    // Swap a and b to ensure a is smaller.\r\n    var c = a;\r\n    a = b;\r\n    b = c;\r\n  }\r\n  return Math.floor(Math.random() * (b - a + 1) + a);\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_float(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Random fraction between 0 and 1.\r\n  return ['Math.random()', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_atan2(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\r\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\r\n  return [\r\n    'Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\r\n    Order.DIVISION,\r\n  ];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for procedure blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.procedures\r\n\r\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function procedures_defreturn(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Define a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  let xfix1 = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (xfix1) {\r\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\r\n  }\r\n  let loopTrap = '';\r\n  if (generator.INFINITE_LOOP_TRAP) {\r\n    loopTrap = generator.prefixLines(\r\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  let branch = '';\r\n  if (block.getInput('STACK')) {\r\n    // The 'procedures_defreturn' block might not have a STACK input.\r\n    branch = generator.statementToCode(block, 'STACK');\r\n  }\r\n  let returnValue = '';\r\n  if (block.getInput('RETURN')) {\r\n    // The 'procedures_defnoreturn' block (which shares this code)\r\n    // does not have a RETURN input.\r\n    returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\r\n  }\r\n  let xfix2 = '';\r\n  if (branch && returnValue) {\r\n    // After executing the function body, revisit this block for the return.\r\n    xfix2 = xfix1;\r\n  }\r\n  if (returnValue) {\r\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\r\n  }\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.getVariableName(variables[i]);\r\n  }\r\n  let code =\r\n    'function ' +\r\n    funcName +\r\n    '(' +\r\n    args.join(', ') +\r\n    ') {\\n' +\r\n    xfix1 +\r\n    loopTrap +\r\n    branch +\r\n    xfix2 +\r\n    returnValue +\r\n    '}';\r\n  code = generator.scrub_(block, code);\r\n  // Add % so as not to collide with helper functions in definitions list.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\r\n  return null;\r\n}\r\n\r\n// Defining a procedure without a return value uses the same generator as\r\n// a procedure with a return value.\r\nexport const procedures_defnoreturn = procedures_defreturn;\r\n\r\nexport function procedures_callreturn(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Call a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\r\n  }\r\n  const code = funcName + '(' + args.join(', ') + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function procedures_callnoreturn(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Call a procedure with no return value.\r\n  // Generated code is for a function call as a statement is the same as a\r\n  // function call as a value, with the addition of line ending.\r\n  const tuple = generator.forBlock['procedures_callreturn'](\r\n    block,\r\n    generator,\r\n  ) as [string, Order];\r\n  return tuple[0] + ';\\n';\r\n}\r\n\r\nexport function procedures_ifreturn(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Conditionally return value from a procedure.\r\n  const condition =\r\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\r\n  let code = 'if (' + condition + ') {\\n';\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the return is triggered.\r\n    code += generator.prefixLines(\r\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  if ((block as IfReturnBlock).hasReturnValue_) {\r\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\r\n    code += generator.INDENT + 'return ' + value + ';\\n';\r\n  } else {\r\n    code += generator.INDENT + 'return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for text blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.texts\r\n\r\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\n/**\r\n * Regular expression to detect a single-quoted string literal.\r\n */\r\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\r\n\r\n/**\r\n * Enclose the provided value in 'String(...)' function.\r\n * Leave string literals alone.\r\n * @param value Code evaluating to a value.\r\n * @returns Array containing code evaluating to a string\r\n *     and the order of the returned code.[string, number]\r\n */\r\nconst forceString = function (value: string): [string, Order] {\r\n  if (strRegExp.test(value)) {\r\n    return [value, Order.ATOMIC];\r\n  }\r\n  return ['String(' + value + ')', Order.FUNCTION_CALL];\r\n};\r\n\r\n/**\r\n * Returns an expression calculating the index into a string.\r\n * @param stringName Name of the string, used to calculate length.\r\n * @param where The method of indexing, selected by dropdown in Blockly\r\n * @param opt_at The optional offset when indexing from start/end.\r\n * @returns Index expression.\r\n */\r\nconst getSubstringIndex = function (\r\n  stringName: string,\r\n  where: string,\r\n  opt_at?: string,\r\n): string | undefined {\r\n  if (where === 'FIRST') {\r\n    return '0';\r\n  } else if (where === 'FROM_END') {\r\n    return stringName + '.length - 1 - ' + opt_at;\r\n  } else if (where === 'LAST') {\r\n    return stringName + '.length - 1';\r\n  } else {\r\n    return opt_at;\r\n  }\r\n};\r\n\r\nexport function text(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Text value.\r\n  const code = generator.quote_(block.getFieldValue('TEXT'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function text_join(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Create a string made up of any number of elements of any type.\r\n  const joinBlock = block as JoinMutatorBlock;\r\n  switch (joinBlock.itemCount_) {\r\n    case 0:\r\n      return [\"''\", Order.ATOMIC];\r\n    case 1: {\r\n      const element =\r\n        generator.valueToCode(joinBlock, 'ADD0', Order.NONE) || \"''\";\r\n      const codeAndOrder = forceString(element);\r\n      return codeAndOrder;\r\n    }\r\n    case 2: {\r\n      const element0 =\r\n        generator.valueToCode(joinBlock, 'ADD0', Order.NONE) || \"''\";\r\n      const element1 =\r\n        generator.valueToCode(joinBlock, 'ADD1', Order.NONE) || \"''\";\r\n      const code = forceString(element0)[0] + ' + ' + forceString(element1)[0];\r\n      return [code, Order.ADDITION];\r\n    }\r\n    default: {\r\n      const elements = new Array(joinBlock.itemCount_);\r\n      for (let i = 0; i < joinBlock.itemCount_; i++) {\r\n        elements[i] =\r\n          generator.valueToCode(joinBlock, 'ADD' + i, Order.NONE) || \"''\";\r\n      }\r\n      const code = '[' + elements.join(',') + \"].join('')\";\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n  }\r\n}\r\n\r\nexport function text_append(block: Block, generator: JavascriptGenerator) {\r\n  // Append to a variable in place.\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const code = varName + ' += ' + forceString(value)[0] + ';\\n';\r\n  return code;\r\n}\r\n\r\nexport function text_length(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\r\n  return [text + '.length', Order.MEMBER];\r\n}\r\n\r\nexport function text_isEmpty(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\r\n  return ['!' + text + '.length', Order.LOGICAL_NOT];\r\n}\r\n\r\nexport function text_indexOf(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Search the text for a substring.\r\n  const operator =\r\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\r\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\r\n  const code = text + '.' + operator + '(' + substring + ')';\r\n  // Adjust index if using one-based indices.\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    return [code + ' + 1', Order.ADDITION];\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_charAt(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Get letter at index.\r\n  // Note: Until January 2013 this block did not have the WHERE input.\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const textOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\r\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\r\n  switch (where) {\r\n    case 'FIRST': {\r\n      const code = text + '.charAt(0)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'LAST': {\r\n      const code = text + '.slice(-1)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      // Adjust index if using one-based indices.\r\n      const code = text + '.charAt(' + at + ')';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjusted(block, 'AT', 1, true);\r\n      const code = text + '.slice(' + at + ').charAt(0)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'RANDOM': {\r\n      const functionName = generator.provideFunction_(\r\n        'textRandomLetter',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(text) {\r\n  var x = Math.floor(Math.random() * text.length);\r\n  return text[x];\r\n}\r\n`,\r\n      );\r\n      const code = functionName + '(' + text + ')';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n  }\r\n  throw Error('Unhandled option (text_charAt).');\r\n}\r\n\r\nexport function text_getSubstring(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Dictionary of WHEREn field choices and their CamelCase equivalents. */\r\n  const wherePascalCase = {\r\n    'FIRST': 'First',\r\n    'LAST': 'Last',\r\n    'FROM_START': 'FromStart',\r\n    'FROM_END': 'FromEnd',\r\n  };\r\n  type WhereOption = keyof typeof wherePascalCase;\r\n  // Get substring.\r\n  const where1 = block.getFieldValue('WHERE1') as WhereOption;\r\n  const where2 = block.getFieldValue('WHERE2') as WhereOption;\r\n  const requiresLengthCall =\r\n    where1 !== 'FROM_END' &&\r\n    where1 !== 'LAST' &&\r\n    where2 !== 'FROM_END' &&\r\n    where2 !== 'LAST';\r\n  const textOrder = requiresLengthCall ? Order.MEMBER : Order.NONE;\r\n  const text = generator.valueToCode(block, 'STRING', textOrder) || \"''\";\r\n  let code;\r\n  if (where1 === 'FIRST' && where2 === 'LAST') {\r\n    code = text;\r\n    return [code, Order.NONE];\r\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\r\n    // If the text is a variable or literal or doesn't require a call for\r\n    // length, don't generate a helper function.\r\n    let at1;\r\n    switch (where1) {\r\n      case 'FROM_START':\r\n        at1 = generator.getAdjusted(block, 'AT1');\r\n        break;\r\n      case 'FROM_END':\r\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.SUBTRACTION);\r\n        at1 = text + '.length - ' + at1;\r\n        break;\r\n      case 'FIRST':\r\n        at1 = '0';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (text_getSubstring).');\r\n    }\r\n    let at2;\r\n    switch (where2) {\r\n      case 'FROM_START':\r\n        at2 = generator.getAdjusted(block, 'AT2', 1);\r\n        break;\r\n      case 'FROM_END':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\r\n        at2 = text + '.length - ' + at2;\r\n        break;\r\n      case 'LAST':\r\n        at2 = text + '.length';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (text_getSubstring).');\r\n    }\r\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n    // we add it as a parameter.\r\n    const at1Param =\r\n      where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '';\r\n    const at2Param =\r\n      where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '';\r\n    const functionName = generator.provideFunction_(\r\n      'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\r\n      `\r\nfunction ${\r\n        generator.FUNCTION_NAME_PLACEHOLDER_\r\n      }(sequence${at1Param}${at2Param}) {\r\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\r\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\r\n  return sequence.slice(start, end);\r\n}\r\n`,\r\n    );\r\n    code =\r\n      functionName +\r\n      '(' +\r\n      text +\r\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n      // pass it.\r\n      (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', ' + at1 : '') +\r\n      (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', ' + at2 : '') +\r\n      ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_changeCase(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Change capitalization.\r\n  const OPERATORS = {\r\n    'UPPERCASE': '.toUpperCase()',\r\n    'LOWERCASE': '.toLowerCase()',\r\n    'TITLECASE': null,\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('CASE') as OperatorOption];\r\n  const textOrder = operator ? Order.MEMBER : Order.NONE;\r\n  const text = generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\r\n  let code;\r\n  if (operator) {\r\n    // Upper and lower case are functions built into generator.\r\n    code = text + operator;\r\n  } else {\r\n    // Title case is not a native JavaScript function.  Define one.\r\n    const functionName = generator.provideFunction_(\r\n      'textToTitleCase',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str) {\r\n  return str.replace(/\\\\S+/g,\r\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\r\n}\r\n`,\r\n    );\r\n    code = functionName + '(' + text + ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_trim(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Trim spaces.\r\n  const OPERATORS = {\r\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n    'BOTH': '.trim()',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  return [text + operator, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_print(block: Block, generator: JavascriptGenerator) {\r\n  // Print statement.\r\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return 'window.alert(' + msg + ');\\n';\r\n}\r\n\r\nexport function text_prompt_ext(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Prompt function.\r\n  let msg;\r\n  if (block.getField('TEXT')) {\r\n    // Internal message.\r\n    msg = generator.quote_(block.getFieldValue('TEXT'));\r\n  } else {\r\n    // External message.\r\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  }\r\n  let code = 'window.prompt(' + msg + ')';\r\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\r\n  if (toNumber) {\r\n    code = 'Number(' + code + ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport const text_prompt = text_prompt_ext;\r\n\r\nexport function text_count(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\r\n  const functionName = generator.provideFunction_(\r\n    'textCount',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\r\n  if (needle.length === 0) {\r\n    return haystack.length + 1;\r\n  } else {\r\n    return haystack.split(needle).length - 1;\r\n  }\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + text + ', ' + sub + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_replace(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\r\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\r\n  // The regex escaping code below is taken from the implementation of\r\n  // goog.string.regExpEscape.\r\n  const functionName = generator.provideFunction_(\r\n    'textReplace',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\r\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\r\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\r\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_reverse(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const code = text + \".split('').reverse().join('')\";\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.variables\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function variables_get(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Variable getter.\r\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function variables_set(block: Block, generator: JavascriptGenerator) {\r\n  // Variable setter.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' = ' + argument0 + ';\\n';\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file JavaScript code generator class, including helper methods for\r\n * generating JavaScript for blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport {CodeGenerator} from '../../core/generator.js';\r\nimport {inputTypes} from '../../core/inputs/input_types.js';\r\nimport {Names, NameType} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport * as Variables from '../../core/variables.js';\r\nimport type {Workspace} from '../../core/workspace.js';\r\n\r\n/**\r\n * Order of operation ENUMs.\r\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\r\n */\r\n// prettier-ignore\r\nexport enum Order {\r\n  ATOMIC = 0,            // 0 \"\" ...\r\n  NEW = 1.1,             // new\r\n  MEMBER = 1.2,          // . []\r\n  FUNCTION_CALL = 2,     // ()\r\n  INCREMENT = 3,         // ++\r\n  DECREMENT = 3,         // --\r\n  BITWISE_NOT = 4.1,     // ~\r\n  UNARY_PLUS = 4.2,      // +\r\n  UNARY_NEGATION = 4.3,  // -\r\n  LOGICAL_NOT = 4.4,     // !\r\n  TYPEOF = 4.5,          // typeof\r\n  VOID = 4.6,            // void\r\n  DELETE = 4.7,          // delete\r\n  AWAIT = 4.8,           // await\r\n  EXPONENTIATION = 5.0,  // **\r\n  MULTIPLICATION = 5.1,  // *\r\n  DIVISION = 5.2,        // /\r\n  MODULUS = 5.3,         // %\r\n  SUBTRACTION = 6.1,     // -\r\n  ADDITION = 6.2,        // +\r\n  BITWISE_SHIFT = 7,     // << >> >>>\r\n  RELATIONAL = 8,        // < <= > >=\r\n  IN = 8,                // in\r\n  INSTANCEOF = 8,        // instanceof\r\n  EQUALITY = 9,          // == != === !==\r\n  BITWISE_AND = 10,      // &\r\n  BITWISE_XOR = 11,      // ^\r\n  BITWISE_OR = 12,       // |\r\n  LOGICAL_AND = 13,      // &&\r\n  LOGICAL_OR = 14,       // ||\r\n  CONDITIONAL = 15,      // ?:\r\n  ASSIGNMENT = 16,       // = += -= **= *= /= %= <<= >>= ...\r\n  YIELD = 17,            // yield\r\n  COMMA = 18,            // ,\r\n  NONE = 99,             // (...)\r\n}\r\n\r\n/**\r\n * JavaScript code generator class.\r\n */\r\nexport class JavascriptGenerator extends CodeGenerator {\r\n  /** List of outer-inner pairings that do NOT require parentheses. */\r\n  ORDER_OVERRIDES: [Order, Order][] = [\r\n    // (foo()).bar -> foo().bar\r\n    // (foo())[0] -> foo()[0]\r\n    [Order.FUNCTION_CALL, Order.MEMBER],\r\n    // (foo())() -> foo()()\r\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\r\n    // (foo.bar).baz -> foo.bar.baz\r\n    // (foo.bar)[0] -> foo.bar[0]\r\n    // (foo[0]).bar -> foo[0].bar\r\n    // (foo[0])[1] -> foo[0][1]\r\n    [Order.MEMBER, Order.MEMBER],\r\n    // (foo.bar)() -> foo.bar()\r\n    // (foo[0])() -> foo[0]()\r\n    [Order.MEMBER, Order.FUNCTION_CALL],\r\n\r\n    // !(!foo) -> !!foo\r\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\r\n    // a * (b * c) -> a * b * c\r\n    [Order.MULTIPLICATION, Order.MULTIPLICATION],\r\n    // a + (b + c) -> a + b + c\r\n    [Order.ADDITION, Order.ADDITION],\r\n    // a && (b && c) -> a && b && c\r\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\r\n    // a || (b || c) -> a || b || c\r\n    [Order.LOGICAL_OR, Order.LOGICAL_OR],\r\n  ];\r\n\r\n  /** @param name Name of the language the generator is for. */\r\n  constructor(name = 'JavaScript') {\r\n    super(name);\r\n    this.isInitialized = false;\r\n\r\n    // Copy Order values onto instance for backwards compatibility\r\n    // while ensuring they are not part of the publically-advertised\r\n    // API.\r\n    //\r\n    // TODO(#7085): deprecate these in due course.  (Could initially\r\n    // replace data properties with get accessors that call\r\n    // deprecate.warn().)\r\n    for (const key in Order) {\r\n      // Must assign Order[key] to a temporary to get the type guard to work;\r\n      // see https://github.com/microsoft/TypeScript/issues/10530.\r\n      const value = Order[key];\r\n      // Skip reverse-lookup entries in the enum.  Due to\r\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\r\n      // of TypeScript 5.5.2) actually narrows the type of value to\r\n      // never - but that still allows the following assignment to\r\n      // succeed.\r\n      if (typeof value === 'string') continue;\r\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\r\n    }\r\n\r\n    // List of illegal variable names.  This is not intended to be a\r\n    // security feature.  Blockly is 100% client-side, so bypassing\r\n    // this list is trivial.  This is intended to prevent users from\r\n    // accidentally clobbering a built-in object or function.\r\n    //\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\r\n    this.addReservedWords(\r\n      'break,case,catch,class,const,continue,debugger,default,delete,do,' +\r\n        'else,export,extends,finally,for,function,if,import,in,instanceof,' +\r\n        'new,return,super,switch,this,throw,try,typeof,var,void,' +\r\n        'while,with,yield,' +\r\n        'enum,' +\r\n        'implements,interface,let,package,private,protected,public,static,' +\r\n        'await,' +\r\n        'null,true,false,' +\r\n        // Magic variable.\r\n        'arguments,' +\r\n        // Everything in the current environment (835 items in Chrome,\r\n        // 104 in Node).\r\n        Object.getOwnPropertyNames(globalThis).join(','),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initialise the database of variable names.\r\n   *\r\n   * @param workspace Workspace to generate code from.\r\n   */\r\n  init(workspace: Workspace) {\r\n    super.init(workspace);\r\n\r\n    if (!this.nameDB_) {\r\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\r\n    } else {\r\n      this.nameDB_.reset();\r\n    }\r\n\r\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\r\n    this.nameDB_.populateVariables(workspace);\r\n    this.nameDB_.populateProcedures(workspace);\r\n\r\n    const defvars = [];\r\n    // Add developer variables (not created or named by the user).\r\n    const devVarList = Variables.allDeveloperVariables(workspace);\r\n    for (let i = 0; i < devVarList.length; i++) {\r\n      defvars.push(\r\n        this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\r\n      );\r\n    }\r\n\r\n    // Add user variables, but only ones that are being used.\r\n    const variables = Variables.allUsedVarModels(workspace);\r\n    for (let i = 0; i < variables.length; i++) {\r\n      defvars.push(\r\n        this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE),\r\n      );\r\n    }\r\n\r\n    // Declare all of the variables.\r\n    if (defvars.length) {\r\n      this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\r\n    }\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Prepend the generated code with the variable definitions.\r\n   *\r\n   * @param code Generated code.\r\n   * @returns Completed code.\r\n   */\r\n  finish(code: string): string {\r\n    // Convert the definitions dictionary into a list.\r\n    const definitions = Object.values(this.definitions_);\r\n    // Call Blockly.CodeGenerator's finish.\r\n    super.finish(code);\r\n    this.isInitialized = false;\r\n\r\n    this.nameDB_!.reset();\r\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\r\n  }\r\n\r\n  /**\r\n   * Naked values are top-level blocks with outputs that aren't plugged into\r\n   * anything.  A trailing semicolon is needed to make this legal.\r\n   *\r\n   * @param line Line of generated code.\r\n   * @returns Legal line of code.\r\n   */\r\n  scrubNakedValue(line: string): string {\r\n    return line + ';\\n';\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped JavaScript string, complete with\r\n   * quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns JavaScript string.\r\n   */\r\n  quote_(string: string): string {\r\n    // Can't use goog.string.quote since Google's style guide recommends\r\n    // JS string literals use single quotes.\r\n    string = string\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\\n/g, '\\\\\\n')\r\n      .replace(/'/g, \"\\\\'\");\r\n    return \"'\" + string + \"'\";\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped multiline JavaScript string, complete\r\n   * with quotes.\r\n   * @param string Text to encode.\r\n   * @returns JavaScript string.\r\n   */\r\n  multiline_quote_(string: string): string {\r\n    // Can't use goog.string.quote since Google's style guide recommends\r\n    // JS string literals use single quotes.\r\n    const lines = string.split(/\\n/g).map(this.quote_);\r\n    return lines.join(\" + '\\\\n' +\\n\");\r\n  }\r\n\r\n  /**\r\n   * Common tasks for generating JavaScript from blocks.\r\n   * Handles comments for the specified block and any connected value blocks.\r\n   * Calls any statements following this block.\r\n   *\r\n   * @param block The current block.\r\n   * @param code The JavaScript code created for this block.\r\n   * @param thisOnly True to generate code for only this statement.\r\n   * @returns JavaScript code with comments and subsequent blocks added.\r\n   */\r\n  scrub_(block: Block, code: string, thisOnly = false): string {\r\n    let commentCode = '';\r\n    // Only collect comments for blocks that aren't inline.\r\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\r\n      // Collect comment for this block.\r\n      let comment = block.getCommentText();\r\n      if (comment) {\r\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\r\n        commentCode += this.prefixLines(comment + '\\n', '// ');\r\n      }\r\n      // Collect comments for all value arguments.\r\n      // Don't collect comments for nested statements.\r\n      for (let i = 0; i < block.inputList.length; i++) {\r\n        if (block.inputList[i].type === inputTypes.VALUE) {\r\n          const childBlock = block.inputList[i].connection!.targetBlock();\r\n          if (childBlock) {\r\n            comment = this.allNestedComments(childBlock);\r\n            if (comment) {\r\n              commentCode += this.prefixLines(comment, '// ');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextBlock =\r\n      block.nextConnection && block.nextConnection.targetBlock();\r\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\r\n    return commentCode + code + nextCode;\r\n  }\r\n\r\n  /**\r\n   * Generate code representing the specified value input, adjusted to take into\r\n   * account indexing (zero- or one-based) and optionally by a specified delta\r\n   * and/or by negation.\r\n   *\r\n   * @param block The block.\r\n   * @param atId The ID of the input block to get (and adjust) the value of.\r\n   * @param delta Value to add.\r\n   * @param negate Whether to negate the value.\r\n   * @param order The highest order acting on this value.\r\n   * @returns The adjusted value or code that evaluates to it.\r\n   */\r\n  getAdjusted(\r\n    block: Block,\r\n    atId: string,\r\n    delta = 0,\r\n    negate = false,\r\n    order = Order.NONE,\r\n  ): string {\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      delta--;\r\n    }\r\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\r\n\r\n    let orderForInput = order;\r\n    if (delta > 0) {\r\n      orderForInput = Order.ADDITION;\r\n    } else if (delta < 0) {\r\n      orderForInput = Order.SUBTRACTION;\r\n    } else if (negate) {\r\n      orderForInput = Order.UNARY_NEGATION;\r\n    }\r\n\r\n    let at = this.valueToCode(block, atId, orderForInput) || defaultAtIndex;\r\n\r\n    // Easy case: no adjustments.\r\n    if (delta === 0 && !negate) {\r\n      return at;\r\n    }\r\n    // If the index is a naked number, adjust it right now.\r\n    if (stringUtils.isNumber(at)) {\r\n      at = String(Number(at) + delta);\r\n      if (negate) {\r\n        at = String(-Number(at));\r\n      }\r\n      return at;\r\n    }\r\n    // If the index is dynamic, adjust it in code.\r\n    if (delta > 0) {\r\n      at = `${at} + ${delta}`;\r\n    } else if (delta < 0) {\r\n      at = `${at} - ${-delta}`;\r\n    }\r\n    if (negate) {\r\n      at = delta ? `-(${at})` : `-${at}`;\r\n    }\r\n    if (Math.floor(order) >= Math.floor(orderForInput)) {\r\n      at = `(${at})`;\r\n    }\r\n    return at;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for dynamic variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.variablesDynamic\r\n\r\n// JavaScript is dynamically typed.\r\nexport {\r\n  variables_get as variables_get_dynamic,\r\n  variables_set as variables_set_dynamic,\r\n} from './variables.js';\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Instantiate a JavascriptGenerator and populate it with the\r\n * complete set of block generator functions for JavaScript.  This is\r\n * the entrypoint for javascript_compressed.js.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.all\r\n\r\nimport {JavascriptGenerator} from './javascript/javascript_generator.js';\r\nimport * as lists from './javascript/lists.js';\r\nimport * as logic from './javascript/logic.js';\r\nimport * as loops from './javascript/loops.js';\r\nimport * as math from './javascript/math.js';\r\nimport * as procedures from './javascript/procedures.js';\r\nimport * as text from './javascript/text.js';\r\nimport * as variables from './javascript/variables.js';\r\nimport * as variablesDynamic from './javascript/variables_dynamic.js';\r\n\r\nexport * from './javascript/javascript_generator.js';\r\n\r\n/**\r\n * JavaScript code generator instance.\r\n * @type {!JavascriptGenerator}\r\n */\r\nexport const javascriptGenerator = new JavascriptGenerator();\r\n\r\n// Install per-block-type generator functions:\r\nconst generators: typeof javascriptGenerator.forBlock = {\r\n  ...lists,\r\n  ...logic,\r\n  ...loops,\r\n  ...math,\r\n  ...procedures,\r\n  ...text,\r\n  ...variables,\r\n  ...variablesDynamic,\r\n};\r\nfor (const name in generators) {\r\n  javascriptGenerator.forBlock[name] = generators[name];\r\n}\r\n"]}