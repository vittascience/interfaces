{"version":3,"sources":["generators/php/lists.ts","generators/php/logic.ts","generators/php/loops.ts","generators/php/math.ts","generators/php/procedures.ts","generators/php/text.ts","generators/php/variables.ts","generators/php/php_generator.ts","generators/php/variables_dynamic.ts","generators/php.ts"],"names":["lists_create_empty","block","generator","Order","FUNCTION_CALL","lists_create_with","elements","Array","itemCount_","i","valueToCode","NONE","join","lists_repeat","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","element","repeatCount","lists_length","list","lists_isEmpty","lists_indexOf","argument0","argument1","MEMBER","errorIndex","indexAdjustment","workspace","options","oneBasedIndex","getFieldValue","lists_getIndex","mode","at","getAdjusted","SUBTRACTION","code","Error","lists_setIndex","where","value","ASSIGNMENT","cachedList","REFERENCE","match","listVar","nameDB_","getDistinctName","NameType","VARIABLE","xVar","lists_getSublist","where1","where2","at1","at2","length","isNumber","String","lists_sort","listCode","direction","type","lists_split","value_input","value_delim","lists_reverse","controls_if","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","operator","OPERATORS","order","EQUALITY","RELATIONAL","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","LOGICAL_NOT","logic_boolean","ATOMIC","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","Number","branch","addLoopTrap","loopVar","endVar","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","up","step","Math","abs","startVar","incVar","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","number","Infinity","UNARY_NEGATION","math_arithmetic","tuple","ADDITION","MULTIPLICATION","DIVISION","POWER","math_single","arg","math_constant","CONSTANTS","math_number_property","PROPERTIES","MODULUS","dropdownProperty","prefix","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","globals","usedVariables","allUsedVarModels","variable","name","getVars","includes","push","devVarList","allDeveloperVariables","getName","DEVELOPER_VARIABLE","globalStr","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","scrub_","definitions_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","quote_","text_join","element0","STRING_CONCAT","element1","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","text_getSubstring","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","CLONE","NEW","INCREMENT","DECREMENT","BITWISE_NOT","CAST","SUPPRESS_ERROR","INSTANCEOF","UNARY_PLUS","BITWISE_SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","IF_NULL","LOGICAL_AND_WEAK","LOGICAL_XOR","LOGICAL_OR_WEAK","PhpGenerator","CodeGenerator","constructor","ORDER_OVERRIDES","isInitialized","key","addReservedWords","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","finish","definitions","Object","values","scrubNakedValue","line","string","replace","multiline_quote_","split","map","lines","thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","delta","negate","defaultAtIndex","orderForInput","floor","$jscomp$tmp$exports$module$name","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","text_prompt","phpGenerator","generators","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"php_compressed.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for list blocks.\r\n */\r\n\r\n/**\r\n * Lists in PHP are known to break when non-variables are passed into blocks\r\n * that require a list. PHP, unlike other languages, passes arrays as reference\r\n * value instead of value so we are unable to support it to the extent we can\r\n * for the other languages.\r\n * For example, a ternary operator with two arrays will return the array by\r\n * value and that cannot be passed into any of the built-in array functions for\r\n * PHP (because only variables can be passed by reference).\r\n * ex:  end(true ? list1 : list2)\r\n */\r\n\r\n// Former goog.module ID: Blockly.generator.lists\r\n\r\nimport type {CreateWithBlock} from '../../blocks/lists.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\nimport {Order} from './php_generator.js';\r\n\r\nexport function lists_create_empty(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Create an empty list.\r\n  return ['array()', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_create_with(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Create a list with any number of elements of any type.\r\n  const createWithBlock = block as CreateWithBlock;\r\n  const elements = new Array(createWithBlock.itemCount_);\r\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\r\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\r\n  }\r\n  const code = 'array(' + elements.join(', ') + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_repeat(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Create a list with one element repeated.\r\n  const functionName = generator.provideFunction_(\r\n    'lists_repeat',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value, $count) {\r\n  $array = array();\r\n  for ($index = 0; $index < $count; $index++) {\r\n    $array[] = $value;\r\n  }\r\n  return $array;\r\n}\r\n`,\r\n  );\r\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\r\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_length(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const functionName = generator.provideFunction_(\r\n    'length',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value) {\r\n  if (is_string($value)) {\r\n    return strlen($value);\r\n  } else {\r\n    return count($value);\r\n  }\r\n}\r\n`,\r\n  );\r\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  return [functionName + '(' + list + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_isEmpty(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const argument0 =\r\n    generator.valueToCode(block, 'VALUE', Order.FUNCTION_CALL) || 'array()';\r\n  return ['empty(' + argument0 + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_indexOf(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Find an item in the list.\r\n  const argument0 = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const argument1 = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\r\n  let errorIndex = ' -1';\r\n  let indexAdjustment = '';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    errorIndex = ' 0';\r\n    indexAdjustment = ' + 1';\r\n  }\r\n  let functionName;\r\n  if (block.getFieldValue('END') === 'FIRST') {\r\n    // indexOf\r\n    functionName = generator.provideFunction_(\r\n      'indexOf',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($haystack, $needle) {\r\n  for ($index = 0; $index < count($haystack); $index++) {\r\n    if ($haystack[$index] == $needle) return $index${indexAdjustment};\r\n  }\r\n  return ${errorIndex};\r\n}\r\n`,\r\n    );\r\n  } else {\r\n    // lastIndexOf\r\n    functionName = generator.provideFunction_(\r\n      'lastIndexOf',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($haystack, $needle) {\r\n  $last = ${errorIndex};\r\n  for ($index = 0; $index < count($haystack); $index++) {\r\n    if ($haystack[$index] == $needle) $last = $index${indexAdjustment};\r\n  }\r\n  return $last;\r\n}\r\n`,\r\n    );\r\n  }\r\n\r\n  const code = functionName + '(' + argument1 + ', ' + argument0 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_getIndex(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] | string {\r\n  // Get element at index.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'GET') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.MEMBER) || 'array()';\r\n        const code = list + '[0]';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const code = 'array_shift(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        return 'array_shift(' + list + ');\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'GET') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const code = 'end(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const code = 'array_pop(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        return 'array_pop(' + list + ');\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      if (mode === 'GET') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.MEMBER) || 'array()';\r\n        const code = list + '[' + at + ']';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const code = 'array_splice(' + list + ', ' + at + ', 1)[0]';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        return 'array_splice(' + list + ', ' + at + ', 1);\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END':\r\n      if (mode === 'GET') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const at = generator.getAdjusted(block, 'AT', 1, true);\r\n        const code = 'array_slice(' + list + ', ' + at + ', 1)[0]';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'GET_REMOVE' || mode === 'REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const at = generator.getAdjusted(\r\n          block,\r\n          'AT',\r\n          1,\r\n          false,\r\n          Order.SUBTRACTION,\r\n        );\r\n        const code =\r\n          'array_splice(' + list + ', count(' + list + ') - ' + at + ', 1)[0]';\r\n        if (mode === 'GET_REMOVE') {\r\n          return [code, Order.FUNCTION_CALL];\r\n        } else if (mode === 'REMOVE') {\r\n          return code + ';\\n';\r\n        }\r\n      }\r\n      break;\r\n    case 'RANDOM': {\r\n      const list =\r\n        generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n      if (mode === 'GET') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_get_random_item',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list) {\r\n  return $list[rand(0,count($list)-1)];\r\n}\r\n`,\r\n        );\r\n        const code = functionName + '(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_get_remove_random_item',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list) {\r\n  $x = rand(0,count($list)-1);\r\n  unset($list[$x]);\r\n  return array_values($list);\r\n}\r\n`,\r\n        );\r\n        const code = functionName + '(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_remove_random_item',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list) {\r\n  unset($list[rand(0,count($list)-1)]);\r\n}\r\n`,\r\n        );\r\n        return functionName + '(' + list + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_getIndex).');\r\n}\r\n\r\nexport function lists_setIndex(block: Block, generator: PhpGenerator) {\r\n  // Set element at index.\r\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const value = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  // Closure, which accesses and modifies 'list'.\r\n  let cachedList: string;\r\n  function cacheList() {\r\n    if (cachedList.match(/^\\$\\w+$/)) {\r\n      return '';\r\n    }\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmp_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    const code = listVar + ' = &' + cachedList + ';\\n';\r\n    cachedList = listVar;\r\n    return code;\r\n  }\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'SET') {\r\n        const list =\r\n          generator.valueToCode(block, 'LIST', Order.MEMBER) || 'array()';\r\n        return list + '[0] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        const list =\r\n          generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n        return 'array_unshift(' + list + ', ' + value + ');\\n';\r\n      }\r\n      break;\r\n    case 'LAST': {\r\n      const list =\r\n        generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n      if (mode === 'SET') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_set_last_item',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $value) {\r\n  $list[count($list) - 1] = $value;\r\n}\r\n`,\r\n        );\r\n        return functionName + '(' + list + ', ' + value + ');\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return 'array_push(' + list + ', ' + value + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      if (mode === 'SET') {\r\n        const list =\r\n          generator.valueToCode(block, 'LIST', Order.MEMBER) || 'array()';\r\n        return list + '[' + at + '] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        const list =\r\n          generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n        return 'array_splice(' + list + ', ' + at + ', 0, ' + value + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const list =\r\n        generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n      const at = generator.getAdjusted(block, 'AT', 1);\r\n      if (mode === 'SET') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_set_from_end',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $at, $value) {\r\n  $list[count($list) - $at] = $value;\r\n}\r\n`,\r\n        );\r\n        return functionName + '(' + list + ', ' + at + ', ' + value + ');\\n';\r\n      } else if (mode === 'INSERT') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_insert_from_end',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $at, $value) {\r\n  return array_splice($list, count($list) - $at, 0, $value);\r\n}\r\n`,\r\n        );\r\n        return functionName + '(' + list + ', ' + at + ', ' + value + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM':\r\n      cachedList =\r\n        generator.valueToCode(block, 'LIST', Order.REFERENCE) || 'array()';\r\n      let code = cacheList();\r\n      const list = cachedList;\r\n      const xVar = generator.nameDB_!.getDistinctName(\r\n        'tmp_x',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += xVar + ' = rand(0, count(' + list + ')-1);\\n';\r\n      if (mode === 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code += 'array_splice(' + list + ', ' + xVar + ', 0, ' + value + ');\\n';\r\n        return code;\r\n      }\r\n      break;\r\n  }\r\n  throw Error('Unhandled combination (lists_setIndex).');\r\n}\r\n\r\nexport function lists_getSublist(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Get sublist.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  let code;\r\n  if (where1 === 'FIRST' && where2 === 'LAST') {\r\n    code = list;\r\n  } else if (\r\n    list.match(/^\\$\\w+$/) ||\r\n    (where1 !== 'FROM_END' && where2 === 'FROM_START')\r\n  ) {\r\n    // If the list is a simple value or doesn't require a call for length, don't\r\n    // generate a helper function.\r\n    let at1;\r\n    switch (where1) {\r\n      case 'FROM_START':\r\n        at1 = generator.getAdjusted(block, 'AT1');\r\n        break;\r\n      case 'FROM_END':\r\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.SUBTRACTION);\r\n        at1 = 'count(' + list + ') - ' + at1;\r\n        break;\r\n      case 'FIRST':\r\n        at1 = '0';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    let at2;\r\n    let length;\r\n    switch (where2) {\r\n      case 'FROM_START':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\r\n        length = at2 + ' - ';\r\n        if (\r\n          stringUtils.isNumber(String(at1)) ||\r\n          String(at1).match(/^\\(.+\\)$/)\r\n        ) {\r\n          length += at1;\r\n        } else {\r\n          length += '(' + at1 + ')';\r\n        }\r\n        length += ' + 1';\r\n        break;\r\n      case 'FROM_END':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\r\n        length = 'count(' + list + ') - ' + at2 + ' - ';\r\n        if (\r\n          stringUtils.isNumber(String(at1)) ||\r\n          String(at1).match(/^\\(.+\\)$/)\r\n        ) {\r\n          length += at1;\r\n        } else {\r\n          length += '(' + at1 + ')';\r\n        }\r\n        break;\r\n      case 'LAST':\r\n        length = 'count(' + list + ') - ';\r\n        if (\r\n          stringUtils.isNumber(String(at1)) ||\r\n          String(at1).match(/^\\(.+\\)$/)\r\n        ) {\r\n          length += at1;\r\n        } else {\r\n          length += '(' + at1 + ')';\r\n        }\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    code = 'array_slice(' + list + ', ' + at1 + ', ' + length + ')';\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    const functionName = generator.provideFunction_(\r\n      'lists_get_sublist',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list, $where1, $at1, $where2, $at2) {\r\n  if ($where1 == 'FROM_END') {\r\n    $at1 = count($list) - 1 - $at1;\r\n  } else if ($where1 == 'FIRST') {\r\n    $at1 = 0;\r\n  } else if ($where1 != 'FROM_START') {\r\n    throw new Exception('Unhandled option (lists_get_sublist).');\r\n  }\r\n  $length = 0;\r\n  if ($where2 == 'FROM_START') {\r\n    $length = $at2 - $at1 + 1;\r\n  } else if ($where2 == 'FROM_END') {\r\n    $length = count($list) - $at1 - $at2;\r\n  } else if ($where2 == 'LAST') {\r\n    $length = count($list) - $at1;\r\n  } else {\r\n    throw new Exception('Unhandled option (lists_get_sublist).');\r\n  }\r\n  return array_slice($list, $at1, $length);\r\n}\r\n`,\r\n    );\r\n    code =\r\n      functionName +\r\n      '(' +\r\n      list +\r\n      \", '\" +\r\n      where1 +\r\n      \"', \" +\r\n      at1 +\r\n      \", '\" +\r\n      where2 +\r\n      \"', \" +\r\n      at2 +\r\n      ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_sort(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Block for sorting a list.\r\n  const listCode =\r\n    generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\r\n  const type = block.getFieldValue('TYPE');\r\n  const functionName = generator.provideFunction_(\r\n    'lists_sort',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list, $type, $direction) {\r\n  $sortCmpFuncs = array(\r\n    'NUMERIC' => 'strnatcasecmp',\r\n    'TEXT' => 'strcmp',\r\n    'IGNORE_CASE' => 'strcasecmp'\r\n  );\r\n  $sortCmp = $sortCmpFuncs[$type];\r\n  $list2 = $list;\r\n  usort($list2, $sortCmp);\r\n  if ($direction == -1) {\r\n    $list2 = array_reverse($list2);\r\n  }\r\n  return $list2;\r\n}\r\n`,\r\n  );\r\n  const sortCode =\r\n    functionName + '(' + listCode + ', \"' + type + '\", ' + direction + ')';\r\n  return [sortCode, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_split(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Block for splitting text into a list, or joining a list into text.\r\n  let value_input = generator.valueToCode(block, 'INPUT', Order.NONE);\r\n  const value_delim = generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\r\n  const mode = block.getFieldValue('MODE');\r\n  let functionName;\r\n  if (mode === 'SPLIT') {\r\n    if (!value_input) {\r\n      value_input = \"''\";\r\n    }\r\n    functionName = 'explode';\r\n  } else if (mode === 'JOIN') {\r\n    if (!value_input) {\r\n      value_input = 'array()';\r\n    }\r\n    functionName = 'implode';\r\n  } else {\r\n    throw Error('Unknown mode: ' + mode);\r\n  }\r\n  const code = functionName + '(' + value_delim + ', ' + value_input + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_reverse(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Block for reversing a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  const code = 'array_reverse(' + list + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for logic blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.logic\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\nimport {Order} from './php_generator.js';\r\n\r\nexport function controls_if(block: Block, generator: PhpGenerator) {\r\n  // If/elseif/else condition.\r\n  let n = 0;\r\n  let code = '',\r\n    branchCode,\r\n    conditionCode;\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  do {\r\n    conditionCode =\r\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\r\n    branchCode = generator.statementToCode(block, 'DO' + n);\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code +=\r\n      (n > 0 ? ' else ' : '') +\r\n      'if (' +\r\n      conditionCode +\r\n      ') {\\n' +\r\n      branchCode +\r\n      '}';\r\n    n++;\r\n  } while (block.getInput('IF' + n));\r\n\r\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\r\n    branchCode = generator.statementToCode(block, 'ELSE');\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += ' else {\\n' + branchCode + '}';\r\n  }\r\n  return code + '\\n';\r\n}\r\n\r\nexport const controls_ifelse = controls_if;\r\n\r\nexport function logic_compare(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Comparison operator.\r\n  const OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>=',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const order =\r\n    operator === '==' || operator === '!=' ? Order.EQUALITY : Order.RELATIONAL;\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_operation(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Operations 'and', 'or'.\r\n  const operator = block.getFieldValue('OP') === 'AND' ? '&&' : '||';\r\n  const order = operator === '&&' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\r\n  let argument0 = generator.valueToCode(block, 'A', order);\r\n  let argument1 = generator.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'false';\r\n    argument1 = 'false';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    const defaultArgument = operator === '&&' ? 'true' : 'false';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_negate(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Negation.\r\n  const order = Order.LOGICAL_NOT;\r\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\r\n  const code = '!' + argument0;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_boolean(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Boolean values true and false.\r\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function logic_null(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Null data type.\r\n  return ['null', Order.ATOMIC];\r\n}\r\n\r\nexport function logic_ternary(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Ternary operator.\r\n  const value_if =\r\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\r\n  const value_then =\r\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\r\n  const value_else =\r\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\r\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\r\n  return [code, Order.CONDITIONAL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for loop blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.loops\r\n\r\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\nimport {Order} from './php_generator.js';\r\n\r\nexport function controls_repeat_ext(block: Block, generator: PhpGenerator) {\r\n  // Repeat n times.\r\n  let repeats;\r\n  if (block.getField('TIMES')) {\r\n    // Internal number.\r\n    repeats = String(Number(block.getFieldValue('TIMES')));\r\n  } else {\r\n    // External number.\r\n    repeats = generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\r\n  }\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code = '';\r\n  const loopVar = generator.nameDB_!.getDistinctName(\r\n    'count',\r\n    NameType.VARIABLE,\r\n  );\r\n  let endVar = repeats;\r\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\r\n    endVar = generator.nameDB_!.getDistinctName(\r\n      'repeat_end',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += endVar + ' = ' + repeats + ';\\n';\r\n  }\r\n  code +=\r\n    'for (' +\r\n    loopVar +\r\n    ' = 0; ' +\r\n    loopVar +\r\n    ' < ' +\r\n    endVar +\r\n    '; ' +\r\n    loopVar +\r\n    '++) {\\n' +\r\n    branch +\r\n    '}\\n';\r\n  return code;\r\n}\r\n\r\nexport const controls_repeat = controls_repeat_ext;\r\n\r\nexport function controls_whileUntil(block: Block, generator: PhpGenerator) {\r\n  // Do while/until loop.\r\n  const until = block.getFieldValue('MODE') === 'UNTIL';\r\n  let argument0 =\r\n    generator.valueToCode(\r\n      block,\r\n      'BOOL',\r\n      until ? Order.LOGICAL_NOT : Order.NONE,\r\n    ) || 'false';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  if (until) {\r\n    argument0 = '!' + argument0;\r\n  }\r\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\r\n}\r\n\r\nexport function controls_for(block: Block, generator: PhpGenerator) {\r\n  // For loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\r\n  const increment = generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code;\r\n  if (\r\n    stringUtils.isNumber(argument0) &&\r\n    stringUtils.isNumber(argument1) &&\r\n    stringUtils.isNumber(increment)\r\n  ) {\r\n    // All arguments are simple numbers.\r\n    const up = Number(argument0) <= Number(argument1);\r\n    code =\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      argument0 +\r\n      '; ' +\r\n      variable0 +\r\n      (up ? ' <= ' : ' >= ') +\r\n      argument1 +\r\n      '; ' +\r\n      variable0;\r\n    const step = Math.abs(Number(increment));\r\n    if (step === 1) {\r\n      code += up ? '++' : '--';\r\n    } else {\r\n      code += (up ? ' += ' : ' -= ') + step;\r\n    }\r\n    code += ') {\\n' + branch + '}\\n';\r\n  } else {\r\n    code = '';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    let startVar = argument0;\r\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\r\n      startVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_start',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += startVar + ' = ' + argument0 + ';\\n';\r\n    }\r\n    let endVar = argument1;\r\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\r\n      endVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_end',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += endVar + ' = ' + argument1 + ';\\n';\r\n    }\r\n    // Determine loop direction at start, in case one of the bounds\r\n    // changes during loop execution.\r\n    const incVar = generator.nameDB_!.getDistinctName(\r\n      variable0 + '_inc',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += incVar + ' = ';\r\n    if (stringUtils.isNumber(increment)) {\r\n      code += Math.abs(Number(increment)) + ';\\n';\r\n    } else {\r\n      code += 'abs(' + increment + ');\\n';\r\n    }\r\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n    code += '}\\n';\r\n    code +=\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      startVar +\r\n      '; ' +\r\n      incVar +\r\n      ' >= 0 ? ' +\r\n      variable0 +\r\n      ' <= ' +\r\n      endVar +\r\n      ' : ' +\r\n      variable0 +\r\n      ' >= ' +\r\n      endVar +\r\n      '; ' +\r\n      variable0 +\r\n      ' += ' +\r\n      incVar +\r\n      ') {\\n' +\r\n      branch +\r\n      '}\\n';\r\n  }\r\n  return code;\r\n}\r\n\r\nexport function controls_forEach(block: Block, generator: PhpGenerator) {\r\n  // For each loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code = '';\r\n  code +=\r\n    'foreach (' + argument0 + ' as ' + variable0 + ') {\\n' + branch + '}\\n';\r\n  return code;\r\n}\r\n\r\nexport function controls_flow_statements(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n) {\r\n  // Flow statements: continue, break.\r\n  let xfix = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the break/continue is triggered.\r\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (generator.STATEMENT_PREFIX) {\r\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\r\n    if (loop && !loop.suppressPrefixSuffix) {\r\n      // Inject loop's statement prefix here since the regular one at the end\r\n      // of the loop will not get executed if 'continue' is triggered.\r\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\r\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\r\n    }\r\n  }\r\n  switch (block.getFieldValue('FLOW')) {\r\n    case 'BREAK':\r\n      return xfix + 'break;\\n';\r\n    case 'CONTINUE':\r\n      return xfix + 'continue;\\n';\r\n  }\r\n  throw Error('Unknown flow statement.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for math blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.math\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\nimport {Order} from './php_generator.js';\r\n\r\nexport function math_number(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Numeric value.\r\n  let number = Number(block.getFieldValue('NUM'));\r\n  if (number === Infinity) {\r\n    return ['INF', Order.ATOMIC];\r\n  } else if (number === -Infinity) {\r\n    return ['-INF', Order.UNARY_NEGATION];\r\n  }\r\n  return [String(number), number >= 0 ? Order.ATOMIC : Order.UNARY_NEGATION];\r\n}\r\n\r\nexport function math_arithmetic(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Basic arithmetic operators, and power.\r\n  const OPERATORS: Record<string, [string, Order]> = {\r\n    'ADD': [' + ', Order.ADDITION],\r\n    'MINUS': [' - ', Order.SUBTRACTION],\r\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\r\n    'DIVIDE': [' / ', Order.DIVISION],\r\n    'POWER': [' ** ', Order.POWER],\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const operator = tuple[0];\r\n  const order = tuple[1];\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + operator + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function math_single(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Math operators with single operand.\r\n  const operator = block.getFieldValue('OP');\r\n  let code;\r\n  let arg;\r\n  if (operator === 'NEG') {\r\n    // Negation is a special case given its different operator precedence.\r\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_NEGATION) || '0';\r\n    if (arg[0] === '-') {\r\n      // --3 is not legal in JS.\r\n      arg = ' ' + arg;\r\n    }\r\n    code = '-' + arg;\r\n    return [code, Order.UNARY_NEGATION];\r\n  }\r\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.DIVISION) || '0';\r\n  } else {\r\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  }\r\n  // First, handle cases which generate values that don't need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'ABS':\r\n      code = 'abs(' + arg + ')';\r\n      break;\r\n    case 'ROOT':\r\n      code = 'sqrt(' + arg + ')';\r\n      break;\r\n    case 'LN':\r\n      code = 'log(' + arg + ')';\r\n      break;\r\n    case 'EXP':\r\n      code = 'exp(' + arg + ')';\r\n      break;\r\n    case 'POW10':\r\n      code = 'pow(10,' + arg + ')';\r\n      break;\r\n    case 'ROUND':\r\n      code = 'round(' + arg + ')';\r\n      break;\r\n    case 'ROUNDUP':\r\n      code = 'ceil(' + arg + ')';\r\n      break;\r\n    case 'ROUNDDOWN':\r\n      code = 'floor(' + arg + ')';\r\n      break;\r\n    case 'SIN':\r\n      code = 'sin(' + arg + ' / 180 * pi())';\r\n      break;\r\n    case 'COS':\r\n      code = 'cos(' + arg + ' / 180 * pi())';\r\n      break;\r\n    case 'TAN':\r\n      code = 'tan(' + arg + ' / 180 * pi())';\r\n      break;\r\n  }\r\n  if (code) {\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n  // Second, handle cases which generate values that may need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'LOG10':\r\n      code = 'log(' + arg + ') / log(10)';\r\n      break;\r\n    case 'ASIN':\r\n      code = 'asin(' + arg + ') / pi() * 180';\r\n      break;\r\n    case 'ACOS':\r\n      code = 'acos(' + arg + ') / pi() * 180';\r\n      break;\r\n    case 'ATAN':\r\n      code = 'atan(' + arg + ') / pi() * 180';\r\n      break;\r\n    default:\r\n      throw Error('Unknown math operator: ' + operator);\r\n  }\r\n  return [code, Order.DIVISION];\r\n}\r\n\r\nexport function math_constant(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\r\n  const CONSTANTS: Record<string, [string, Order]> = {\r\n    'PI': ['M_PI', Order.ATOMIC],\r\n    'E': ['M_E', Order.ATOMIC],\r\n    'GOLDEN_RATIO': ['(1 + sqrt(5)) / 2', Order.DIVISION],\r\n    'SQRT2': ['M_SQRT2', Order.ATOMIC],\r\n    'SQRT1_2': ['M_SQRT1_2', Order.ATOMIC],\r\n    'INFINITY': ['INF', Order.ATOMIC],\r\n  };\r\n  type ConstantOption = keyof typeof CONSTANTS;\r\n  return CONSTANTS[block.getFieldValue('CONSTANT') as ConstantOption];\r\n}\r\n\r\nexport function math_number_property(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Check if a number is even, odd, prime, whole, positive, or negative\r\n  // or if it is divisible by certain number. Returns true or false.\r\n  const PROPERTIES: Record<\r\n    string,\r\n    [string, string, Order, Order] | [null, null, Order, Order]\r\n  > = {\r\n    'EVEN': ['', ' % 2 == 0', Order.MODULUS, Order.EQUALITY],\r\n    'ODD': ['', ' % 2 == 1', Order.MODULUS, Order.EQUALITY],\r\n    'WHOLE': ['is_int(', ')', Order.NONE, Order.FUNCTION_CALL],\r\n    'POSITIVE': ['', ' > 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'NEGATIVE': ['', ' < 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'DIVISIBLE_BY': [null, null, Order.MODULUS, Order.EQUALITY],\r\n    'PRIME': [null, null, Order.NONE, Order.FUNCTION_CALL],\r\n  };\r\n  type PropertyOption = keyof typeof PROPERTIES;\r\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\r\n  const [prefix, suffix, inputOrder, outputOrder] =\r\n    PROPERTIES[dropdownProperty];\r\n  const numberToCheck =\r\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\r\n  let code;\r\n  if (dropdownProperty === 'PRIME') {\r\n    // Prime is a special case as it is not a one-liner test.\r\n    const functionName = generator.provideFunction_(\r\n      'math_isPrime',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($n) {\r\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\r\n  if ($n == 2 || $n == 3) {\r\n    return true;\r\n  }\r\n  // False if n is NaN, negative, is 1, or not whole.\r\n  // And false if n is divisible by 2 or 3.\r\n  if (!is_numeric($n) || $n <= 1 || $n % 1 != 0 || $n % 2 == 0 || $n % 3 == 0) {\r\n    return false;\r\n  }\r\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\r\n  for ($x = 6; $x <= sqrt($n) + 1; $x += 6) {\r\n    if ($n % ($x - 1) == 0 || $n % ($x + 1) == 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n`,\r\n    );\r\n    code = functionName + '(' + numberToCheck + ')';\r\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\r\n    const divisor =\r\n      generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\r\n    if (divisor === '0') {\r\n      return ['false', Order.ATOMIC];\r\n    }\r\n    code = numberToCheck + ' % ' + divisor + ' == 0';\r\n  } else {\r\n    code = prefix + numberToCheck + suffix;\r\n  }\r\n  return [code, outputOrder];\r\n}\r\n\r\nexport function math_change(block: Block, generator: PhpGenerator) {\r\n  // Add to a variable in place.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DELTA', Order.ADDITION) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' += ' + argument0 + ';\\n';\r\n}\r\n\r\n// Rounding functions have a single operand.\r\nexport const math_round = math_single;\r\n// Trigonometry functions have a single operand.\r\nexport const math_trig = math_single;\r\n\r\nexport function math_on_list(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Math functions for lists.\r\n  const func = block.getFieldValue('OP');\r\n  let list;\r\n  let code;\r\n  switch (func) {\r\n    case 'SUM':\r\n      list =\r\n        generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || 'array()';\r\n      code = 'array_sum(' + list + ')';\r\n      break;\r\n    case 'MIN':\r\n      list =\r\n        generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || 'array()';\r\n      code = 'min(' + list + ')';\r\n      break;\r\n    case 'MAX':\r\n      list =\r\n        generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || 'array()';\r\n      code = 'max(' + list + ')';\r\n      break;\r\n    case 'AVERAGE': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_mean',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($myList) {\r\n  return array_sum($myList) / count($myList);\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MEDIAN': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_median',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($arr) {\r\n  sort($arr,SORT_NUMERIC);\r\n  return (count($arr) % 2) ? $arr[floor(count($arr) / 2)] :\r\n      ($arr[floor(count($arr) / 2)] + $arr[floor(count($arr) / 2) - 1]) / 2;\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MODE': {\r\n      // As a list of numbers can contain more than one mode,\r\n      // the returned result is provided as an array.\r\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\r\n      const functionName = generator.provideFunction_(\r\n        'math_modes',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($values) {\r\n  if (empty($values)) return array();\r\n  $counts = array_count_values($values);\r\n  arsort($counts); // Sort counts in descending order\r\n  $modes = array_keys($counts, current($counts), true);\r\n  return $modes;\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'STD_DEV': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_standard_deviation',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($numbers) {\r\n  $n = count($numbers);\r\n  if (!$n) return null;\r\n  $mean = array_sum($numbers) / count($numbers);\r\n  foreach($numbers as $key => $num) $devs[$key] = pow($num - $mean, 2);\r\n  return sqrt(array_sum($devs) / (count($devs) - 1));\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_random_list',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list) {\r\n  $x = rand(0, count($list)-1);\r\n  return $list[$x];\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    default:\r\n      throw Error('Unknown operator: ' + func);\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_modulo(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Remainder computation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DIVIDEND', Order.MODULUS) || '0';\r\n  const argument1 =\r\n    generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\r\n  const code = argument0 + ' % ' + argument1;\r\n  return [code, Order.MODULUS];\r\n}\r\n\r\nexport function math_constrain(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Constrain a number between two limits.\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\r\n  const argument2 =\r\n    generator.valueToCode(block, 'HIGH', Order.NONE) || 'Infinity';\r\n  const code =\r\n    'min(max(' + argument0 + ', ' + argument1 + '), ' + argument2 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_int(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Random integer between [X] and [Y].\r\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  const functionName = generator.provideFunction_(\r\n    'math_random_int',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($a, $b) {\r\n  if ($a > $b) {\r\n    return rand($b, $a);\r\n  }\r\n  return rand($a, $b);\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_float(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Random fraction between 0 and 1.\r\n  return ['(float)rand()/(float)getrandmax()', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_atan2(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\r\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\r\n  return [\r\n    'atan2(' + argument1 + ', ' + argument0 + ') / pi() * 180',\r\n    Order.DIVISION,\r\n  ];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for procedure blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.procedures\r\n\r\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport * as Variables from '../../core/variables.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\nimport {Order} from './php_generator.js';\r\n\r\nexport function procedures_defreturn(block: Block, generator: PhpGenerator) {\r\n  // Define a procedure with a return value.\r\n  // First, add a 'global' statement for every variable that is not shadowed by\r\n  // a local parameter.\r\n  const globals = [];\r\n  const workspace = block.workspace;\r\n  const usedVariables = Variables.allUsedVarModels(workspace) || [];\r\n  for (const variable of usedVariables) {\r\n    const varName = variable.name;\r\n    // getVars returns parameter names, not ids, for procedure blocks\r\n    if (!block.getVars().includes(varName)) {\r\n      globals.push(generator.getVariableName(varName));\r\n    }\r\n  }\r\n  // Add developer variables.\r\n  const devVarList = Variables.allDeveloperVariables(workspace);\r\n  for (let i = 0; i < devVarList.length; i++) {\r\n    globals.push(\r\n      generator.nameDB_!.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\r\n    );\r\n  }\r\n  const globalStr = globals.length\r\n    ? generator.INDENT + 'global ' + globals.join(', ') + ';\\n'\r\n    : '';\r\n\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  let xfix1 = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (xfix1) {\r\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\r\n  }\r\n  let loopTrap = '';\r\n  if (generator.INFINITE_LOOP_TRAP) {\r\n    loopTrap = generator.prefixLines(\r\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  let branch = '';\r\n  if (block.getInput('STACK')) {\r\n    // The 'procedures_defreturn' block might not have a STACK input.\r\n    branch = generator.statementToCode(block, 'STACK');\r\n  }\r\n  let returnValue = '';\r\n  if (block.getInput('RETURN')) {\r\n    // The 'procedures_defnoreturn' block (which shares this code)\r\n    // does not have a RETURN input.\r\n    returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\r\n  }\r\n  let xfix2 = '';\r\n  if (branch && returnValue) {\r\n    // After executing the function body, revisit this block for the return.\r\n    xfix2 = xfix1;\r\n  }\r\n  if (returnValue) {\r\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\r\n  }\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.getVariableName(variables[i]);\r\n  }\r\n  let code =\r\n    'function ' +\r\n    funcName +\r\n    '(' +\r\n    args.join(', ') +\r\n    ') {\\n' +\r\n    globalStr +\r\n    xfix1 +\r\n    loopTrap +\r\n    branch +\r\n    xfix2 +\r\n    returnValue +\r\n    '}';\r\n  code = generator.scrub_(block, code);\r\n  // Add % so as not to collide with helper functions in definitions list.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\r\n  return null;\r\n}\r\n\r\n// Defining a procedure without a return value uses the same generator as\r\n// a procedure with a return value.\r\nexport const procedures_defnoreturn = procedures_defreturn;\r\n\r\nexport function procedures_callreturn(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Call a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\r\n  }\r\n  const code = funcName + '(' + args.join(', ') + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function procedures_callnoreturn(block: Block, generator: PhpGenerator) {\r\n  // Call a procedure with no return value.\r\n  // Generated code is for a function call as a statement is the same as a\r\n  // function call as a value, with the addition of line ending.\r\n  const tuple = generator.forBlock['procedures_callreturn'](\r\n    block,\r\n    generator,\r\n  ) as [string, Order];\r\n  return tuple[0] + ';\\n';\r\n}\r\n\r\nexport function procedures_ifreturn(block: Block, generator: PhpGenerator) {\r\n  // Conditionally return value from a procedure.\r\n  const condition =\r\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\r\n  let code = 'if (' + condition + ') {\\n';\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the return is triggered.\r\n    code += generator.prefixLines(\r\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  if ((block as IfReturnBlock).hasReturnValue_) {\r\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\r\n    code += generator.INDENT + 'return ' + value + ';\\n';\r\n  } else {\r\n    code += generator.INDENT + 'return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for text blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.texts\r\n\r\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\nimport {Order} from './php_generator.js';\r\n\r\nexport function text(block: Block, generator: PhpGenerator): [string, Order] {\r\n  // Text value.\r\n  const code = generator.quote_(block.getFieldValue('TEXT'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function text_join(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Create a string made up of any number of elements of any type.\r\n  const joinBlock = block as JoinMutatorBlock;\r\n  if (joinBlock.itemCount_ === 0) {\r\n    return [\"''\", Order.ATOMIC];\r\n  } else if (joinBlock.itemCount_ === 1) {\r\n    const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\r\n    const code = element;\r\n    return [code, Order.NONE];\r\n  } else if (joinBlock.itemCount_ === 2) {\r\n    const element0 =\r\n      generator.valueToCode(block, 'ADD0', Order.STRING_CONCAT) || \"''\";\r\n    const element1 =\r\n      generator.valueToCode(block, 'ADD1', Order.STRING_CONCAT) || \"''\";\r\n    const code = element0 + ' . ' + element1;\r\n    return [code, Order.STRING_CONCAT];\r\n  } else {\r\n    const elements = new Array(joinBlock.itemCount_);\r\n    for (let i = 0; i < joinBlock.itemCount_; i++) {\r\n      elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\r\n    }\r\n    const code = \"implode('', array(\" + elements.join(',') + '))';\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n}\r\n\r\nexport function text_append(block: Block, generator: PhpGenerator) {\r\n  // Append to a variable in place.\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const value = generator.valueToCode(block, 'TEXT', Order.ASSIGNMENT) || \"''\";\r\n  return varName + ' .= ' + value + ';\\n';\r\n}\r\n\r\nexport function text_length(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const functionName = generator.provideFunction_(\r\n    'length',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value) {\r\n  if (is_string($value)) {\r\n    return strlen($value);\r\n  }\r\n  return count($value);\r\n}\r\n`,\r\n  );\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  return [functionName + '(' + text + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_isEmpty(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  return ['empty(' + text + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_indexOf(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Search the text for a substring.\r\n  const operator =\r\n    block.getFieldValue('END') === 'FIRST' ? 'strpos' : 'strrpos';\r\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  let errorIndex = ' -1';\r\n  let indexAdjustment = '';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    errorIndex = ' 0';\r\n    indexAdjustment = ' + 1';\r\n  }\r\n  const functionName = generator.provideFunction_(\r\n    block.getFieldValue('END') === 'FIRST'\r\n      ? 'text_indexOf'\r\n      : 'text_lastIndexOf',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text, $search) {\r\n  $pos = ${operator}($text, $search);\r\n  return $pos === false ? ${errorIndex} : $pos${indexAdjustment};\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + text + ', ' + substring + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_charAt(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Get letter at index.\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const textOrder = where === 'RANDOM' ? Order.NONE : Order.NONE;\r\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\r\n  switch (where) {\r\n    case 'FIRST': {\r\n      const code = 'substr(' + text + ', 0, 1)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'LAST': {\r\n      const code = 'substr(' + text + ', -1)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      const code = 'substr(' + text + ', ' + at + ', 1)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjusted(block, 'AT', 1, true);\r\n      const code = 'substr(' + text + ', ' + at + ', 1)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'RANDOM': {\r\n      const functionName = generator.provideFunction_(\r\n        'text_random_letter',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text) {\r\n  return $text[rand(0, strlen($text) - 1)];\r\n}\r\n`,\r\n      );\r\n      const code = functionName + '(' + text + ')';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n  }\r\n  throw Error('Unhandled option (text_charAt).');\r\n}\r\n\r\nexport function text_getSubstring(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Get substring.\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  const text = generator.valueToCode(block, 'STRING', Order.NONE) || \"''\";\r\n  if (where1 === 'FIRST' && where2 === 'LAST') {\r\n    const code = text;\r\n    return [code, Order.NONE];\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    const functionName = generator.provideFunction_(\r\n      'text_get_substring',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text, $where1, $at1, $where2, $at2) {\r\n  if ($where1 == 'FROM_END') {\r\n    $at1 = strlen($text) - 1 - $at1;\r\n  } else if ($where1 == 'FIRST') {\r\n    $at1 = 0;\r\n  } else if ($where1 != 'FROM_START') {\r\n    throw new Exception('Unhandled option (text_get_substring).');\r\n  }\r\n  $length = 0;\r\n  if ($where2 == 'FROM_START') {\r\n    $length = $at2 - $at1 + 1;\r\n  } else if ($where2 == 'FROM_END') {\r\n    $length = strlen($text) - $at1 - $at2;\r\n  } else if ($where2 == 'LAST') {\r\n    $length = strlen($text) - $at1;\r\n  } else {\r\n    throw new Exception('Unhandled option (text_get_substring).');\r\n  }\r\n  return substr($text, $at1, $length);\r\n}\r\n`,\r\n    );\r\n    const code =\r\n      functionName +\r\n      '(' +\r\n      text +\r\n      \", '\" +\r\n      where1 +\r\n      \"', \" +\r\n      at1 +\r\n      \", '\" +\r\n      where2 +\r\n      \"', \" +\r\n      at2 +\r\n      ')';\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n}\r\n\r\nexport function text_changeCase(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Change capitalization.\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  let code;\r\n  if (block.getFieldValue('CASE') === 'UPPERCASE') {\r\n    code = 'strtoupper(' + text + ')';\r\n  } else if (block.getFieldValue('CASE') === 'LOWERCASE') {\r\n    code = 'strtolower(' + text + ')';\r\n  } else if (block.getFieldValue('CASE') === 'TITLECASE') {\r\n    code = 'ucwords(strtolower(' + text + '))';\r\n  }\r\n  return [code as string, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_trim(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Trim spaces.\r\n  const OPERATORS = {'LEFT': 'ltrim', 'RIGHT': 'rtrim', 'BOTH': 'trim'};\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return [operator + '(' + text + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_print(block: Block, generator: PhpGenerator) {\r\n  // Print statement.\r\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return 'print(' + msg + ');\\n';\r\n}\r\n\r\nexport function text_prompt_ext(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Prompt function.\r\n  let msg;\r\n  if (block.getField('TEXT')) {\r\n    // Internal message.\r\n    msg = generator.quote_(block.getFieldValue('TEXT'));\r\n  } else {\r\n    // External message.\r\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  }\r\n  let code = 'readline(' + msg + ')';\r\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\r\n  if (toNumber) {\r\n    code = 'floatval(' + code + ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport const text_prompt = text_prompt_ext;\r\n\r\nexport function text_count(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\r\n  const code =\r\n    'strlen(' +\r\n    sub +\r\n    ') === 0' +\r\n    ' ? strlen(' +\r\n    text +\r\n    ') + 1' +\r\n    ' : substr_count(' +\r\n    text +\r\n    ', ' +\r\n    sub +\r\n    ')';\r\n  return [code, Order.CONDITIONAL];\r\n}\r\n\r\nexport function text_replace(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\r\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\r\n  const code = 'str_replace(' + from + ', ' + to + ', ' + text + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_reverse(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const code = 'strrev(' + text + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.variables\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\nimport {Order} from './php_generator.js';\r\n\r\nexport function variables_get(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Variable getter.\r\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function variables_set(block: Block, generator: PhpGenerator) {\r\n  // Variable setter.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' = ' + argument0 + ';\\n';\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file PHP code generator class, including helper methods for\r\n * generating PHP for blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport {CodeGenerator} from '../../core/generator.js';\r\nimport {inputTypes} from '../../core/inputs/input_types.js';\r\nimport {Names} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Workspace} from '../../core/workspace.js';\r\n\r\n/**\r\n * Order of operation ENUMs.\r\n * http://php.net/manual/en/language.operators.precedence.php\r\n */\r\n// prettier-ignore\r\nexport enum Order {\r\n  ATOMIC = 0,             // 0 \"\" ...\r\n  CLONE = 1,              // clone\r\n  NEW = 1,                // new\r\n  MEMBER = 2.1,           // []\r\n  FUNCTION_CALL = 2.2,    // ()\r\n  POWER = 3,              // **\r\n  INCREMENT = 4,          // ++\r\n  DECREMENT = 4,          // --\r\n  BITWISE_NOT = 4,        // ~\r\n  CAST = 4,               // (int) (float) (string) (array) ...\r\n  SUPPRESS_ERROR = 4,     // @\r\n  INSTANCEOF = 5,         // instanceof\r\n  LOGICAL_NOT = 6,        // !\r\n  UNARY_PLUS = 7.1,       // +\r\n  UNARY_NEGATION = 7.2,   // -\r\n  MULTIPLICATION = 8.1,   // *\r\n  DIVISION = 8.2,         // /\r\n  MODULUS = 8.3,          // %\r\n  ADDITION = 9.1,         // +\r\n  SUBTRACTION = 9.2,      // -\r\n  STRING_CONCAT = 9.3,    // .\r\n  BITWISE_SHIFT = 10,     // << >>\r\n  RELATIONAL = 11,        // < <= > >=\r\n  EQUALITY = 12,          // == != === !== <> <=>\r\n  REFERENCE = 13,         // &\r\n  BITWISE_AND = 13,       // &\r\n  BITWISE_XOR = 14,       // ^\r\n  BITWISE_OR = 15,        // |\r\n  LOGICAL_AND = 16,       // &&\r\n  LOGICAL_OR = 17,        // ||\r\n  IF_NULL = 18,           // ??\r\n  CONDITIONAL = 19,       // ?:\r\n  ASSIGNMENT = 20,        // = += -= *= /= %= <<= >>= ...\r\n  LOGICAL_AND_WEAK = 21,  // and\r\n  LOGICAL_XOR = 22,       // xor\r\n  LOGICAL_OR_WEAK = 23,   // or\r\n  NONE = 99,              // (...)\r\n}\r\n\r\nexport class PhpGenerator extends CodeGenerator {\r\n  /** List of outer-inner pairings that do NOT require parentheses. */\r\n  ORDER_OVERRIDES: [Order, Order][] = [\r\n    // (foo()).bar() -> foo().bar()\r\n    // (foo())[0] -> foo()[0]\r\n    [Order.MEMBER, Order.FUNCTION_CALL],\r\n    // (foo[0])[1] -> foo[0][1]\r\n    // (foo.bar).baz -> foo.bar.baz\r\n    [Order.MEMBER, Order.MEMBER],\r\n    // !(!foo) -> !!foo\r\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\r\n    // a * (b * c) -> a * b * c\r\n    [Order.MULTIPLICATION, Order.MULTIPLICATION],\r\n    // a + (b + c) -> a + b + c\r\n    [Order.ADDITION, Order.ADDITION],\r\n    // a && (b && c) -> a && b && c\r\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\r\n    // a || (b || c) -> a || b || c\r\n    [Order.LOGICAL_OR, Order.LOGICAL_OR],\r\n  ];\r\n\r\n  /** @param name Name of the language the generator is for. */\r\n  constructor(name = 'PHP') {\r\n    super(name);\r\n    this.isInitialized = false;\r\n\r\n    // Copy Order values onto instance for backwards compatibility\r\n    // while ensuring they are not part of the publically-advertised\r\n    // API.\r\n    //\r\n    // TODO(#7085): deprecate these in due course.  (Could initially\r\n    // replace data properties with get accessors that call\r\n    // deprecate.warn().)\r\n    for (const key in Order) {\r\n      // Must assign Order[key] to a temporary to get the type guard to work;\r\n      // see https://github.com/microsoft/TypeScript/issues/10530.\r\n      const value = Order[key];\r\n      // Skip reverse-lookup entries in the enum.  Due to\r\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\r\n      // of TypeScript 5.5.2) actually narrows the type of value to\r\n      // never - but that still allows the following assignment to\r\n      // succeed.\r\n      if (typeof value === 'string') continue;\r\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\r\n    }\r\n\r\n    // List of illegal variable names.  This is not intended to be a\r\n    // security feature.  Blockly is 100% client-side, so bypassing\r\n    // this list is trivial.  This is intended to prevent users from\r\n    // accidentally clobbering a built-in object or function.\r\n    this.addReservedWords(\r\n      // http://php.net/manual/en/reserved.keywords.php\r\n      '__halt_compiler,abstract,and,array,as,break,callable,case,catch,class,' +\r\n        'clone,const,continue,declare,default,die,do,echo,else,elseif,empty,' +\r\n        'enddeclare,endfor,endforeach,endif,endswitch,endwhile,eval,exit,' +\r\n        'extends,final,for,foreach,function,global,goto,if,implements,include,' +\r\n        'include_once,instanceof,insteadof,interface,isset,list,namespace,new,' +\r\n        'or,print,private,protected,public,require,require_once,return,static,' +\r\n        'switch,throw,trait,try,unset,use,var,while,xor,' +\r\n        // http://php.net/manual/en/reserved.constants.php\r\n        'PHP_VERSION,PHP_MAJOR_VERSION,PHP_MINOR_VERSION,PHP_RELEASE_VERSION,' +\r\n        'PHP_VERSION_ID,PHP_EXTRA_VERSION,PHP_ZTS,PHP_DEBUG,PHP_MAXPATHLEN,' +\r\n        'PHP_OS,PHP_SAPI,PHP_EOL,PHP_INT_MAX,PHP_INT_SIZE,DEFAULT_INCLUDE_PATH,' +\r\n        'PEAR_INSTALL_DIR,PEAR_EXTENSION_DIR,PHP_EXTENSION_DIR,PHP_PREFIX,' +\r\n        'PHP_BINDIR,PHP_BINARY,PHP_MANDIR,PHP_LIBDIR,PHP_DATADIR,' +\r\n        'PHP_SYSCONFDIR,PHP_LOCALSTATEDIR,PHP_CONFIG_FILE_PATH,' +\r\n        'PHP_CONFIG_FILE_SCAN_DIR,PHP_SHLIB_SUFFIX,E_ERROR,E_WARNING,E_PARSE,' +\r\n        'E_NOTICE,E_CORE_ERROR,E_CORE_WARNING,E_COMPILE_ERROR,' +\r\n        'E_COMPILE_WARNING,E_USER_ERROR,E_USER_WARNING,E_USER_NOTICE,' +\r\n        'E_DEPRECATED,E_USER_DEPRECATED,E_ALL,E_STRICT,' +\r\n        '__COMPILER_HALT_OFFSET__,TRUE,FALSE,NULL,__CLASS__,__DIR__,__FILE__,' +\r\n        '__FUNCTION__,__LINE__,__METHOD__,__NAMESPACE__,__TRAIT__',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initialise the database of variable names.\r\n   *\r\n   * @param workspace Workspace to generate code from.\r\n   */\r\n  init(workspace: Workspace) {\r\n    super.init(workspace);\r\n\r\n    if (!this.nameDB_) {\r\n      this.nameDB_ = new Names(this.RESERVED_WORDS_, '$');\r\n    } else {\r\n      this.nameDB_.reset();\r\n    }\r\n\r\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\r\n    this.nameDB_.populateVariables(workspace);\r\n    this.nameDB_.populateProcedures(workspace);\r\n\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Prepend the generated code with the variable definitions.\r\n   *\r\n   * @param code Generated code.\r\n   * @returns Completed code.\r\n   */\r\n  finish(code: string): string {\r\n    // Convert the definitions dictionary into a list.\r\n    const definitions = Object.values(this.definitions_);\r\n    // Call Blockly.CodeGenerator's finish.\r\n    code = super.finish(code);\r\n    this.isInitialized = false;\r\n\r\n    this.nameDB_!.reset();\r\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\r\n  }\r\n\r\n  /**\r\n   * Naked values are top-level blocks with outputs that aren't plugged into\r\n   * anything.\r\n   *\r\n   * @param line Line of generated code.\r\n   * @returns Legal line of code.\r\n   */\r\n  scrubNakedValue(line: string): string {\r\n    return line + ';\\n';\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped PHP string, complete with\r\n   * quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns PHP string.\r\n   */\r\n  quote_(string: string): string {\r\n    string = string\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\\n/g, '\\\\\\n')\r\n      .replace(/'/g, \"\\\\'\");\r\n    return \"'\" + string + \"'\";\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped multiline PHP string, complete with\r\n   * quotes.\r\n   * @param string Text to encode.\r\n   * @returns PHP string.\r\n   */\r\n  multiline_quote_(string: string): string {\r\n    const lines = string.split(/\\n/g).map(this.quote_);\r\n    // Join with the following, plus a newline:\r\n    // . \"\\n\" .\r\n    // Newline escaping only works in double-quoted strings.\r\n    return lines.join(' . \"\\\\n\" .\\n');\r\n  }\r\n\r\n  /**\r\n   * Common tasks for generating PHP from blocks.\r\n   * Handles comments for the specified block and any connected value blocks.\r\n   * Calls any statements following this block.\r\n   *\r\n   * @param block The current block.\r\n   * @param code The PHP code created for this block.\r\n   * @param thisOnly True to generate code for only this statement.\r\n   * @returns PHP code with comments and subsequent blocks added.\r\n   */\r\n  scrub_(block: Block, code: string, thisOnly = false): string {\r\n    let commentCode = '';\r\n    // Only collect comments for blocks that aren't inline.\r\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\r\n      // Collect comment for this block.\r\n      let comment = block.getCommentText();\r\n      if (comment) {\r\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\r\n        commentCode += this.prefixLines(comment, '// ') + '\\n';\r\n      }\r\n      // Collect comments for all value arguments.\r\n      // Don't collect comments for nested statements.\r\n      for (let i = 0; i < block.inputList.length; i++) {\r\n        if (block.inputList[i].type === inputTypes.VALUE) {\r\n          const childBlock = block.inputList[i].connection!.targetBlock();\r\n          if (childBlock) {\r\n            comment = this.allNestedComments(childBlock);\r\n            if (comment) {\r\n              commentCode += this.prefixLines(comment, '// ');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextBlock =\r\n      block.nextConnection && block.nextConnection.targetBlock();\r\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\r\n    return commentCode + code + nextCode;\r\n  }\r\n\r\n  /**\r\n   * Generate code representing the specified value input, adjusted to take into\r\n   * account indexing (zero- or one-based) and optionally by a specified delta\r\n   * and/or by negation.\r\n   *\r\n   * @param block The block.\r\n   * @param atId The ID of the input block to get (and adjust) the value of.\r\n   * @param delta Value to add.\r\n   * @param negate Whether to negate the value.\r\n   * @param order The highest order acting on this value.\r\n   * @returns The adjusted value or code that evaluates to it.\r\n   */\r\n  getAdjusted(\r\n    block: Block,\r\n    atId: string,\r\n    delta = 0,\r\n    negate = false,\r\n    order = Order.NONE,\r\n  ): string {\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      delta--;\r\n    }\r\n    let defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\r\n\r\n    let orderForInput = order;\r\n    if (delta > 0) {\r\n      orderForInput = Order.ADDITION;\r\n    } else if (delta < 0) {\r\n      orderForInput = Order.SUBTRACTION;\r\n    } else if (negate) {\r\n      orderForInput = Order.UNARY_NEGATION;\r\n    }\r\n\r\n    let at = this.valueToCode(block, atId, orderForInput) || defaultAtIndex;\r\n\r\n    // Easy case: no adjustments.\r\n    if (delta === 0 && !negate) {\r\n      return at;\r\n    }\r\n    // If the index is a naked number, adjust it right now.\r\n    if (stringUtils.isNumber(at)) {\r\n      at = String(Number(at) + delta);\r\n      if (negate) {\r\n        at = String(-Number(at));\r\n      }\r\n      return at;\r\n    }\r\n    // If the index is dynamic, adjust it in code.\r\n    if (delta > 0) {\r\n      at = `${at} + ${delta}`;\r\n    } else if (delta < 0) {\r\n      at = `${at} - ${-delta}`;\r\n    }\r\n    if (negate) {\r\n      at = delta ? `-(${at})` : `-${at}`;\r\n    }\r\n    if (Math.floor(order) >= Math.floor(orderForInput)) {\r\n      at = `(${at})`;\r\n    }\r\n    return at;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for dynamic variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.variablesDynamic\r\n\r\n// generator is dynamically typed.\r\nexport {\r\n  variables_get as variables_get_dynamic,\r\n  variables_set as variables_set_dynamic,\r\n} from './variables.js';\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Instantiate a PhpGenerator and populate it with the complete\r\n * set of block generator functions for PHP.  This is the entrypoint\r\n * for php_compressed.js.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.all\r\n\r\nimport * as lists from './php/lists.js';\r\nimport * as logic from './php/logic.js';\r\nimport * as loops from './php/loops.js';\r\nimport * as math from './php/math.js';\r\nimport {PhpGenerator} from './php/php_generator.js';\r\nimport * as procedures from './php/procedures.js';\r\nimport * as text from './php/text.js';\r\nimport * as variables from './php/variables.js';\r\nimport * as variablesDynamic from './php/variables_dynamic.js';\r\n\r\nexport * from './php/php_generator.js';\r\n\r\n/**\r\n * Php code generator instance.\r\n * @type {!PhpGenerator}\r\n */\r\nexport const phpGenerator = new PhpGenerator();\r\n\r\n// Install per-block-type generator functions:\r\nconst generators: typeof phpGenerator.forBlock = {\r\n  ...lists,\r\n  ...logic,\r\n  ...loops,\r\n  ...math,\r\n  ...procedures,\r\n  ...text,\r\n  ...variables,\r\n  ...variablesDynamic,\r\n};\r\nfor (const name in generators) {\r\n  phpGenerator.forBlock[name] = generators[name];\r\n}\r\n"]}