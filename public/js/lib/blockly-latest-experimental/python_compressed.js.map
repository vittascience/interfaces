{"version":3,"sources":["generators/python/lists.ts","generators/python/logic.ts","generators/python/loops.ts","generators/python/math.ts","generators/python/procedures.ts","generators/python/text.ts","generators/python/variables.ts","generators/python/python_generator.ts","generators/python/variables_dynamic.ts","generators/python.ts"],"names":["lists_create_empty","block","generator","Order","ATOMIC","lists_create_with","elements","Array","itemCount_","i","valueToCode","NONE","join","lists_repeat","item","times","MULTIPLICATIVE","lists_length","FUNCTION_CALL","lists_isEmpty","LOGICAL_NOT","lists_indexOf","list","errorIndex","firstIndexAdjustment","lastIndexAdjustment","workspace","options","oneBasedIndex","functionName","getFieldValue","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","lists_getIndex","mode","where","listOrder","MEMBER","at","getAdjustedInt","definitions_","code","Error","lists_setIndex","value","match","listVar","nameDB_","getDistinctName","NameType","VARIABLE","xVar","lists_getSublist","where1","where2","at1","at2","isNumber","String","lists_sort","type","reverse","sortFunctionName","lists_split","value_input","value_delim","lists_reverse","controls_if","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","PASS","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","operator","OPERATORS","order","RELATIONAL","argument0","argument1","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","parseInt","branch","addLoopTrap","loopVar","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","defineUpRange","defineDownRange","Number","Math","abs","range","scrub","arg","suffix","varName","startVar","endVar","incVar","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","number","Infinity","UNARY_SIGN","math_arithmetic","tuple","ADDITIVE","EXPONENTIATION","math_single","math_constant","CONSTANTS","constant","math_number_property","PROPERTIES","dropdownProperty","inputOrder","outputOrder","numberToCheck","divisor","math_change","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","globals","usedVariables","allUsedVarModels","variable","name","getVars","includes","push","devVarList","allDeveloperVariables","length","getName","DEVELOPER_VARIABLE","globalString","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","scrub_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","quote_","text_join","element","codeAndOrder","forceString","element0","element1","tempVar","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","textOrder","text_getSubstring","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","COLLECTION","STRING_CONVERSION","BITWISE_NOT","BITWISE_SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","LAMBDA","PythonGenerator","CodeGenerator","constructor","ORDER_OVERRIDES","isInitialized","key","addReservedWords","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","DEVELOPER_VARIABLE_TYPE","getId","finish","imports","definitions","def","replace","scrubNakedValue","line","string","quote","multiline_quote_","split","map","lines","thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","delta","negate","defaultAtIndex","atOrder","$jscomp$tmp$exports$module$name","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","strRegExp","test","text_prompt","pythonGenerator","generators","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"python_compressed.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for list blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.lists\r\n\r\nimport type {CreateWithBlock} from '../../blocks/lists.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\nexport function lists_create_empty(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Create an empty list.\r\n  return ['[]', Order.ATOMIC];\r\n}\r\n\r\nexport function lists_create_with(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Create a list with any number of elements of any type.\r\n  const createWithBlock = block as CreateWithBlock;\r\n  const elements = new Array(createWithBlock.itemCount_);\r\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\r\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'None';\r\n  }\r\n  const code = '[' + elements.join(', ') + ']';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function lists_repeat(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Create a list with one element repeated.\r\n  const item = generator.valueToCode(block, 'ITEM', Order.NONE) || 'None';\r\n  const times =\r\n    generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\r\n  const code = '[' + item + '] * ' + times;\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function lists_length(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\r\n  return ['len(' + list + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_isEmpty(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\r\n  const code = 'not len(' + list + ')';\r\n  return [code, Order.LOGICAL_NOT];\r\n}\r\n\r\nexport function lists_indexOf(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Find an item in the list.\r\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || '[]';\r\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  let errorIndex = ' -1';\r\n  let firstIndexAdjustment = '';\r\n  let lastIndexAdjustment = ' - 1';\r\n\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    errorIndex = ' 0';\r\n    firstIndexAdjustment = ' + 1';\r\n    lastIndexAdjustment = '';\r\n  }\r\n\r\n  let functionName;\r\n  if (block.getFieldValue('END') === 'FIRST') {\r\n    functionName = generator.provideFunction_(\r\n      'first_index',\r\n      `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\r\n  try: index = my_list.index(elem)${firstIndexAdjustment}\r\n  except: index =${errorIndex}\r\n  return index\r\n`,\r\n    );\r\n  } else {\r\n    functionName = generator.provideFunction_(\r\n      'last_index',\r\n      `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\r\n  try: index = len(my_list) - my_list[::-1].index(elem)${lastIndexAdjustment}\r\n  except: index =${errorIndex}\r\n  return index\r\n`,\r\n    );\r\n  }\r\n  const code = functionName + '(' + list + ', ' + item + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_getIndex(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] | string {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const listOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\r\n  const list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'GET') {\r\n        const code = list + '[0]';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.pop(0)';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.pop(0)\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'GET') {\r\n        const code = list + '[-1]';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.pop()';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.pop()\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjustedInt(block, 'AT');\r\n      if (mode === 'GET') {\r\n        const code = list + '[' + at + ']';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.pop(' + at + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.pop(' + at + ')\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\r\n      if (mode === 'GET') {\r\n        const code = list + '[' + at + ']';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.pop(' + at + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.pop(' + at + ')\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM':\r\n      (generator as AnyDuringMigration).definitions_['import_random'] =\r\n        'import random';\r\n      if (mode === 'GET') {\r\n        const code = 'random.choice(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_remove_random_item',\r\n          `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\r\n  x = int(random.random() * len(myList))\r\n  return myList.pop(x)\r\n`,\r\n        );\r\n        const code = functionName + '(' + list + ')';\r\n        if (mode === 'GET_REMOVE') {\r\n          return [code, Order.FUNCTION_CALL];\r\n        } else if (mode === 'REMOVE') {\r\n          return code + '\\n';\r\n        }\r\n      }\r\n      break;\r\n  }\r\n  throw Error('Unhandled combination (lists_getIndex).');\r\n}\r\n\r\nexport function lists_setIndex(block: Block, generator: PythonGenerator) {\r\n  // Set element at index.\r\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  let list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const value = generator.valueToCode(block, 'TO', Order.NONE) || 'None';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  // Closure, which accesses and modifies 'list'.\r\n  function cacheList() {\r\n    if (list.match(/^\\w+$/)) {\r\n      return '';\r\n    }\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmp_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    const code = listVar + ' = ' + list + '\\n';\r\n    list = listVar;\r\n    return code;\r\n  }\r\n\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'SET') {\r\n        return list + '[0] = ' + value + '\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.insert(0, ' + value + ')\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'SET') {\r\n        return list + '[-1] = ' + value + '\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.append(' + value + ')\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjustedInt(block, 'AT');\r\n      if (mode === 'SET') {\r\n        return list + '[' + at + '] = ' + value + '\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.insert(' + at + ', ' + value + ')\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\r\n      if (mode === 'SET') {\r\n        return list + '[' + at + '] = ' + value + '\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.insert(' + at + ', ' + value + ')\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      (generator as AnyDuringMigration).definitions_['import_random'] =\r\n        'import random';\r\n      let code = cacheList();\r\n      const xVar = generator.nameDB_!.getDistinctName(\r\n        'tmp_x',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += xVar + ' = int(random.random() * len(' + list + '))\\n';\r\n      if (mode === 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + '\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code += list + '.insert(' + xVar + ', ' + value + ')\\n';\r\n        return code;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_setIndex).');\r\n}\r\n\r\nexport function lists_getSublist(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Get sublist.\r\n  const list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  let at1;\r\n  switch (where1) {\r\n    case 'FROM_START':\r\n      at1 = generator.getAdjustedInt(block, 'AT1');\r\n      if (at1 === 0) {\r\n        at1 = '';\r\n      }\r\n      break;\r\n    case 'FROM_END':\r\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\r\n      break;\r\n    case 'FIRST':\r\n      at1 = '';\r\n      break;\r\n    default:\r\n      throw Error('Unhandled option (lists_getSublist)');\r\n  }\r\n\r\n  let at2;\r\n  switch (where2) {\r\n    case 'FROM_START':\r\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\r\n      break;\r\n    case 'FROM_END':\r\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\r\n      // Ensure that if the result calculated is 0 that sub-sequence will\r\n      // include all elements as expected.\r\n      if (!stringUtils.isNumber(String(at2))) {\r\n        (generator as AnyDuringMigration).definitions_['import_sys'] =\r\n          'import sys';\r\n        at2 += ' or sys.maxsize';\r\n      } else if (at2 === 0) {\r\n        at2 = '';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      at2 = '';\r\n      break;\r\n    default:\r\n      throw Error('Unhandled option (lists_getSublist)');\r\n  }\r\n  const code = list + '[' + at1 + ' : ' + at2 + ']';\r\n  return [code, Order.MEMBER];\r\n}\r\n\r\nexport function lists_sort(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Block for sorting a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  const type = block.getFieldValue('TYPE');\r\n  const reverse = block.getFieldValue('DIRECTION') === '1' ? 'False' : 'True';\r\n  const sortFunctionName = generator.provideFunction_(\r\n    'lists_sort',\r\n    `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, type, reverse):\r\n  def try_float(s):\r\n    try:\r\n      return float(s)\r\n    except:\r\n      return 0\r\n  key_funcs = {\r\n    \"NUMERIC\": try_float,\r\n    \"TEXT\": str,\r\n    \"IGNORE_CASE\": lambda s: str(s).lower()\r\n  }\r\n  key_func = key_funcs[type]\r\n  list_cpy = list(my_list)\r\n  return sorted(list_cpy, key=key_func, reverse=reverse)\r\n`,\r\n  );\r\n\r\n  const code =\r\n    sortFunctionName + '(' + list + ', \"' + type + '\", ' + reverse + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_split(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Block for splitting text into a list, or joining a list into text.\r\n  const mode = block.getFieldValue('MODE');\r\n  let code;\r\n  if (mode === 'SPLIT') {\r\n    const value_input =\r\n      generator.valueToCode(block, 'INPUT', Order.MEMBER) || \"''\";\r\n    const value_delim = generator.valueToCode(block, 'DELIM', Order.NONE);\r\n    code = value_input + '.split(' + value_delim + ')';\r\n  } else if (mode === 'JOIN') {\r\n    const value_input =\r\n      generator.valueToCode(block, 'INPUT', Order.NONE) || '[]';\r\n    const value_delim =\r\n      generator.valueToCode(block, 'DELIM', Order.MEMBER) || \"''\";\r\n    code = value_delim + '.join(' + value_input + ')';\r\n  } else {\r\n    throw Error('Unknown mode: ' + mode);\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_reverse(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Block for reversing a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  const code = 'list(reversed(' + list + '))';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for logic blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.logic\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\nexport function controls_if(block: Block, generator: PythonGenerator) {\r\n  // If/elseif/else condition.\r\n  let n = 0;\r\n  let code = '',\r\n    branchCode,\r\n    conditionCode;\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  do {\r\n    conditionCode =\r\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'False';\r\n    branchCode = generator.statementToCode(block, 'DO' + n) || generator.PASS;\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += (n === 0 ? 'if ' : 'elif ') + conditionCode + ':\\n' + branchCode;\r\n    n++;\r\n  } while (block.getInput('IF' + n));\r\n\r\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\r\n    branchCode = generator.statementToCode(block, 'ELSE') || generator.PASS;\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += 'else:\\n' + branchCode;\r\n  }\r\n  return code;\r\n}\r\n\r\nexport const controls_ifelse = controls_if;\r\n\r\nexport function logic_compare(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Comparison operator.\r\n  const OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>=',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const order = Order.RELATIONAL;\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_operation(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Operations 'and', 'or'.\r\n  const operator = block.getFieldValue('OP') === 'AND' ? 'and' : 'or';\r\n  const order = operator === 'and' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\r\n  let argument0 = generator.valueToCode(block, 'A', order);\r\n  let argument1 = generator.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'False';\r\n    argument1 = 'False';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    const defaultArgument = operator === 'and' ? 'True' : 'False';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_negate(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Negation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'BOOL', Order.LOGICAL_NOT) || 'True';\r\n  const code = 'not ' + argument0;\r\n  return [code, Order.LOGICAL_NOT];\r\n}\r\n\r\nexport function logic_boolean(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Boolean values true and false.\r\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'True' : 'False';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function logic_null(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Null data type.\r\n  return ['None', Order.ATOMIC];\r\n}\r\n\r\nexport function logic_ternary(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Ternary operator.\r\n  const value_if =\r\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'False';\r\n  const value_then =\r\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'None';\r\n  const value_else =\r\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'None';\r\n  const code = value_then + ' if ' + value_if + ' else ' + value_else;\r\n  return [code, Order.CONDITIONAL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for loop blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.loops\r\n\r\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\nexport function controls_repeat_ext(block: Block, generator: PythonGenerator) {\r\n  // Repeat n times.\r\n  let repeats;\r\n  if (block.getField('TIMES')) {\r\n    // Internal number.\r\n    repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\r\n  } else {\r\n    // External number.\r\n    repeats = generator.valueToCode(block, 'TIMES', Order.NONE) || '0';\r\n  }\r\n  if (stringUtils.isNumber(repeats)) {\r\n    repeats = parseInt(repeats, 10);\r\n  } else {\r\n    repeats = 'int(' + repeats + ')';\r\n  }\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\r\n  const loopVar = generator.nameDB_!.getDistinctName(\r\n    'count',\r\n    NameType.VARIABLE,\r\n  );\r\n  const code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\r\n  return code;\r\n}\r\n\r\nexport const controls_repeat = controls_repeat_ext;\r\n\r\nexport function controls_whileUntil(block: Block, generator: PythonGenerator) {\r\n  // Do while/until loop.\r\n  const until = block.getFieldValue('MODE') === 'UNTIL';\r\n  let argument0 =\r\n    generator.valueToCode(\r\n      block,\r\n      'BOOL',\r\n      until ? Order.LOGICAL_NOT : Order.NONE,\r\n    ) || 'False';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\r\n  if (until) {\r\n    argument0 = 'not ' + argument0;\r\n  }\r\n  return 'while ' + argument0 + ':\\n' + branch;\r\n}\r\n\r\nexport function controls_for(block: Block, generator: PythonGenerator) {\r\n  // For loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  let argument0: string | number =\r\n    generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  let argument1: string | number =\r\n    generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  let increment: string | number =\r\n    generator.valueToCode(block, 'BY', Order.NONE) || '1';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\r\n\r\n  let code = '';\r\n  let range;\r\n\r\n  // Helper functions.\r\n  const defineUpRange = function () {\r\n    return generator.provideFunction_(\r\n      'upRange',\r\n      `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\r\n  while start <= stop:\r\n    yield start\r\n    start += abs(step)\r\n`,\r\n    );\r\n  };\r\n  const defineDownRange = function () {\r\n    return generator.provideFunction_(\r\n      'downRange',\r\n      `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\r\n  while start >= stop:\r\n    yield start\r\n    start -= abs(step)\r\n`,\r\n    );\r\n  };\r\n  // Arguments are legal generator code (numbers or strings returned by scrub()).\r\n  const generateUpDownRange = function (\r\n    start: string,\r\n    end: string,\r\n    inc: string,\r\n  ) {\r\n    return (\r\n      '(' +\r\n      start +\r\n      ' <= ' +\r\n      end +\r\n      ') and ' +\r\n      defineUpRange() +\r\n      '(' +\r\n      start +\r\n      ', ' +\r\n      end +\r\n      ', ' +\r\n      inc +\r\n      ') or ' +\r\n      defineDownRange() +\r\n      '(' +\r\n      start +\r\n      ', ' +\r\n      end +\r\n      ', ' +\r\n      inc +\r\n      ')'\r\n    );\r\n  };\r\n\r\n  if (\r\n    stringUtils.isNumber(argument0) &&\r\n    stringUtils.isNumber(argument1) &&\r\n    stringUtils.isNumber(increment)\r\n  ) {\r\n    // All parameters are simple numbers.\r\n    argument0 = Number(argument0);\r\n    argument1 = Number(argument1);\r\n    increment = Math.abs(Number(increment));\r\n    if (argument0 % 1 === 0 && argument1 % 1 === 0 && increment % 1 === 0) {\r\n      // All parameters are integers.\r\n      if (argument0 <= argument1) {\r\n        // Count up.\r\n        argument1++;\r\n        if (argument0 === 0 && increment === 1) {\r\n          // If starting index is 0, omit it.\r\n          range = argument1;\r\n        } else {\r\n          range = argument0 + ', ' + argument1;\r\n        }\r\n        // If increment isn't 1, it must be explicit.\r\n        if (increment !== 1) {\r\n          range += ', ' + increment;\r\n        }\r\n      } else {\r\n        // Count down.\r\n        argument1--;\r\n        range = argument0 + ', ' + argument1 + ', -' + increment;\r\n      }\r\n      range = 'range(' + range + ')';\r\n    } else {\r\n      // At least one of the parameters is not an integer.\r\n      if (argument0 < argument1) {\r\n        range = defineUpRange();\r\n      } else {\r\n        range = defineDownRange();\r\n      }\r\n      range += '(' + argument0 + ', ' + argument1 + ', ' + increment + ')';\r\n    }\r\n  } else {\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    const scrub = function (arg: string, suffix: string) {\r\n      if (stringUtils.isNumber(arg)) {\r\n        // Simple number.\r\n        arg = String(Number(arg));\r\n      } else if (!arg.match(/^\\w+$/)) {\r\n        // Not a variable, it's complicated.\r\n        const varName = generator.nameDB_!.getDistinctName(\r\n          variable0 + suffix,\r\n          NameType.VARIABLE,\r\n        );\r\n        code += varName + ' = ' + arg + '\\n';\r\n        arg = varName;\r\n      }\r\n      return arg;\r\n    };\r\n    const startVar = scrub(argument0, '_start');\r\n    const endVar = scrub(argument1, '_end');\r\n    const incVar = scrub(increment, '_inc');\r\n\r\n    if (typeof startVar === 'number' && typeof endVar === 'number') {\r\n      if (startVar < endVar) {\r\n        range = defineUpRange();\r\n      } else {\r\n        range = defineDownRange();\r\n      }\r\n      range += '(' + startVar + ', ' + endVar + ', ' + incVar + ')';\r\n    } else {\r\n      // We cannot determine direction statically.\r\n      range = generateUpDownRange(startVar, endVar, incVar);\r\n    }\r\n  }\r\n  code += 'for ' + variable0 + ' in ' + range + ':\\n' + branch;\r\n  return code;\r\n}\r\n\r\nexport function controls_forEach(block: Block, generator: PythonGenerator) {\r\n  // For each loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'LIST', Order.RELATIONAL) || '[]';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\r\n  const code = 'for ' + variable0 + ' in ' + argument0 + ':\\n' + branch;\r\n  return code;\r\n}\r\n\r\nexport function controls_flow_statements(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n) {\r\n  // Flow statements: continue, break.\r\n  let xfix = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the break/continue is triggered.\r\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (generator.STATEMENT_PREFIX) {\r\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\r\n    if (loop && !loop.suppressPrefixSuffix) {\r\n      // Inject loop's statement prefix here since the regular one at the end\r\n      // of the loop will not get executed if 'continue' is triggered.\r\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\r\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\r\n    }\r\n  }\r\n  switch (block.getFieldValue('FLOW')) {\r\n    case 'BREAK':\r\n      return xfix + 'break\\n';\r\n    case 'CONTINUE':\r\n      return xfix + 'continue\\n';\r\n  }\r\n  throw Error('Unknown flow statement.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for math blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.math\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\n// If any new block imports any library, add that library name here.\r\n// RESERVED WORDS: 'math,random,Number'\r\n\r\nexport function math_number(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Numeric value.\r\n  let number = Number(block.getFieldValue('NUM'));\r\n  if (number === Infinity) {\r\n    return ['float(\"inf\")', Order.FUNCTION_CALL];\r\n  } else if (number === -Infinity) {\r\n    return ['-float(\"inf\")', Order.UNARY_SIGN];\r\n  } else {\r\n    return [String(number), number < 0 ? Order.UNARY_SIGN : Order.ATOMIC];\r\n  }\r\n}\r\n\r\nexport function math_arithmetic(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Basic arithmetic operators, and power.\r\n  const OPERATORS: Record<string, [string | null, Order]> = {\r\n    'ADD': [' + ', Order.ADDITIVE],\r\n    'MINUS': [' - ', Order.ADDITIVE],\r\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\r\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\r\n    'POWER': [' ** ', Order.EXPONENTIATION],\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const operator = tuple[0];\r\n  const order = tuple[1];\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + operator + argument1;\r\n  return [code, order];\r\n  // In case of 'DIVIDE', division between integers returns different results\r\n  // in generator 2 and 3. However, is not an issue since Blockly does not\r\n  // guarantee identical results in all languages.  To do otherwise would\r\n  // require every operator to be wrapped in a function call.  This would kill\r\n  // legibility of the generated code.\r\n}\r\n\r\nexport function math_single(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Math operators with single operand.\r\n  const operator = block.getFieldValue('OP');\r\n  let code;\r\n  let arg;\r\n  if (operator === 'NEG') {\r\n    // Negation is a special case given its different operator precedence.\r\n    code = generator.valueToCode(block, 'NUM', Order.UNARY_SIGN) || '0';\r\n    return ['-' + code, Order.UNARY_SIGN];\r\n  }\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected (here and below).\r\n  (generator as AnyDuringMigration).definitions_['import_math'] = 'import math';\r\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\r\n  } else {\r\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  }\r\n  // First, handle cases which generate values that don't need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'ABS':\r\n      code = 'math.fabs(' + arg + ')';\r\n      break;\r\n    case 'ROOT':\r\n      code = 'math.sqrt(' + arg + ')';\r\n      break;\r\n    case 'LN':\r\n      code = 'math.log(' + arg + ')';\r\n      break;\r\n    case 'LOG10':\r\n      code = 'math.log10(' + arg + ')';\r\n      break;\r\n    case 'EXP':\r\n      code = 'math.exp(' + arg + ')';\r\n      break;\r\n    case 'POW10':\r\n      code = 'math.pow(10,' + arg + ')';\r\n      break;\r\n    case 'ROUND':\r\n      code = 'round(' + arg + ')';\r\n      break;\r\n    case 'ROUNDUP':\r\n      code = 'math.ceil(' + arg + ')';\r\n      break;\r\n    case 'ROUNDDOWN':\r\n      code = 'math.floor(' + arg + ')';\r\n      break;\r\n    case 'SIN':\r\n      code = 'math.sin(' + arg + ' / 180.0 * math.pi)';\r\n      break;\r\n    case 'COS':\r\n      code = 'math.cos(' + arg + ' / 180.0 * math.pi)';\r\n      break;\r\n    case 'TAN':\r\n      code = 'math.tan(' + arg + ' / 180.0 * math.pi)';\r\n      break;\r\n  }\r\n  if (code) {\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n  // Second, handle cases which generate values that may need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'ASIN':\r\n      code = 'math.asin(' + arg + ') / math.pi * 180';\r\n      break;\r\n    case 'ACOS':\r\n      code = 'math.acos(' + arg + ') / math.pi * 180';\r\n      break;\r\n    case 'ATAN':\r\n      code = 'math.atan(' + arg + ') / math.pi * 180';\r\n      break;\r\n    default:\r\n      throw Error('Unknown math operator: ' + operator);\r\n  }\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function math_constant(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\r\n  const CONSTANTS: Record<string, [string, Order]> = {\r\n    'PI': ['math.pi', Order.MEMBER],\r\n    'E': ['math.e', Order.MEMBER],\r\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\r\n    'SQRT2': ['math.sqrt(2)', Order.MEMBER],\r\n    'SQRT1_2': ['math.sqrt(1.0 / 2)', Order.MEMBER],\r\n    'INFINITY': [\"float('inf')\", Order.ATOMIC],\r\n  };\r\n  type ConstantOption = keyof typeof CONSTANTS;\r\n  const constant = block.getFieldValue('CONSTANT') as ConstantOption;\r\n  if (constant !== 'INFINITY') {\r\n    (generator as AnyDuringMigration).definitions_['import_math'] =\r\n      'import math';\r\n  }\r\n  return CONSTANTS[constant];\r\n}\r\n\r\nexport function math_number_property(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Check if a number is even, odd, prime, whole, positive, or negative\r\n  // or if it is divisible by certain number. Returns true or false.\r\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\r\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\r\n  };\r\n  type PropertyOption = keyof typeof PROPERTIES;\r\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\r\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\r\n  const numberToCheck =\r\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\r\n  let code;\r\n  if (dropdownProperty === 'PRIME') {\r\n    // Prime is a special case as it is not a one-liner test.\r\n    (generator as AnyDuringMigration).definitions_['import_math'] =\r\n      'import math';\r\n    (generator as AnyDuringMigration).definitions_[\r\n      'from_numbers_import_Number'\r\n    ] = 'from numbers import Number';\r\n    const functionName = generator.provideFunction_(\r\n      'math_isPrime',\r\n      `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(n):\r\n  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\r\n  # If n is not a number but a string, try parsing it.\r\n  if not isinstance(n, Number):\r\n    try:\r\n      n = float(n)\r\n    except:\r\n      return False\r\n  if n == 2 or n == 3:\r\n    return True\r\n  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\r\n  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\r\n    return False\r\n  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\r\n  for x in range(6, int(math.sqrt(n)) + 2, 6):\r\n    if n % (x - 1) == 0 or n % (x + 1) == 0:\r\n      return False\r\n  return True\r\n`,\r\n    );\r\n    code = functionName + '(' + numberToCheck + ')';\r\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\r\n    const divisor =\r\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\r\n    // If 'divisor' is some code that evals to 0, generator will raise an error.\r\n    if (divisor === '0') {\r\n      return ['False', Order.ATOMIC];\r\n    }\r\n    code = numberToCheck + ' % ' + divisor + ' == 0';\r\n  } else {\r\n    code = numberToCheck + suffix;\r\n  }\r\n  return [code, outputOrder];\r\n}\r\n\r\nexport function math_change(block: Block, generator: PythonGenerator) {\r\n  // Add to a variable in place.\r\n  (generator as AnyDuringMigration).definitions_['from_numbers_import_Number'] =\r\n    'from numbers import Number';\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return (\r\n    varName +\r\n    ' = (' +\r\n    varName +\r\n    ' if isinstance(' +\r\n    varName +\r\n    ', Number) else 0) + ' +\r\n    argument0 +\r\n    '\\n'\r\n  );\r\n}\r\n\r\n// Rounding functions have a single operand.\r\nexport const math_round = math_single;\r\n// Trigonometry functions have a single operand.\r\nexport const math_trig = math_single;\r\n\r\nexport function math_on_list(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Math functions for lists.\r\n  const func = block.getFieldValue('OP');\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  let code;\r\n  switch (func) {\r\n    case 'SUM':\r\n      code = 'sum(' + list + ')';\r\n      break;\r\n    case 'MIN':\r\n      code = 'min(' + list + ')';\r\n      break;\r\n    case 'MAX':\r\n      code = 'max(' + list + ')';\r\n      break;\r\n    case 'AVERAGE': {\r\n      (generator as AnyDuringMigration).definitions_[\r\n        'from_numbers_import_Number'\r\n      ] = 'from numbers import Number';\r\n      // This operation excludes null and values that aren't int or float:\r\n      // math_mean([null, null, \"aString\", 1, 9]) -> 5.0\r\n      const functionName = generator.provideFunction_(\r\n        'math_mean',\r\n        `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\r\n  localList = [e for e in myList if isinstance(e, Number)]\r\n  if not localList: return\r\n  return float(sum(localList)) / len(localList)\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MEDIAN': {\r\n      (generator as AnyDuringMigration).definitions_[\r\n        'from_numbers_import_Number'\r\n      ] = 'from numbers import Number';\r\n      // This operation excludes null values:\r\n      // math_median([null, null, 1, 3]) -> 2.0\r\n      const functionName = generator.provideFunction_(\r\n        'math_median',\r\n        `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\r\n  localList = sorted([e for e in myList if isinstance(e, Number)])\r\n  if not localList: return\r\n  if len(localList) % 2 == 0:\r\n    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\r\n  else:\r\n    return localList[(len(localList) - 1) // 2]\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MODE': {\r\n      // As a list of numbers can contain more than one mode,\r\n      // the returned result is provided as an array.\r\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1]\r\n      const functionName = generator.provideFunction_(\r\n        'math_modes',\r\n        `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(some_list):\r\n  modes = []\r\n  # Using a lists of [item, count] to keep count rather than dict\r\n  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.\r\n  counts = []\r\n  maxCount = 1\r\n  for item in some_list:\r\n    found = False\r\n    for count in counts:\r\n      if count[0] == item:\r\n        count[1] += 1\r\n        maxCount = max(maxCount, count[1])\r\n        found = True\r\n    if not found:\r\n      counts.append([item, 1])\r\n  for counted_item, item_count in counts:\r\n    if item_count == maxCount:\r\n      modes.append(counted_item)\r\n  return modes\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'STD_DEV': {\r\n      (generator as AnyDuringMigration).definitions_['import_math'] =\r\n        'import math';\r\n      const functionName = generator.provideFunction_(\r\n        'math_standard_deviation',\r\n        `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers):\r\n  n = len(numbers)\r\n  if n == 0: return\r\n  mean = float(sum(numbers)) / n\r\n  variance = sum((x - mean) ** 2 for x in numbers) / n\r\n  return math.sqrt(variance)\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'RANDOM':\r\n      (generator as AnyDuringMigration).definitions_['import_random'] =\r\n        'import random';\r\n      code = 'random.choice(' + list + ')';\r\n      break;\r\n    default:\r\n      throw Error('Unknown operator: ' + func);\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_modulo(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Remainder computation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\r\n  const argument1 =\r\n    generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\r\n  const code = argument0 + ' % ' + argument1;\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function math_constrain(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Constrain a number between two limits.\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\r\n  const argument2 =\r\n    generator.valueToCode(block, 'HIGH', Order.NONE) || \"float('inf')\";\r\n  const code =\r\n    'min(max(' + argument0 + ', ' + argument1 + '), ' + argument2 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_int(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Random integer between [X] and [Y].\r\n  (generator as AnyDuringMigration).definitions_['import_random'] =\r\n    'import random';\r\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  const code = 'random.randint(' + argument0 + ', ' + argument1 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_float(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Random fraction between 0 and 1.\r\n  (generator as AnyDuringMigration).definitions_['import_random'] =\r\n    'import random';\r\n  return ['random.random()', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_atan2(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\r\n  (generator as AnyDuringMigration).definitions_['import_math'] = 'import math';\r\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\r\n  return [\r\n    'math.atan2(' + argument1 + ', ' + argument0 + ') / math.pi * 180',\r\n    Order.MULTIPLICATIVE,\r\n  ];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for procedure blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.procedures\r\n\r\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport * as Variables from '../../core/variables.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\nexport function procedures_defreturn(block: Block, generator: PythonGenerator) {\r\n  // Define a procedure with a return value.\r\n  // First, add a 'global' statement for every variable that is not shadowed by\r\n  // a local parameter.\r\n  const globals = [];\r\n  const workspace = block.workspace;\r\n  const usedVariables = Variables.allUsedVarModels(workspace) || [];\r\n  for (const variable of usedVariables) {\r\n    const varName = variable.name;\r\n    // getVars returns parameter names, not ids, for procedure blocks\r\n    if (!block.getVars().includes(varName)) {\r\n      globals.push(generator.getVariableName(varName));\r\n    }\r\n  }\r\n  // Add developer variables.\r\n  const devVarList = Variables.allDeveloperVariables(workspace);\r\n  for (let i = 0; i < devVarList.length; i++) {\r\n    globals.push(\r\n      generator.nameDB_!.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\r\n    );\r\n  }\r\n\r\n  const globalString = globals.length\r\n    ? generator.INDENT + 'global ' + globals.join(', ') + '\\n'\r\n    : '';\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  let xfix1 = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (xfix1) {\r\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\r\n  }\r\n  let loopTrap = '';\r\n  if (generator.INFINITE_LOOP_TRAP) {\r\n    loopTrap = generator.prefixLines(\r\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  let branch = '';\r\n  if (block.getInput('STACK')) {\r\n    // The 'procedures_defreturn' block might not have a STACK input.\r\n    branch = generator.statementToCode(block, 'STACK');\r\n  }\r\n  let returnValue = '';\r\n  if (block.getInput('RETURN')) {\r\n    // The 'procedures_defnoreturn' block (which shares this code)\r\n    // does not have a RETURN input.\r\n    returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\r\n  }\r\n  let xfix2 = '';\r\n  if (branch && returnValue) {\r\n    // After executing the function body, revisit this block for the return.\r\n    xfix2 = xfix1;\r\n  }\r\n  if (returnValue) {\r\n    returnValue = generator.INDENT + 'return ' + returnValue + '\\n';\r\n  } else if (!branch) {\r\n    branch = generator.PASS;\r\n  }\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.getVariableName(variables[i]);\r\n  }\r\n  let code =\r\n    'def ' +\r\n    funcName +\r\n    '(' +\r\n    args.join(', ') +\r\n    '):\\n' +\r\n    globalString +\r\n    xfix1 +\r\n    loopTrap +\r\n    branch +\r\n    xfix2 +\r\n    returnValue;\r\n  code = generator.scrub_(block, code);\r\n  // Add % so as not to collide with helper functions in definitions list.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\r\n  return null;\r\n}\r\n\r\n// Defining a procedure without a return value uses the same generator as\r\n// a procedure with a return value.\r\nexport const procedures_defnoreturn = procedures_defreturn;\r\n\r\nexport function procedures_callreturn(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Call a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'None';\r\n  }\r\n  const code = funcName + '(' + args.join(', ') + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function procedures_callnoreturn(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n) {\r\n  // Call a procedure with no return value.\r\n  // Generated code is for a function call as a statement is the same as a\r\n  // function call as a value, with the addition of line ending.\r\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator)!;\r\n  return tuple[0] + '\\n';\r\n}\r\n\r\nexport function procedures_ifreturn(block: Block, generator: PythonGenerator) {\r\n  // Conditionally return value from a procedure.\r\n  const condition =\r\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'False';\r\n  let code = 'if ' + condition + ':\\n';\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the return is triggered.\r\n    code += generator.prefixLines(\r\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  if ((block as IfReturnBlock).hasReturnValue_) {\r\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'None';\r\n    code += generator.INDENT + 'return ' + value + '\\n';\r\n  } else {\r\n    code += generator.INDENT + 'return\\n';\r\n  }\r\n  return code;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for text blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.texts\r\n\r\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\nexport function text(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Text value.\r\n  const code = generator.quote_(block.getFieldValue('TEXT'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\n/**\r\n * Regular expression to detect a single-quoted string literal.\r\n */\r\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\r\n\r\n/**\r\n * Enclose the provided value in 'str(...)' function.\r\n * Leave string literals alone.\r\n *\r\n * @param value Code evaluating to a value.\r\n * @returns Array containing code evaluating to a string\r\n *     and\r\n *    the order of the returned code.[string, number]\r\n */\r\nconst forceString = function (value: string): [string, Order] {\r\n  if (strRegExp.test(value)) {\r\n    return [value, Order.ATOMIC];\r\n  }\r\n  return ['str(' + value + ')', Order.FUNCTION_CALL];\r\n};\r\n\r\nexport function text_join(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Create a string made up of any number of elements of any type.\r\n  // Should we allow joining by '-' or ',' or any other characters?\r\n  const joinBlock = block as JoinMutatorBlock;\r\n  switch (joinBlock.itemCount_) {\r\n    case 0:\r\n      return [\"''\", Order.ATOMIC];\r\n    case 1: {\r\n      const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\r\n      const codeAndOrder = forceString(element);\r\n      return codeAndOrder;\r\n    }\r\n    case 2: {\r\n      const element0 = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\r\n      const element1 = generator.valueToCode(block, 'ADD1', Order.NONE) || \"''\";\r\n      const code = forceString(element0)[0] + ' + ' + forceString(element1)[0];\r\n      return [code, Order.ADDITIVE];\r\n    }\r\n    default: {\r\n      const elements = [];\r\n      for (let i = 0; i < joinBlock.itemCount_; i++) {\r\n        elements[i] =\r\n          generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\r\n      }\r\n      const tempVar = generator.nameDB_!.getDistinctName(\r\n        'x',\r\n        NameType.VARIABLE,\r\n      );\r\n      const code =\r\n        \"''.join([str(\" +\r\n        tempVar +\r\n        ') for ' +\r\n        tempVar +\r\n        ' in [' +\r\n        elements.join(', ') +\r\n        ']])';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n  }\r\n}\r\n\r\nexport function text_append(block: Block, generator: PythonGenerator) {\r\n  // Append to a variable in place.\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return varName + ' = str(' + varName + ') + ' + forceString(value)[0] + '\\n';\r\n}\r\n\r\nexport function text_length(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  return ['len(' + text + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_isEmpty(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  const code = 'not len(' + text + ')';\r\n  return [code, Order.LOGICAL_NOT];\r\n}\r\n\r\nexport function text_indexOf(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Search the text for a substring.\r\n  // Should we allow for non-case sensitive???\r\n  const operator = block.getFieldValue('END') === 'FIRST' ? 'find' : 'rfind';\r\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\r\n  const code = text + '.' + operator + '(' + substring + ')';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    return [code + ' + 1', Order.ADDITIVE];\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_charAt(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Get letter at index.\r\n  // Note: Until January 2013 this block did not have the WHERE input.\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const textOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\r\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\r\n  switch (where) {\r\n    case 'FIRST': {\r\n      const code = text + '[0]';\r\n      return [code, Order.MEMBER];\r\n    }\r\n    case 'LAST': {\r\n      const code = text + '[-1]';\r\n      return [code, Order.MEMBER];\r\n    }\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjustedInt(block, 'AT');\r\n      const code = text + '[' + at + ']';\r\n      return [code, Order.MEMBER];\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\r\n      const code = text + '[' + at + ']';\r\n      return [code, Order.MEMBER];\r\n    }\r\n    case 'RANDOM': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected (here and below).\r\n      (generator as AnyDuringMigration).definitions_['import_random'] =\r\n        'import random';\r\n      const functionName = generator.provideFunction_(\r\n        'text_random_letter',\r\n        `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(text):\r\n  x = int(random.random() * len(text))\r\n  return text[x]\r\n`,\r\n      );\r\n      const code = functionName + '(' + text + ')';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n  }\r\n  throw Error('Unhandled option (text_charAt).');\r\n}\r\n\r\nexport function text_getSubstring(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Get substring.\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  const text = generator.valueToCode(block, 'STRING', Order.MEMBER) || \"''\";\r\n  let at1;\r\n  switch (where1) {\r\n    case 'FROM_START':\r\n      at1 = generator.getAdjustedInt(block, 'AT1');\r\n      if (at1 === 0) {\r\n        at1 = '';\r\n      }\r\n      break;\r\n    case 'FROM_END':\r\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\r\n      break;\r\n    case 'FIRST':\r\n      at1 = '';\r\n      break;\r\n    default:\r\n      throw Error('Unhandled option (text_getSubstring)');\r\n  }\r\n\r\n  let at2;\r\n  switch (where2) {\r\n    case 'FROM_START':\r\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\r\n      break;\r\n    case 'FROM_END':\r\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\r\n      // Ensure that if the result calculated is 0 that sub-sequence will\r\n      // include all elements as expected.\r\n      if (!stringUtils.isNumber(String(at2))) {\r\n        (generator as AnyDuringMigration).definitions_['import_sys'] =\r\n          'import sys';\r\n        at2 += ' or sys.maxsize';\r\n      } else if (at2 === 0) {\r\n        at2 = '';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      at2 = '';\r\n      break;\r\n    default:\r\n      throw Error('Unhandled option (text_getSubstring)');\r\n  }\r\n  const code = text + '[' + at1 + ' : ' + at2 + ']';\r\n  return [code, Order.MEMBER];\r\n}\r\n\r\nexport function text_changeCase(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Change capitalization.\r\n  const OPERATORS = {\r\n    'UPPERCASE': '.upper()',\r\n    'LOWERCASE': '.lower()',\r\n    'TITLECASE': '.title()',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('CASE') as OperatorOption];\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const code = text + operator;\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_trim(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Trim spaces.\r\n  const OPERATORS = {\r\n    'LEFT': '.lstrip()',\r\n    'RIGHT': '.rstrip()',\r\n    'BOTH': '.strip()',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const code = text + operator;\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_print(block: Block, generator: PythonGenerator) {\r\n  // Print statement.\r\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return 'print(' + msg + ')\\n';\r\n}\r\n\r\nexport function text_prompt_ext(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Prompt function.\r\n  const functionName = generator.provideFunction_(\r\n    'text_prompt',\r\n    `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(msg):\r\n  try:\r\n    return raw_input(msg)\r\n  except NameError:\r\n    return input(msg)\r\n`,\r\n  );\r\n  let msg;\r\n  if (block.getField('TEXT')) {\r\n    // Internal message.\r\n    msg = generator.quote_(block.getFieldValue('TEXT'));\r\n  } else {\r\n    // External message.\r\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  }\r\n  let code = functionName + '(' + msg + ')';\r\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\r\n  if (toNumber) {\r\n    code = 'float(' + code + ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport const text_prompt = text_prompt_ext;\r\n\r\nexport function text_count(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\r\n  const code = text + '.count(' + sub + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_replace(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\r\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\r\n  const code = text + '.replace(' + from + ', ' + to + ')';\r\n  return [code, Order.MEMBER];\r\n}\r\n\r\nexport function text_reverse(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const code = text + '[::-1]';\r\n  return [code, Order.MEMBER];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.variables\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\nexport function variables_get(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Variable getter.\r\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function variables_set(block: Block, generator: PythonGenerator) {\r\n  // Variable setter.\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' = ' + argument0 + '\\n';\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Python code generator class, including helper methods for\r\n * generating Python for blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport {CodeGenerator} from '../../core/generator.js';\r\nimport {inputTypes} from '../../core/inputs/input_types.js';\r\nimport {Names} from '../../core/names.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport * as Variables from '../../core/variables.js';\r\nimport type {Workspace} from '../../core/workspace.js';\r\n\r\n/**\r\n * Order of operation ENUMs.\r\n * http://docs.python.org/reference/expressions.html#summary\r\n */\r\n// prettier-ignore\r\nexport enum Order {\r\n  ATOMIC = 0,             // 0 \"\" ...\r\n  COLLECTION = 1,         // tuples, lists, dictionaries\r\n  STRING_CONVERSION = 1,  // `expression...`\r\n  MEMBER = 2.1,           // . []\r\n  FUNCTION_CALL = 2.2,    // ()\r\n  EXPONENTIATION = 3,     // **\r\n  UNARY_SIGN = 4,         // + -\r\n  BITWISE_NOT = 4,        // ~\r\n  MULTIPLICATIVE = 5,     // * / // %\r\n  ADDITIVE = 6,           // + -\r\n  BITWISE_SHIFT = 7,      // << >>\r\n  BITWISE_AND = 8,        // &\r\n  BITWISE_XOR = 9,        // ^\r\n  BITWISE_OR = 10,        // |\r\n  RELATIONAL = 11,        // in, not in, is, is not, >, >=, <>, !=, ==\r\n  LOGICAL_NOT = 12,       // not\r\n  LOGICAL_AND = 13,       // and\r\n  LOGICAL_OR = 14,        // or\r\n  CONDITIONAL = 15,       // if else\r\n  LAMBDA = 16,            // lambda\r\n  NONE = 99,              // (...)\r\n}\r\n\r\n/**\r\n * PythonScript code generator class.\r\n */\r\nexport class PythonGenerator extends CodeGenerator {\r\n  /** List of outer-inner pairings that do NOT require parentheses. */\r\n  ORDER_OVERRIDES: [Order, Order][] = [\r\n    // (foo()).bar -> foo().bar\r\n    // (foo())[0] -> foo()[0]\r\n    [Order.FUNCTION_CALL, Order.MEMBER],\r\n    // (foo())() -> foo()()\r\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\r\n    // (foo.bar).baz -> foo.bar.baz\r\n    // (foo.bar)[0] -> foo.bar[0]\r\n    // (foo[0]).bar -> foo[0].bar\r\n    // (foo[0])[1] -> foo[0][1]\r\n    [Order.MEMBER, Order.MEMBER],\r\n    // (foo.bar)() -> foo.bar()\r\n    // (foo[0])() -> foo[0]()\r\n    [Order.MEMBER, Order.FUNCTION_CALL],\r\n\r\n    // not (not foo) -> not not foo\r\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\r\n    // a and (b and c) -> a and b and c\r\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\r\n    // a or (b or c) -> a or b or c\r\n    [Order.LOGICAL_OR, Order.LOGICAL_OR],\r\n  ];\r\n\r\n  /**\r\n   * Empty loops or conditionals are not allowed in Python.\r\n   */\r\n  PASS: string = ''; // Initialised by init().\r\n\r\n  /** @param name Name of the language the generator is for. */\r\n  constructor(name = 'Python') {\r\n    super(name);\r\n    this.isInitialized = false;\r\n\r\n    // Copy Order values onto instance for backwards compatibility\r\n    // while ensuring they are not part of the publically-advertised\r\n    // API.\r\n    //\r\n    // TODO(#7085): deprecate these in due course.  (Could initially\r\n    // replace data properties with get accessors that call\r\n    // deprecate.warn().)\r\n    for (const key in Order) {\r\n      // Must assign Order[key] to a temporary to get the type guard to work;\r\n      // see https://github.com/microsoft/TypeScript/issues/10530.\r\n      const value = Order[key];\r\n      // Skip reverse-lookup entries in the enum.  Due to\r\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\r\n      // of TypeScript 5.5.2) actually narrows the type of value to\r\n      // never - but that still allows the following assignment to\r\n      // succeed.\r\n      if (typeof value === 'string') continue;\r\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\r\n    }\r\n\r\n    // List of illegal variable names.  This is not intended to be a\r\n    // security feature.  Blockly is 100% client-side, so bypassing\r\n    // this list is trivial.  This is intended to prevent users from\r\n    // accidentally clobbering a built-in object or function.\r\n    this.addReservedWords(\r\n      // import keyword\r\n      // print(','.join(sorted(keyword.kwlist)))\r\n      // https://docs.python.org/3/reference/lexical_analysis.html#keywords\r\n      // https://docs.python.org/2/reference/lexical_analysis.html#keywords\r\n      'False,None,True,and,as,assert,break,class,continue,def,del,elif,else,' +\r\n        'except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,' +\r\n        'not,or,pass,print,raise,return,try,while,with,yield,' +\r\n        // https://docs.python.org/3/library/constants.html\r\n        // https://docs.python.org/2/library/constants.html\r\n        'NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,' +\r\n        // >>> print(','.join(sorted(dir(__builtins__))))\r\n        // https://docs.python.org/3/library/functions.html\r\n        // https://docs.python.org/2/library/functions.html\r\n        'ArithmeticError,AssertionError,AttributeError,BaseException,' +\r\n        'BlockingIOError,BrokenPipeError,BufferError,BytesWarning,' +\r\n        'ChildProcessError,ConnectionAbortedError,ConnectionError,' +\r\n        'ConnectionRefusedError,ConnectionResetError,DeprecationWarning,' +\r\n        'EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,' +\r\n        'FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,' +\r\n        'IOError,ImportError,ImportWarning,IndentationError,IndexError,' +\r\n        'InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,' +\r\n        'LookupError,MemoryError,ModuleNotFoundError,NameError,' +\r\n        'NotADirectoryError,NotImplemented,NotImplementedError,OSError,' +\r\n        'OverflowError,PendingDeprecationWarning,PermissionError,' +\r\n        'ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,' +\r\n        'RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,' +\r\n        'StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,' +\r\n        'TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,' +\r\n        'UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,' +\r\n        'UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,' +\r\n        '__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,' +\r\n        'abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,' +\r\n        'callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,' +\r\n        'delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,' +\r\n        'float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,' +\r\n        'int,intern,isinstance,issubclass,iter,len,license,list,locals,long,' +\r\n        'map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,' +\r\n        'quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,' +\r\n        'slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,' +\r\n        'vars,xrange,zip',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initialise the database of variable names.\r\n   *\r\n   * @param workspace Workspace to generate code from.\r\n   */\r\n  init(workspace: Workspace) {\r\n    super.init(workspace);\r\n\r\n    this.PASS = this.INDENT + 'pass\\n';\r\n\r\n    if (!this.nameDB_) {\r\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\r\n    } else {\r\n      this.nameDB_.reset();\r\n    }\r\n\r\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\r\n    this.nameDB_.populateVariables(workspace);\r\n    this.nameDB_.populateProcedures(workspace);\r\n\r\n    const defvars = [];\r\n    // Add developer variables (not created or named by the user).\r\n    const devVarList = Variables.allDeveloperVariables(workspace);\r\n    for (let i = 0; i < devVarList.length; i++) {\r\n      defvars.push(\r\n        this.nameDB_.getName(devVarList[i], Names.DEVELOPER_VARIABLE_TYPE) +\r\n          ' = None',\r\n      );\r\n    }\r\n\r\n    // Add user variables, but only ones that are being used.\r\n    const variables = Variables.allUsedVarModels(workspace);\r\n    for (let i = 0; i < variables.length; i++) {\r\n      defvars.push(this.getVariableName(variables[i].getId()) + ' = None');\r\n    }\r\n\r\n    this.definitions_['variables'] = defvars.join('\\n');\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Prepend the generated code with import statements and variable definitions.\r\n   *\r\n   * @param code Generated code.\r\n   * @returns Completed code.\r\n   */\r\n  finish(code: string): string {\r\n    // Convert the definitions dictionary into a list.\r\n    const imports = [];\r\n    const definitions = [];\r\n    for (let name in this.definitions_) {\r\n      const def = this.definitions_[name];\r\n      if (def.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/)) {\r\n        imports.push(def);\r\n      } else {\r\n        definitions.push(def);\r\n      }\r\n    }\r\n    // Call Blockly.CodeGenerator's finish.\r\n    code = super.finish(code);\r\n    this.isInitialized = false;\r\n\r\n    this.nameDB_!.reset();\r\n    const allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\r\n    return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\r\n  }\r\n\r\n  /**\r\n   * Naked values are top-level blocks with outputs that aren't plugged into\r\n   * anything.\r\n   *\r\n   * @param line Line of generated code.\r\n   * @returns Legal line of code.\r\n   */\r\n  scrubNakedValue(line: string): string {\r\n    return line + '\\n';\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped Python string, complete with quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns Python string.\r\n   */\r\n  quote_(string: string): string {\r\n    string = string.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\\\n');\r\n\r\n    // Follow the CPython behaviour of repr() for a non-byte string.\r\n    let quote = \"'\";\r\n    if (string.includes(\"'\")) {\r\n      if (!string.includes('\"')) {\r\n        quote = '\"';\r\n      } else {\r\n        string = string.replace(/'/g, \"\\\\'\");\r\n      }\r\n    }\r\n    return quote + string + quote;\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped multiline Python string, complete\r\n   * with quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns Python string.\r\n   */\r\n  multiline_quote_(string: string): string {\r\n    const lines = string.split(/\\n/g).map(this.quote_);\r\n    // Join with the following, plus a newline:\r\n    // + '\\n' +\r\n    return lines.join(\" + '\\\\n' + \\n\");\r\n  }\r\n\r\n  /**\r\n   * Common tasks for generating Python from blocks.\r\n   * Handles comments for the specified block and any connected value blocks.\r\n   * Calls any statements following this block.\r\n   *\r\n   * @param block The current block.\r\n   * @param code The Python code created for this block.\r\n   * @param thisOnly True to generate code for only this statement.\r\n   * @returns Python code with comments and subsequent blocks added.\r\n   */\r\n  scrub_(block: Block, code: string, thisOnly = false): string {\r\n    let commentCode = '';\r\n    // Only collect comments for blocks that aren't inline.\r\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\r\n      // Collect comment for this block.\r\n      let comment = block.getCommentText();\r\n      if (comment) {\r\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\r\n        commentCode += this.prefixLines(comment + '\\n', '# ');\r\n      }\r\n      // Collect comments for all value arguments.\r\n      // Don't collect comments for nested statements.\r\n      for (let i = 0; i < block.inputList.length; i++) {\r\n        if (block.inputList[i].type === inputTypes.VALUE) {\r\n          const childBlock = block.inputList[i].connection!.targetBlock();\r\n          if (childBlock) {\r\n            comment = this.allNestedComments(childBlock);\r\n            if (comment) {\r\n              commentCode += this.prefixLines(comment, '# ');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextBlock =\r\n      block.nextConnection && block.nextConnection.targetBlock();\r\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\r\n    return commentCode + code + nextCode;\r\n  }\r\n\r\n  /**\r\n   * Gets a property and adjusts the value, taking into account indexing.\r\n   * If a static int, casts to an integer, otherwise returns a code string.\r\n   *\r\n   * @param block The block.\r\n   * @param atId The ID of the input block to get (and adjust) the value of.\r\n   * @param delta Value to add.\r\n   * @param negate Whether to negate the value.\r\n   * @returns The adjusted value or code that evaluates to it.\r\n   */\r\n  getAdjustedInt(\r\n    block: Block,\r\n    atId: string,\r\n    delta = 0,\r\n    negate = false,\r\n  ): string | number {\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      delta--;\r\n    }\r\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\r\n    const atOrder = delta ? Order.ADDITIVE : Order.NONE;\r\n    let at: string | number =\r\n      this.valueToCode(block, atId, atOrder) || defaultAtIndex;\r\n\r\n    if (stringUtils.isNumber(at)) {\r\n      // If the index is a naked number, adjust it right now.\r\n      at = parseInt(at, 10) + delta;\r\n      if (negate) {\r\n        at = -at;\r\n      }\r\n    } else {\r\n      // If the index is dynamic, adjust it in code.\r\n      if (delta > 0) {\r\n        at = 'int(' + at + ' + ' + delta + ')';\r\n      } else if (delta < 0) {\r\n        at = 'int(' + at + ' - ' + -delta + ')';\r\n      } else {\r\n        at = 'int(' + at + ')';\r\n      }\r\n      if (negate) {\r\n        at = '-' + at;\r\n      }\r\n    }\r\n    return at;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for dynamic variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.variablesDynamic\r\n\r\n// generator is dynamically typed.\r\nexport {\r\n  variables_get as variables_get_dynamic,\r\n  variables_set as variables_set_dynamic,\r\n} from './variables.js';\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Instantiate a PythonGenerator and populate it with the\r\n * complete set of block generator functions for Python.  This is the\r\n * entrypoint for python_compressed.js.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.all\r\n\r\nimport * as lists from './python/lists.js';\r\nimport * as logic from './python/logic.js';\r\nimport * as loops from './python/loops.js';\r\nimport * as math from './python/math.js';\r\nimport * as procedures from './python/procedures.js';\r\nimport {PythonGenerator} from './python/python_generator.js';\r\nimport * as text from './python/text.js';\r\nimport * as variables from './python/variables.js';\r\nimport * as variablesDynamic from './python/variables_dynamic.js';\r\n\r\nexport * from './python/python_generator.js';\r\n\r\n/**\r\n * Python code generator instance.\r\n * @type {!PythonGenerator}\r\n */\r\nexport const pythonGenerator = new PythonGenerator();\r\n\r\n// Add reserved words.  This list should include all words mentioned\r\n// in RESERVED WORDS: comments in the imports above.\r\npythonGenerator.addReservedWords('math,random,Number');\r\n\r\n// Install per-block-type generator functions:\r\n// Install per-block-type generator functions:\r\nconst generators: typeof pythonGenerator.forBlock = {\r\n  ...lists,\r\n  ...logic,\r\n  ...loops,\r\n  ...math,\r\n  ...procedures,\r\n  ...text,\r\n  ...variables,\r\n  ...variablesDynamic,\r\n};\r\nfor (const name in generators) {\r\n  pythonGenerator.forBlock[name] = generators[name];\r\n}\r\n"]}